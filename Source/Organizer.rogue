module Froley

class Organizer : RebuildVisitor
  PROPERTIES
    this_match      : Match

  METHODS
    method on_visit_node( cmd:CreateCmd )
      local node_type = Program.type( cmd.t, cmd.name )
      if (cmd.base_type_name)
        local base_type = Program.type( cmd.t, cmd.base_type_name )
        if (node_type.base_type and node_type.base_type is not base_type)
          throw cmd.t.error( "Node '$' used with multiple conflicting base types ('$' and '$')." ...
          (cmd.name, base_type, node_type.base_type) )
        endIf
        node_type.@base_type = base_type
      endIf

      if (not cmd.is_organized)
        cmd.is_organized = true
        node_type.is_node = true

        # See Collector.handleRoutine) for more details on the following.
        if (this_routine.is_binary)
          local args = cmd.args
          if (args.count == 0) args.add( CreateCmdArg(cmd.t,"left",null,"Cmd") )
          if (args.count == 1) args.add( CreateCmdArg(cmd.t,"right",null,"Cmd") )
          node_type.set_base_type( cmd.t, "Binary" )

        elseIf (this_routine.is_right_binary)
          local args = cmd.args
          if (args.count == 0) args.add( CreateCmdArg(cmd.t,"left",null,"Cmd") )
          if (args.count == 1) args.add( CreateCmdArg(cmd.t,"right",null,"Cmd") )
          node_type.set_base_type( cmd.t, "Binary" )

        elseIf (this_routine.is_pre_unary)
          local args = cmd.args
          if (args.count == 0) args.add( CreateCmdArg(cmd.t,"operand",null,"Cmd") )
          node_type.set_base_type( cmd.t, "Unary" )

        elseIf (this_routine.is_post_unary)
          if (cmd.args.count == 0) cmd.args.add( CreateCmdArg(cmd.t,"operand",null,"Cmd") )
          node_type.set_base_type( cmd.t, "Unary" )

        endIf

        visit( cmd.args )

        # Count number of args
        local args = cmd.args->(as Args)
        cmd.arg_count = args.count
        forEach (arg at index in args)
          block arg = arg->(as CreateCmdArg)
            arg.index = index
            if (arg.arg_value)
              if (not arg.arg_type)
                if (arg.arg_value instanceOf NativeLiteral)
                  arg.arg_type = "native"
                else
                  arg.arg_type = "String"
                endIf
              endIf
            else
              ++cmd.node_arg_count
              arg.is_node_arg = true
              if (not arg.arg_type) arg.arg_type = "Cmd"
            endIf
          endBlock
        endForEach

        # Assign stack-relative offsets
        local stack_offset = -(cmd.node_arg_count)
        forEach (arg in args)
          block arg = arg->(as CreateCmdArg)
            if (arg.is_node_arg)
              arg.stack_offset = stack_offset
              ++stack_offset
            endIf
          endBlock
        endForEach

        local sig_builder = String()
        sig_builder.print( cmd.name )
        sig_builder.print( "(" )
        if (cmd.args)
          forEach (arg at index in cmd.args->(as Args))
            block arg = arg->(as CreateCmdArg)
              if (index > 0) sig_builder.print ','
              sig_builder.print(arg.arg_type)
            endBlock
          endForEach
        endIf
        sig_builder.print( ")" )
        cmd.signature = sig_builder

        node_type.add( cmd )
      endIf
      visit_children( cmd )

    method on_visit_node( cmd:CreateList )
      if (not cmd.list_type) cmd.list_type = "CmdList"
      Program.type(cmd.t,cmd.list_type).is_list = true
      visit_children( cmd )

    method on_visit( cmd:Identifier )->Cmd
      if (this_element instanceOf ParserDef and cmd.name == "content")
        return visit( TokenContent(cmd.t) )
      endIf
      return cmd

    method on_visit( cmd:LiteralStringOrCharacter )->Cmd
      if (cmd.value.count == 1) return visit( LiteralCharacter( cmd.t, cmd.value[0] ) )
      else                      return visit( LiteralString( cmd.t, cmd.value ) )

    method on_visit_node( cmd:NativeTypes )
      forEach (native_type in cmd)
        Program.type( native_type.t, native_type->String ).is_native = true
      endForEach
      visit_children( cmd )

    method on_visit_node( cmd:On )
      if (not cmd.is_organized)
        cmd.is_organized = true
        # See on_visit(FroleyRoutine) for more details
        if (this_routine.is_binary)
          cmd.token_types.add( Identifier(cmd.t,"_consume_eols()") )
          cmd.token_types.add( Identifier(cmd.t,this_routine.next_routine.name) )
          cmd.statements.add( Access(cmd.t,this_routine.name) )
          cmd.statements.add( Return(cmd.t,null) )
        elseIf (this_routine.is_right_binary)
          cmd.token_types.add( Identifier(cmd.t,"_consume_eols()") )
          cmd.token_types.add( Identifier(cmd.t,this_routine.name) )
        elseIf (this_routine.is_pre_unary)
          cmd.token_types.add( Identifier(cmd.t,"_consume_eols()") )
          cmd.token_types.add( Identifier(cmd.t,this_routine.name) )
        elseIf (this_routine.is_post_unary)
          cmd.statements.add( Access(cmd.t,this_routine.name) )
          cmd.statements.add( Return(cmd.t,null) )
        endIf
      endIf
      visit_children( cmd )

    method on_visit_node( cmd:ElseOn )
      if (not cmd.is_organized)
        cmd.is_organized = true
        if (this_routine.is_binary)
          cmd.token_types.add( Identifier(cmd.t,"_consume_eols()") )
          cmd.token_types.add( Identifier(cmd.t,this_routine.next_routine.name) )
          cmd.statements.add( Access(cmd.t,this_routine.name) )
          cmd.statements.add( Return(cmd.t,null) )
        elseIf (this_routine.is_right_binary)
          cmd.token_types.add( Identifier(cmd.t,"_consume_eols()") )
          cmd.token_types.add( Identifier(cmd.t,this_routine.name) )
        elseIf (this_routine.is_pre_unary)
          cmd.token_types.add( Identifier(cmd.t,"_consume_eols()") )
          cmd.token_types.add( Identifier(cmd.t,this_routine.name) )
        elseIf (this_routine.is_post_unary)
          cmd.statements.add( Access(cmd.t,this_routine.name) )
          cmd.statements.add( Return(cmd.t,null) )
        endIf
      endIf
      visit_children( cmd )

    method on_visit_node( cmd:ParserCallUserMethod )
      Program.parser_user_calls.add( cmd.fn_name )
      visit_children( cmd )

    method on_visit_node( cmd:ParserDef )
      if (not cmd.name) cmd.name = "Parser"
      if (Program.parser and Program.parser is not cmd)
        throw cmd.t.error( "Multiple parsers defined - only one parser can be defined." )
      endIf
      Program.parser = cmd
      visit_children( cmd )

    method on_visit( cmd:ParserProduce )->Cmd
      cmd.arg = visit( cmd.arg )->(as CreateCmd)
      if (this_routine.is_binary or this_routine.is_post_unary)
        # Change 'produce X' to 'create X'
        # See on_visit(FroleyRoutine) for more details
        return on_visit( ParserCreate(cmd.t,cmd.arg) )
      endIf
      visit_children( cmd )
      return cmd

    method on_visit( cmd:ProduceAny )->Cmd
      # Add a scan case for each token in the named group
      local t = cmd.t
      local group = Program.token_groups[ cmd.token_group_name ]
      if (not group)
        throw t.error( ''No such token group "$".''(cmd.token_group_name) )
      endIf
      forEach (item in group.definitions)
        local def = item->(as TokenDef)
        local expr = LiteralString( t, def.symbol )
        local cmd_create = ScannerCreate( t, Access(t,def.name) )
        local cmd_restart = Restart( t, null )
        local _case = MatchCase( t, expr, Statements(t,cmd_create,cmd_restart) )
        this_match.cases.add( _case )
        visit( _case )
      endForEach
      return null

    method on_visit_node( cmd:ProduceList )
      if (not cmd.list_type) cmd.list_type = "CmdList"
      Program.type(cmd.t,cmd.list_type).is_list = true
      visit_children( cmd )

    method on_visit_node( cmd:FroleyRoutine )
      if (not cmd.is_organized)
        cmd.is_organized = true
        if (cmd.attributes)
          if (cmd.ip + 1 == this_element.routines.count)
            throw cmd.t.error(
              "A $ routine requires a following routine that will be implicitly called."(cmd.attributes) )
          endIf

          cmd.next_routine = this_element.routines.at(cmd.ip+1)

          if (cmd.is_primer)
            # ORIGINAL
            #   - parse_add [primer]
            #
            #   - parse_add_body [binary/postUnary]
            #     ...
            #
            #   - parse_next
            #
            # ORGANIZED
            #   - parse_add [primer]
            #     parse_next
            #     parse_add_body
            #
            #   - parse_add_body [binary/postUnary]
            #     ...
            #
            #   - parse_next
            #
            if (cmd.ip + 2 == this_element.routines.count)
              throw cmd.t.error(
                "A $ routine requires a following routine that will be implicitly called."(cmd.attributes) )
            endIf
            local next_next_routine = this_element.routines.at(cmd.ip+2)
            cmd.statements.add( Access(cmd.t,next_next_routine.name) )
            cmd.statements.add( Access(cmd.t,cmd.next_routine.name) )

          elseIf (cmd.is_right_binary)
            # ORIGINAL
            #   - assign [rightBinary]
            #     on "=" -> Assign
            #
            #   - parse_next
            #
            # ORGANIZED
            #   - assign [rightBinary]
            #     parse_next                      # added in FroleyRoutine
            #     on "=" assign ...               # added in On/ElseOn
            #       -> Assign(left,right):Binary  # added in CreateCmd
            cmd.statements.insert( Access(cmd.t,cmd.next_routine.name) )

          elseIf (cmd.is_pre_unary)
            # ORIGINAL
            #   - negate [preUnary]
            #     on "-" -> Negate
            #
            #   - parse_next
            #
            # ORGANIZED
            #   - negate [preUnary]
            #     on "-" negate ...     # added in On/ElseOn
            #       -> Negate(operand)  # added in CreateCmd
            #     parse_next            # added in FroleyRoutine
            cmd.statements.add( Access(cmd.t,cmd.next_routine.name) )

          endIf
        endIf
      endIf
      visit_children( cmd )

    method on_visit_node( cmd:ScannerCallUserMethod )
      Program.scanner_user_calls.add( cmd.fn_name )
      visit_children( cmd )

    method on_visit_node( cmd:ScannerDef )
      if (not cmd.name) cmd.name = "Scanner"
      if (Program.scanner and Program.scanner is not cmd)
        throw cmd.t.error( "Multiple scanners defined - only one scanner can be defined." )
      endIf
      Program.scanner = cmd
      visit_children( cmd )

endClass


# WARNING: This file will be automatically regenerated by the Froley compiler.
# Any edits will be lost!

module F2

class CmdFactory
  GLOBAL METHODS
    method create_cmd( constructor_index:Int32, args:CmdInitArgs )->Cmd
      local t = args.t
      which (constructor_index)
        case 0: return CmdList( t, args )
        case 1: return ScannerDef( t, args.cmd_to<<String>>(0), args[1] )
        case 2: return ParserDef( t, args.cmd_to<<String>>(0), args[1] )
        case 3: return TokenGroup( t, args.cmd_to<<String>>(0), args.cmd_as<<CmdList>>(1) )
        case 4: return Identifier( t, t.content )
        case 5: return Routine( t, args.cmd_to<<String>>(0), args.cmd_to<<String>>(1), args[2] )
        case 6: return Subroutine( t, args.cmd_to<<String>>(0), args.cmd_to<<String>>(1), args[2] )
        case 7: return TokenDef( t, args.cmd_to<<String>>(0), args.cmd_to<<String>>(1), args.cmd_as<<CmdList>>(2) )
        case 8: return Symbol( t, t.content )
        case 9: return Statements( t, args )
        case 10: return If( t, args[0], args.cmd_as<<Statements>>(1), args.cmd_as<<CmdList>>(2), args.cmd_as<<Statements>>(3) )
        case 11: return Match( t, args[0], args.cmd_as<<CmdList>>(1), args[2] )
        case 12: return While( t, args[0], args.cmd_as<<Statements>>(1) )
        case 13: return Produce( t, args[0] )
        case 14: return MatchCase( t, args[0], args.cmd_as<<CmdList>>(1) )
        case 15: return ProduceAny( t, args.cmd_to<<String>>(0) )
        case 16: return ElseIf( t, args[0], args.cmd_as<<Statements>>(1) )
        case 17: return Collect( t, args.cmd_as<<Args>>(0) )
        case 18: return DiscardPosition( t )
        case 19: return Halt( t )
        case 20: return MarkPosition( t )
        case 21: return Mode( t, args.cmd_to<<String>>(0) )
        case 22: return MustConsume( t, args.cmd_as<<Args>>(0) )
        case 23: return Print( t, args.cmd_as<<Args>>(0) )
        case 24: return Args( t, args )
        case 25: return Println( t, args.cmd_as<<Args>>(0) )
        case 26: return Restart( t, args.cmd_to<<String>>(0) )
        case 27: return RestorePosition( t )
        case 28: return Return( t, args[0] )
        case 29: return SavePosition( t )
        case 30: return ThrowSyntaxError( t, args.cmd_as<<Args>>(0) )
        case 31: return Increment( t, args[0] )
        case 32: return Decrement( t, args[0] )
        case 33: return Assign( t, args[0], args[1] )
        case 34: return CreateCmd( t, t.content, args[0] )
        case 35: return Access( t, t.content )
        case 36: return Identifier( t, t.content )
        case 37: return LiteralString( t, t.content )
        case 38: return CreateCmdArg( t, args.cmd_to<<String>>(0), args[1], args.cmd_to<<String>>(2) )
        case 39: return SequenceArgs( t, args )
        case 40: return ZeroOrMore( t, args[0] )
        case 41: return OneOrMore( t, args[0] )
        case 42: return OptionalPattern( t, args[0] )
        case 43: return CharSet( t, t.content )
        case 44: return LiteralStringOrCharacter( t, t.content )
        case 45: return LogicalOr( t, args[0], args[1] )
        case 46: return LogicalAnd( t, args[0], args[1] )
        case 47: return CompareEQ( t, args[0], args[1] )
        case 48: return CompareNE( t, args[0], args[1] )
        case 49: return CompareLT( t, args[0], args[1] )
        case 50: return CompareGT( t, args[0], args[1] )
        case 51: return CompareLE( t, args[0], args[1] )
        case 52: return CompareGE( t, args[0], args[1] )
        case 53: return Add( t, args[0], args[1] )
        case 54: return Subtract( t, args[0], args[1] )
        case 55: return Multiply( t, args[0], args[1] )
        case 56: return Divide( t, args[0], args[1] )
        case 57: return Power( t, args[0], args[1] )
        case 58: return Negate( t, args[0] )
        case 59: return LogicalNot( t, args[0] )
        case 60: return ReadBuffer( t )
        case 61: return CallUserMethod( t, args.cmd_to<<String>>(0) )
        case 62: return Consume( t, args.cmd_as<<Args>>(0) )
        case 63: return LiteralLogical( t, false )
        case 64: return HasAnother( t )
        case 65: return NextIs( t, args.cmd_as<<Args>>(0) )
        case 66: return Read( t )
        case 67: return Scan( t, args.cmd_as<<Args>>(0) )
        case 68: return LiteralLogical( t, true )
        case 69: return LiteralInteger( t, t.content )
        others
          throw Error( "[INTERNAL] CmdFactory.create_cmd() constructor index out of bounds: " + constructor_index )
      endWhich
endClass

module F2

class Organizer : FroleyVisitor
  PROPERTIES
    cur_match : Match

  METHODS
    method visit( cmd:CallUserMethod )->Cmd [override]
      program.user_calls.add( cmd.fn_name )
      return cmd

    method visit( cmd:LiteralStringOrCharacter )->Cmd [override]
      if (cmd.value.count == 1) return LiteralCharacter( cmd.t, cmd.value[0] ).dispatch( this )
      else                      return LiteralString( cmd.t, cmd.value ).dispatch( this )

    method visit( cmd:ParserDef )->Cmd [override]
      if (not cmd.name) cmd.name = "Parser"
      program.parsers[cmd.name] = cmd
      return prior.visit( cmd )

    method visit( cmd:ProduceAny )->Cmd [override]
      # Add a scan case for each token in the named group
      local t = cmd.t
      local group = program.token_groups[ cmd.token_group_name ]
      if (not group)
        throw t.error( ''No such token group "$".''(cmd.token_group_name) )
      endIf
      forEach (item in group.definitions)
        local def = item as TokenDef
        local expr = LiteralString( t, def.symbol )
        local _case = MatchCase( t, expr, Statements(t,ScannerProduce(t,Access(t,def.name))) )
        cur_match.cases.add( _case )
        _case.dispatch( this )
      endForEach
      return null

    method visit( cmd:Routine )->Cmd [override]
      cmd.ip = cur_element.routines.count
      cur_element.routines[cmd.name] = cmd
      return prior.visit( cmd )

    method visit( cmd:Match )->Cmd [override]
      temporarily cur_match = cmd
        return prior.visit( cmd )
      endTemporarily

    method visit( cmd:Subroutine )->Cmd [override]
      cmd.ip = cur_element.routines.count
      cur_element.routines[cmd.name] = cmd
      return prior.visit( cmd )

    method visit( cmd:ScannerDef )->Cmd [override]
      if (not cmd.name) cmd.name = "Scanner"
      program.scanners[cmd.name] = cmd
      return prior.visit( cmd )

endClass


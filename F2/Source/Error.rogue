module F2

class Error( filepath:String, source:String, line:Int32, column:Int32, message:String ) : ::Error
  METHODS
    method init( filepath, message )

    method init( message )

    method print
      Console.error.println this->String

    method to->String
      local builder = StringBuilder()
      builder.println( "=" * 79 )
      builder.print( "ERROR" )
      if (filepath)
        builder.print( '' in "$"'' (filepath) )
        if (line)
          builder.print( " line $, column $" (line,column) )
        endIf
      endIf
      builder.println.println
      builder.println( message.word_wrapped(79) )
      builder.println

      if (line and column and source)
        builder.println
        local skip = which{ column<=70:0 || column-70 }
        forEach (line at index in LineReader(source))
          if (index+1 == this.line)
            if (skip) line = line.from( skip )
            builder.println( line.leftmost(79) )
            escapeForEach
          endIf
        endForEach
        builder.print( " " * (column-(skip+1)) ).println( '^' )
      endIf

      builder.println( "=" * 79 )
      return builder->String
endClass


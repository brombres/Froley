module F3

class RMain : RogueSourceWriter
  METHODS
    method init( generator, class_name )

    method write_content
      local content =
        @|$include "Scanner.rogue"
         |$include "Parser.rogue" [optional]
         |uses $ProjectName
         |uses Utility/CommandLineParser
         |
         |try
         |  $ClassName( System.command_line_arguments )
         |catch (error:Error)
         |  Console.error.println error
         |  System.exit 1
         |endTry
         |
         |class $ClassName
         |  PROPERTIES
         |    command : Value
         |
         |  METHODS
         |    method init( args:String[] )
         |      command = parse_args( args )
         |
         |      # trace command
         |      # has //options and possibly //args
         |
         |      if (command//options//help or command//args.count == 0)
         |        print_usage
         |        System.exit 0
         |      endIf
         |
         |      $if (defined(PARSER_EXISTS)) parse_files
         |      $else                        scan_files
         |
         |    method scan_files
         |      forEach (arg in command//args)
         |        local scanner = Scanner( File(arg) )
         |        local tokens = scanner.tokenize
         |        if (scanner.output.count) print scanner.output; flush
         |        println (forEach in tokens)
         |      endForEach
         |
         |    $if (defined(PARSER_EXISTS))
         |    method parse_files
         |      forEach (arg in command//args)
         |        local parser = Parser( File(arg) )
         |        local ast = parser.parse
         |        if (parser.output.count) print parser.output; flush
         |        @trace ast
         |      endForEach
         |    $endIf
         |
         |    method parse_args( args:String[] )->Value
         |      # This method is unrelated to the Froley Parser
         |      local command = CommandLineParser().
         |      [
         |        option( "--flag",     &alias="-f" )
         |        option( "--help",     &aliases=["-h","-?"] )
         |        option( "--setting=", &alias="-s" )
         |      ].parse( args )
         |      return command
         |
         |    method print_usage
         |      println @|USAGE
         |               |  $projectname [OPTIONS] <filepath>
         |               |
         |               |OPTIONS
         |               |  --help, -h, -?
         |               |    Show this help text.
         |endClass
      content .= replacing( "$ProjectName", generator.program.project_name )
      content .= replacing( "$projectname", generator.program.project_name.to_lowercase )
      content .= replacing( "$ClassName", class_name )
      writeln content
endClass

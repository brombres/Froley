module F2

class Program
  PROPERTIES
    nodes                 : Cmd
    project_name          = ""
    scanner               : ScannerDef
    parser                : ParserDef
    token_groups          = StringTable<<TokenGroup>>()
    tokens_by_name        = StringTable<<TokenDef>>()
    tokens_by_symbol      = StringTable<<TokenDef>>()
    token_attributes      = StringTable<<Int32>>(){ "content":1 }
    main_filename         : String
    scan_patterns         = StringTable<<String>>()
    scanner_user_calls    = Set<<String>>()
    parser_user_calls     = Set<<String>>()
    node_type         = StringTable<<NodeType>>()

  METHODS
    method init( froley_file:File )
      project_name = froley_file.filename.before_last('.')
      init( Parser().[open(froley_file)].parse("program") )

    method init( nodes )
      type("Cmd")
      type("CmdList")
      type("Unary").[ add_property("operand","Cmd") ]
      type("Binary").[ add_property("left","Cmd"), add_property("right","Cmd") ]
      nodes.dispatch( Collector(this) )
      nodes.dispatch( TokenOrganizer(this) )
      nodes.dispatch( Organizer(this) )
      nodes.dispatch( Resolver(this) )
      nodes.dispatch( Validator(this) )

    method description->String
      return ""+nodes

    method generate_rogue( folder:String )
      RogueGenerator( this, folder )

    method type( name:String )->NodeType
      local info = node_type[ name ]
      if (info) return info

      info = NodeType( name, this )
      node_type[name] = info
      return info

endClass


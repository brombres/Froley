# WARNING: This file will be automatically regenerated by the Froley compiler.
# Any edits will be lost!

module F2

$include "Cmd.rogue"
$include "CmdInitArgs.rogue"
$include "CmdFactory.rogue"
$include "ParserOpcode.rogue"
$include "Tokenizer.rogue"
$include "Visitor.rogue"

class ParserVM
  DEFINITIONS
    MIN_VERSION = 1

  PROPERTIES
    filepath           : String
    code               = Int32[]
    strings            = String[]
    tokens             = Token[]
    methods            = LookupList<<Int32>>()

    call_stack         = Int32[]
    method_stack       = Int32[]
    token_stack        = Token[]
    token_stack_frames = Int32[]
    number_stack       = Int32[]

    vars               = Variable[]
    var_frames         = Int32[].[ add(0) ]

    saved_positions    = ParsePosition[]

    cmd_stack          = Cmd[]
    cmd_args           = CmdInitArgs()
    list_start_t       = Token[]
    list_start_pos     = Int32[]

    position           = 0
    cur_token          : Token
    next_token_type    = -1

    methods_by_address = Table<<Int32,String>>()
    tokenizer          = Tokenizer()

  METHODS
    method load( data:Byte[] )
      load( DataReader(data) )

    method load( reader:DataReader )
      local version = reader.read_int32x
      require version >= MIN_VERSION
      local n = reader.read_int32x

      strings.reserve( n )
      loop (n) strings.add( reader.read_string )

      # Method names & addresses
      n = reader.read_int32x
      methods.reserve( n )
      loop (n)
        local name = strings[ reader.read_int32x ]
        methods[ name ] = reader.read_int32x
        methods_by_address[ methods[name] ] = name
      endLoop

      n = reader.read_int32x
      code.reserve( n )
      loop (n) code.add( reader.read_int32x )

    method on_custom( name_index:Int32 )
      # Can override this instead of on_custom(String) for higher efficiency vs string compares.
      # name_index can change when the .froley code is updated so don't rely on specific values.
      # But one could set up an array of custom function handlers when the tokenizer is constructed
      # and then index into that. Note: the tokenizer and parser can each have different name_index
      # values for the same custom operation name.
      on_custom( strings[name_index] )

    method on_custom( name:String )
      println "*** Unhandled custom operation:$ ***" (name)

    method open( filepath, content:String, start_line=1:Int32, start_column=1:Int32 )
      require tokenizer
      tokenizer.open( filepath, content, start_line, start_column )
      open( filepath, tokenizer.tokenize )

    method open( file:File )
      require tokenizer
      tokenizer.open( file )
      open( file.filepath, tokenizer.tokenize )

    method open( filepath, _tokens:Token[] )
      tokens.clear
      tokens.add( _tokens )
      reset
      if (tokens.count)
        next_token_type = tokens.first.type->Int32
      else
        next_token_type = -1
      endIf

    method parse( rule_name:String )->Cmd
      local index = methods.locate( rule_name )
      if (not index.exists) throw Error( "[INTERNAL]", "No parse rule '$' exists."(rule_name) )
      return parse( methods[index.value] )

    method execute( ip:Int32 )
      cur_token = peek
      method_stack.add( ip )
      loop
        local opcode = ParserOpcode( code[ip] )
        #println "$ $" (ip.format("04"),opcode)
        ++ip
        which (opcode)
          case ParserOpcode.SYNTAX_ERROR
            throw_syntax_error
          case ParserOpcode.SYNTAX_ERROR_STRING
            throw peek.error( strings[code[ip]] )
          case ParserOpcode.RETURN
            if (call_stack.is_empty) method_stack.clear; return
            ip = call_stack.remove_last
            method_stack.remove_last
            token_stack.discard_from( token_stack_frames.remove_last )
            cur_token = token_stack.remove_last
            vars.discard_from( var_frames.remove_last )
            nextIteration
          case ParserOpcode.CALL
            call_stack.add( ip+1 )
            token_stack.add( cur_token )
            token_stack_frames.add( token_stack.count )
            cur_token = peek
            ip = code[ ip ]
            method_stack.add( ip )
            var_frames.add( vars.count )
            nextIteration
          case ParserOpcode.JUMP
            ip = code[ ip ]
            nextIteration
          case ParserOpcode.JUMP_IF_TRUE
            if (number_stack.count and number_stack.remove_last) ip = code[ ip ]
            else                                                 ++ip
            nextIteration
          case ParserOpcode.JUMP_IF_FALSE
            if (number_stack.count and 0 == number_stack.remove_last) ip = code[ ip ]
            else                                                      ++ip
            nextIteration
          case ParserOpcode.ON_TOKEN_TYPE
            if (code[ip] == next_token_type)
              ip += 2
              token_stack.add( cur_token )
              cur_token = read
            else
              ip = code[ ip+1 ]
            endIf
            nextIteration
          case ParserOpcode.ON_PEEK_TOKEN_TYPE
            if (code[ip] == next_token_type)
              ip += 2
              token_stack.add( cur_token )
              cur_token = peek
            else
              ip = code[ ip+1 ]
            endIf
            nextIteration
          case ParserOpcode.POP_CUR_TOKEN
            cur_token = token_stack.remove_last
            nextIteration
          case ParserOpcode.HAS_ANOTHER
            number_stack.add( next_token_type != -1 )
            nextIteration
          case ParserOpcode.NEXT_HAS_ATTRIBUTE
            number_stack.add( next_token_type != -1 and (TokenType(next_token_type).attributes & code[ip]) )
            ++ip
            nextIteration
          case ParserOpcode.NEXT_IS_TYPE
            number_stack.add( next_token_type == code[ip] )
            ++ip
            nextIteration
          case ParserOpcode.NEXT_IS_STRING
            local content = peek.content
            number_stack.add( content and content == strings[code[ip]] )
            ++ip
            nextIteration
          case ParserOpcode.BEGIN_LIST
            list_start_t.add( peek )
            list_start_pos.add( cmd_stack.count )
            nextIteration
          case ParserOpcode.CREATE_CMD
            local constructor_index = code[ ip ]
            local arg_count = code[ ip+1 ]
            ip += 2
            cmd_args.clear
            cmd_args.t = cur_token
            if (arg_count > 0)
              local i1 = cmd_stack.count - arg_count
              if (i1 < 0)
                print_trace( ip-2, 0 )
                throw cur_token.error( "[INTERNAL] Command queue too small to create new Cmd." )
              endIf
              cmd_args.add( forEach in cmd_stack from i1 )
              cmd_stack.discard_from( i1 )
            endIf
            cmd_stack.add( CmdFactory.create_cmd(constructor_index,cmd_args) )
            nextIteration

          case ParserOpcode.CREATE_NULL_CMD
            cmd_stack.add( null )
            nextIteration

          case ParserOpcode.CREATE_LIST
            if (list_start_t.is_empty) throw peek.error( "[INTERNAL] No prior beginList before calling createList/produceList." )
            local constructor_index = code[ ip ]
            ++ip
            list_start_t.remove_last
            local i1 = list_start_pos.remove_last
            cmd_args.clear
            cmd_args.t = cur_token
            cmd_args.add( forEach in cmd_stack from i1 )
            cmd_stack.discard_from( i1 )
            cmd_stack.add( CmdFactory.create_cmd(constructor_index,cmd_args) )
            nextIteration

          case ParserOpcode.DISCARD_LIST
            if (list_start_t.is_empty) throw peek.error( "[INTERNAL] No prior beginList before calling discardList." )
            list_start_t.remove_last
            cmd_stack.discard_from( list_start_pos.remove_last )
            nextIteration

          case ParserOpcode.SWAP
            local n = cmd_stack.count
            if (n >= 2) cmd_stack.swap(n-2,n-1)
            nextIteration

          case ParserOpcode.CONSUME_EOLS
            # Called to automatically consume EOL tokens that occur in the
            # midst of parsing a unary or binary operator, like "a+\nb".
            <handle_consume_eols>
            nextIteration

          case ParserOpcode.CONSUME_TYPE
            if (next_token_type == code[ip])
              read
              number_stack.add( 1 )
            else
              number_stack.add( 0 )
            endIf
            ++ip
            nextIteration

          case ParserOpcode.CONSUME_STRING
            local content = peek.content
            local st = strings[code[ip]]
            ++ip
            if (content and content == st) read; number_stack.add( 1 )
            else                           number_stack.add( 0 )
            nextIteration

          case ParserOpcode.MUST_CONSUME_TYPE
            if (next_token_type == code[ip])
              read
              ++ip
              nextIteration
            else
              throw_expected_token_type_error( TokenType(code[ip]) )
            endIf

          case ParserOpcode.MUST_CONSUME_STRING
            local content = peek.content
            local st = strings[code[ip]]
            ++ip
            if (content and content == st ) read
            else throw_expected_input_error( "$" (st) )
            nextIteration

          case ParserOpcode.SAVE_POSITION
            saved_positions.add( ParsePosition(position,cmd_stack.count,cur_token) )
            nextIteration

          case ParserOpcode.RESTORE_POSITION
            if (saved_positions.is_empty) throw peek.error( "[INTERNAL] No savePosition to restore." )
            local pos = saved_positions.remove_last
            position = pos.position
            cmd_stack.discard_from( pos.cmd_count )
            cur_token = pos.cur_token
            if (position < tokens.count) next_token_type = tokens[position].type->Int32
            else                         next_token_type = -1
            nextIteration

          case ParserOpcode.DISCARD_POSITION
            if (saved_positions.count) saved_positions.remove_last
            nextIteration

          case ParserOpcode.TRACE
            print_trace( ip, code[ip] )
            ++ip
            nextIteration

          case ParserOpcode.PRINTLN_STRING
            println strings[ code[ip] ]
            ++ip
            nextIteration

          case ParserOpcode.PRINTLN_NUMBER
            println number_stack.remove_last
            nextIteration

          case ParserOpcode.POP_DISCARD
            number_stack.remove_last
            nextIteration

          case ParserOpcode.PUSH_INT32
            number_stack.add( code[ip] )
            ++ip
            nextIteration

          case ParserOpcode.DECLARE_VAR
            local name = strings[ code[ip] ]
            ++ip
            local index = locate_var( name, var_frames.last )
            if (index.exists)
              throw Error( "[INTERNAL] A variable named '$' has already been declared in the current method."(name) )
            else
              vars.add( Variable(name,number_stack.remove_last) )
            endIf
            nextIteration

          case ParserOpcode.WRITE_VAR
            local name = strings[ code[ip] ]
            ++ip
            local index = locate_var( name, 0, &must_locate ).value
            vars[ index ] = Variable( name, number_stack.remove_last )
            nextIteration

          case ParserOpcode.READ_VAR
            local name = strings[ code[ip] ]
            ++ip
            local index = locate_var( name, 0, &must_locate ).value
            number_stack.add( vars[index].value )
            nextIteration

          case ParserOpcode.LOGICAL_NOT
            number_stack.last = not number_stack.last
            nextIteration

          case ParserOpcode.COMPARE_EQ
            local b = number_stack.remove_last
            number_stack.add( number_stack.remove_last == b )
            nextIteration

          case ParserOpcode.COMPARE_NE
            local b = number_stack.remove_last
            number_stack.add( number_stack.remove_last != b )
            nextIteration

          case ParserOpcode.COMPARE_LT
            local b = number_stack.remove_last
            number_stack.add( number_stack.remove_last < b )
            nextIteration

          case ParserOpcode.COMPARE_LE
            local b = number_stack.remove_last
            number_stack.add( number_stack.remove_last <= b )
            nextIteration

          case ParserOpcode.COMPARE_GT
            local b = number_stack.remove_last
            number_stack.add( number_stack.remove_last > b )
            nextIteration

          case ParserOpcode.COMPARE_GE
            local b = number_stack.remove_last
            number_stack.add( number_stack.remove_last >= b )
            nextIteration

          case ParserOpcode.CUSTOM
            ++ip
            on_custom( code[ip] )
            nextIteration
          others
            throw Error( "[INTERNAL]", "Unhandled parser opcode: " + ParserOpcode(opcode) )
        endWhich
      endLoop

    method has_another->Logical
      return (position < tokens.count)

    method locate_var( name:String, lowest_index:Int32, &must_locate )->Int32?
      forEach (index in vars.count-1 downTo lowest_index)
        if (vars[index].name == name) return index
      endForEach
      if (must_locate) throw Error( "[INTERNAL] No parse rule or variable named '$' has been declared."(name) )
      return null

    method parse( address:Int32 )->Cmd
      execute( address )
      if (cmd_stack.count) return cmd_stack.remove_last
      else                 return null

    method peek->Token
      if (position == tokens.count)
        if (tokens.is_empty) return Token( TokenType(0), filepath, "", 0, 0 )
        local t = tokens.last.cloned( TokenType.EOI )
        ++t.column
        return t
      else
        return tokens[ position ]
      endIf

    method print_trace( ip:Int32, line:Int32 )
      if (line) print( "Line " ).print( code[ip] )
      print( " peek:" )
      if (next_token_type != -1) print( peek )
      else                       print( "end of input" )
      print( " opcode:" ).print( ParserOpcode(code[ip+1]) )
      println
      print "  "
      forEach (m_ip at index in method_stack)
        if (index > 0) print " > "
        print methods_by_address[ m_ip ]
      endForEach
      println
      print "  ["
      forEach (cmd at index in cmd_stack)
        if (index > 0) print ","
        print which{ cmd:cmd.type_name || "null" }
      endForEach
      println "]"

    method read->Token
      ++position
      if (position < tokens.count) next_token_type = tokens[position].type->Int32
      else                         next_token_type = -1
      return tokens[ position-1 ]

    method reset
      call_stack.clear
      method_stack.clear
      token_stack.clear
      token_stack_frames.clear
      number_stack.clear
      vars.clear
      var_frames.[ clear, add(0) ]
      saved_positions.clear
      list_start_t.clear
      list_start_pos.clear
      position = 0
      cur_token = null
      next_token_type = -1
      tokenizer.reset

    method throw_expected_input_error( expected:String )
      throw peek.error(
        "Expected '$', found $." ...
        (expected,?:{next_token_type!=-1:"$"(peek->String) || "end of input"})
      )

    method throw_expected_token_type_error( token_type:TokenType )
      local expected = token_type.symbol
      if (expected == "'") expected = ''(')''
      elseIf (not (token_type.attributes & TokenTypeAttribute.CONTENT)) expected = "$"(expected)
      throw_expected_input_error( expected )

    method throw_syntax_error
      if (position == tokens.count)
        throw peek.error( "Syntax error - unexpected end of input." )
      else
        local t = tokens[ position ]
        throw t.error( "Syntax error - unexpected '$'." (t.type.symbol.to_escaped_ascii) )
      endIf

endClass

class Variable( name:String, value:Int32 ) [compound]
endClass

class ParsePosition( position:Int32, cmd_count:Int32, cur_token:Token ) [compound]
endClass


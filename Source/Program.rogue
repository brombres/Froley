module Froley

class Program [singleton]
  PROPERTIES
    command            : Value
    nodes              : ProgramDef
    project_name       : String
    output_folder      : String
    main_filename      : String

    types              = [String:Type]
    type_Cmd           : Type
    type_CmdList       : Type
    type_String        : Type
    type_native        : Type

    token_groups       = [String:TokenGroup]
    tokens_by_name     = [String:TokenDef]
    tokens_by_symbol   = [String:TokenDef]
    token_attributes   = [String:Int32]{ "content":1 }

    scanner            : ScannerDef
    parser             : ParserDef

    scan_patterns      = [String:String]
    scanner_user_calls = Set<<String>>()
    parser_user_calls  = Set<<String>>()

  METHODS
    method compile( command, nodes )
      if (not project_name) project_name  = File( command//args.first ).filename.before_last('.')
      output_folder = File( command//args.last )

      local t = nodes.t
      type_Cmd = type(t,"Cmd").[ is_node = true ]
      type_CmdList = type(t,"CmdList").[
        set_base_type( t, type_Cmd )
        is_list=true
      ]
      type(t,"Unary").[
        set_base_type( t, type_Cmd )
        add_property( t, "operand", type_Cmd )
      ]
      type(t,"Binary").[
        set_base_type( t, type_Cmd )
        add_property( t, "left", type_Cmd )
        add_property( t, "right", type_Cmd )
      ]

      type(t,"Logical").is_built_in = true
      type(t,"Character").is_built_in = true
      type(t,"Integer").is_built_in = true
      type(t,"Real").is_built_in = true
      type_String = type( t, "String" ).[ is_built_in=true ]

      type_native = type( t, "native" ).[ is_native=true ]

      Collector().visit( nodes )
      TokenOrganizer().visit( nodes )
      Organizer().visit( nodes )
      Resolver().visit( nodes )
      Validator().visit( nodes )

      local main = command//options//main
      if (main)
        if (main.is_string) main_filename = main->String
        else                main_filename = project_name
      endIf

      generate_rogue( output_folder )

    method to->String
      return ""+nodes

    method generate_rogue( folder:String )
      RogueGenerator( folder )

    method type( t:Token, name:String )->Type
      local result = types[ name ]
      if (result) return result
      return Type( t, name )  # adds itself to types[]

endClass


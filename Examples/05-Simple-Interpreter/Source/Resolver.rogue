library Simple

class Resolver : Visitor
  METHODS
    method require_value( t:Token, cmd:Cmd )->Cmd
      if (cmd) return cmd.require_value
      throw t.error( "Variant expected." )

    method on_visit( cmd:Assign )->Cmd
      return visit( cmd.left.resolve_assignment(this,cmd.right) )

    method on_visit( cmd:Access )->Cmd
      return visit( ReadVar(cmd.t,cmd.name) )

    method on_visit_node( cmd:Binary )
      visit_children( cmd )
      require_value( cmd.t, cmd.left )
      require_value( cmd.t, cmd.right )

    method on_visit_node( cmd:Unary )
      visit_children( cmd )
      require_value( cmd.t, cmd.operand )

    method on_visit_node( cmd:Args )
      visit_children( cmd )
      forEach (arg in cmd) require_value(cmd.t,arg)

    method on_visit( cmd:Add )->Cmd
      visit_children( cmd )
      if (cmd.left instanceOf Number and cmd.right instanceOf Number)
        return visit( Number(cmd.t, cmd.left->Real + cmd.right->Real) )
      else
        return cmd
      endIf

    method on_visit( cmd:Subtract )->Cmd
      visit_children( cmd )
      if (cmd.left instanceOf Number and cmd.right instanceOf Number)
        return visit( Number(cmd.t, cmd.left->Real - cmd.right->Real) )
      else
        return cmd
      endIf

    method on_visit( cmd:Multiply )->Cmd
      visit_children( cmd )
      if (cmd.left instanceOf Number and cmd.right instanceOf Number)
        return visit( Number(cmd.t, cmd.left->Real * cmd.right->Real) )
      else
        return cmd
      endIf

    method on_visit( cmd:Divide )->Cmd
      visit_children( cmd )
      if (cmd.left instanceOf Number and cmd.right instanceOf Number)
        return visit( Number(cmd.t, cmd.left->Real / cmd.right->Real) )
      else
        return cmd
      endIf

    method on_visit( cmd:Power )->Cmd
      visit_children( cmd )
      if (cmd.left instanceOf Number and cmd.right instanceOf Number)
        return visit( Number(cmd.t, cmd.left->Real ^ cmd.right->Real) )
      else
        return cmd
      endIf
endClass

augment
  METHODS
    method Cmd.require_value->Cmd
      throw t.error( "Variant expected." )

    method Cmd.resolve_assignment( resolver:Resolver, new_value:Cmd )->Cmd
      throw t.error( "Illegal assignment target." )

    method Unary.require_value->Cmd
      return this

    method Binary.require_value->Cmd
      return this

    method Number.require_value->Cmd
      return this

    method LiteralString.require_value->Cmd
      return this

    method ReadVar.require_value->Cmd
      return this

    method Access.resolve_assignment( resolver:Resolver, new_value:Cmd )->Cmd
      return resolver.visit( WriteVar(t,name,new_value) )
endAugment


module Froley

class RVisitor : RogueSourceWriter
  PROPERTIES
    handled_node_types = Set<<String>>()

  METHODS
    method init_object
      class_name = "Visitor"

    method scan_node_types( content:String )
      forEach (line in LineReader(content))
        if (line.contains("method on_visit_children("))
          local node_type = line.after_first('(').before_first(')').after_first(':').trimmed
          handled_node_types.add( node_type )
        endIf
      endForEach

    method update_content( content:String )->String
      if (not String.exists(content) or not content.contains("class Visitor"))
        if (content is null) content = ""
        content +=  "# Generated and updated by Froley. Custom changes will not be overwritten; customize as desired.\n"
        content += "module $\n\n"(Program.project_name)
        content += @|class Visitor
                    |  METHODS
                    |    method on( cmd:Cmd )->Cmd
                    |      # Default per-node Visitor call sequence.
                    |      #
                    |      #   CALL                       OVERLOADABLE METHOD
                    |      #   --------------------       -----------------------------------------
                    |      #   visit(cmd)->Cmd         -> on(cmd:CmdType)->Cmd
                    |      #     visit_content(cmd)    ->   on_visit(cmd:CmdType)
                    |      #       visit_children(cmd) ->     on_visit_children(cmd:CmdType)
                    |      #     validate(cmd)->Cmd    ->   on_validate(cmd:CmdType)->Cmd
                    |      #
                    |      # For any method on(CmdType) or on_validate(CmdType):
                    |      # - The AST is rebuilt with the return value, so return 'cmd' to keep
                    |      #   this subtree or else return a different Cmd node to replace it.
                    |      visit_content( cmd )
                    |      return validate( cmd )
                    |
                    |    method on_visit( cmd:Cmd )
                    |      # Called from on(CmdType). If you overload this method with an extended
                    |      # Cmd type, this node's children will only be visited if and
                    |      # when you call visit_children(cmd).
                    |      visit_children( cmd )
                    |
                    |    method on_validate( cmd:Cmd )->Cmd
                    |      return cmd
                    |
                    |    method visit( cmd:Cmd )->Cmd [propagated]
                    |      # Call to invoke the appropriate on/on_visit() for the given Cmd type.
                    |      #
                    |      # For example:
                    |      #   method on( cmd:Binary )->Cmd
                    |      #     cmd.left  = visit(cmd.left)
                    |      #     cmd.right = visit(cmd.right)
                    |      #     return cmd
                    |      if (cmd is null) return null
                    |      return cmd.dispatch<<ThisType>>( this )
                    |
                    |    method visit_children( cmd:Cmd ) [propagated]
                    |      # Call from 'on()' or 'on_visit()' handler to visit subtrees.
                    |      cmd.dispatch_on_visit_children<<ThisType>>( this )
                    |
                    |    method visit_content( cmd:Cmd ) [propagated]
                    |      # Primarily for internal use - see on(Cmd) for usage.
                    |      cmd.dispatch_on_visit<<ThisType>>( this )
                    |
                    |    method validate( cmd:Cmd )->Cmd [propagated]
                    |      if (cmd is null) return null
                    |      return cmd.dispatch_on_validate<<ThisType>>( this )
                    |
                    |    method on_visit_children( cmd:Cmd )
                    |      # Overloaded automatically by the Froley compiler
                    |      noAction
                    |
                    |    method on_visit_children( cmd:CmdList )
                    |      forEach (element in writer=cmd.list.rewriter)
                    |        local visited_element = visit( element )
                    |        if (visited_element) writer.write( visited_element )
                    |      endForEach
                    |
      endIf

      scan_node_types( content )

      local builder = StringBuilder(content.count*2)

      local end_class_location = content.locate( "endClass", content.locate("class Visitor").value )
      local bottom = "endClass\n"
      if (end_class_location)
        bottom = content.from( end_class_location.value )
        content = content.leftmost( end_class_location.value ).trimmed
      endIf

      builder.println( content )
      builder.indent = 4

      forEach (node_type in Program.types.values.to_list.sorted((a,b)=>(a.name<b.name)))
        if (node_type.is_built_in or node_type.is_native) nextIteration

        if (not handled_node_types.contains(node_type.name))
          handled_node_types.add( node_type.name )

          local properties = node_type.properties
          properties .= discarding( (p) => p.type.is_built_in or p.type.is_native )
          local extended_properties = node_type.extended_properties
          extended_properties .= discarding( (p) => p.type.is_built_in or p.type.is_native )

          if (extended_properties.count)
            builder.println
            builder.print(  "method on_visit_children( cmd:" ).print( node_type.name ).println( " )" )
            if (node_type.is_list and node_type.name != "CmdList")
              builder.println "  on_visit_children( cmd->(as CmdList) )"
            endIf

            if (properties.count)
              forEach (p in properties)
                local type = p.type
                if (not (type.is_built_in or type.is_native))
                  builder.print   "  cmd.$ = visit(cmd.$)"(p.name,p.name)
                  if (type.name != "Cmd")
                    builder.print   "->(as "
                    builder.print   type.name
                    builder.print   ")"
                  endIf
                  builder.println
                endIf
              endForEach
            endIf

          endIf
        endIf
      endForEach

      builder.println

      content = builder->String + bottom
      return content
endClass

module F2

class Organizer : FroleyVisitor
  PROPERTIES
    cur_scan : Scan

  METHODS
    method visit( cmd:Consume )->Cmd [override]
      if (cmd.alternatives)
        if (cmd.alternatives.count == 1)
          return ConsumeValue( cmd.t, cmd.alternatives.first ).dispatch( this )
        else
          local alts : Cmd
          forEach (alt in cmd.alternatives)
            alt .= cast_to(Type.STRING)
            if (alts)
              alts = Add( alt.t, alts, alt )
            else
              alts = alt
            endIf
          endForEach
          return ConsumeAny( cmd.t, alts.dispatch(this) )
        endIf
      else
        return prior.visit( cmd )
      endIf

    method visit( cmd:LiteralStringOrCharacter )->Cmd [override]
      if (cmd.value.count == 1) return LiteralCharacter( cmd.t, cmd.value[0] ).dispatch( this )
      else                      return LiteralString( cmd.t, cmd.value ).dispatch( this )

    method visit( cmd:ParserDef )->Cmd [override]
      if (not cmd.name) cmd.name = "Parser"
      program.parsers[cmd.name] = cmd
      return prior.visit( cmd )

    method visit( cmd:ProduceAny )->Cmd [override]
      # Add a scan case for each token in the named group
      local t = cmd.t
      local group = program.token_groups[ cmd.token_group_name ]
      if (not group)
        throw t.error( ''No such token group "$".''(cmd.token_group_name) )
      endIf
      forEach (item in group.definitions)
        local def = item as TokenDef
        local expr = LiteralString( t, def.symbol )
        local _case = ScanOn( t, expr, Statements(t,ScannerProduce(t,Access(t,def.name))) )
        cur_scan.cases.add( _case )
        _case.dispatch( this )
      endForEach
      return null

    method visit( cmd:RoutineDef )->Cmd [override]
      cmd.ip = cur_element.routines.count
      cur_element.routines[cmd.name] = cmd
      return prior.visit( cmd )

    method visit( cmd:Scan )->Cmd [override]
      temporarily cur_scan = cmd
        return prior.visit( cmd )
      endTemporarily

    method visit( cmd:SubroutineDef )->Cmd [override]
      cmd.ip = cur_element.routines.count
      cur_element.routines[cmd.name] = cmd
      return prior.visit( cmd )

    method visit( cmd:ScannerDef )->Cmd [override]
      if (not cmd.name) cmd.name = "Scanner"
      program.scanners[cmd.name] = cmd
      return prior.visit( cmd )

endClass


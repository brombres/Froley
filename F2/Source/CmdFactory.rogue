# WARNING: This file will be automatically regenerated by the Froley compiler.
# Any edits will be lost!

module F2

class CmdFactory
  GLOBAL METHODS
    method create_cmd( constructor_index:Int32, args:CmdInitArgs )->Cmd
      local t = args.t
      which (constructor_index)
        case 0: return CmdList( t, args )
        case 1: return ScannerDef( t, args.cmd_to<<String>>(0), args[1] )
        case 2: return ParserDef( t, args.cmd_to<<String>>(0), args[1] )
        case 3: return Identifier( t, t.content )
        case 4: return RoutineDef( t, args.cmd_to<<String>>(0), args.cmd_to<<String>>(1), args[2] )
        case 5: return SubroutineDef( t, args.cmd_to<<String>>(0), args.cmd_to<<String>>(1), args[2] )
        case 6: return Statements( t, args )
        case 7: return If( t, args[0], args.cmd_as<<Statements>>(1), args.cmd_as<<CmdList>>(2), args.cmd_as<<Statements>>(3) )
        case 8: return While( t, args[0], args.cmd_as<<Statements>>(1) )
        case 9: return ElseIf( t, args[0], args.cmd_as<<Statements>>(1) )
        case 10: return Collect( t, args.cmd_as<<CmdList>>(0) )
        case 11: return Print( t, args.cmd_as<<CmdList>>(0) )
        case 12: return Println( t, args.cmd_as<<CmdList>>(0) )
        case 13: return ScanError( t, args.cmd_as<<CmdList>>(0) )
        case 14: return Increment( t, args[0] )
        case 15: return Decrement( t, args[0] )
        case 16: return Assign( t, args[0], args[1] )
        case 17: return LogicalOr( t, args[0], args[1] )
        case 18: return LogicalAnd( t, args[0], args[1] )
        case 19: return CompareEQ( t, args[0], args[1] )
        case 20: return CompareNE( t, args[0], args[1] )
        case 21: return CompareLT( t, args[0], args[1] )
        case 22: return CompareGT( t, args[0], args[1] )
        case 23: return CompareLE( t, args[0], args[1] )
        case 24: return CompareGE( t, args[0], args[1] )
        case 25: return Add( t, args[0], args[1] )
        case 26: return Subtract( t, args[0], args[1] )
        case 27: return Multiply( t, args[0], args[1] )
        case 28: return Divide( t, args[0], args[1] )
        case 29: return Power( t, args[0], args[1] )
        case 30: return Negate( t, args[0] )
        case 31: return HasNext( t )
        case 32: return Read( t )
        case 33: return Access( t, t.content )
        case 34: return LiteralInt32( t, t.content )
        case 35: return LiteralString( t, t.content )
        others
          throw Error( "[INTERNAL] CmdFactory.create_cmd() constructor index out of bounds: " + constructor_index )
      endWhich
endClass

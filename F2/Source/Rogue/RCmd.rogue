module F2

class CmdRogueGen : RogueCodeWriter
  PROPERTIES
    node_types = Set<<String>>()

  METHODS
    method init_object
      class_name = "Cmd"

    method add( content:String, name:String, definition:String )->String
      node_types.add( name )
      content += definition
      return content

    method scan_node_types( content:String )
      forEach (line in LineReader(content))
        if (line.begins_with("class "))
          local node_type = line.after_first(' ').before_first('(').before_first(' ').trimmed
          node_types.add( node_type )
        endIf
      endForEach

    method update_content( content:String )->String
      if (not String.exists(content))
        content =  "# Generated and updated by Froley. Custom changes will not be overwritten; customize as desired.\n"
        content += "module $\n"(generator.program.project_name)
      endIf

      scan_node_types( content )

      use builder = StringBuilder.pool
        builder.print( content )

        if (not node_types.contains("Cmd"))
          node_types.add( "Cmd" )
          builder.println ...
            @|
             |class Cmd( t:Token )
             |  METHODS
             |    method add( cmd:Cmd )
             |      throw UnsupportedOperationError()
             |
             |    method count->Int32
             |      return 0
             |
             |    method get( index:Int32 )->Cmd
             |      throw UnsupportedOperationError()
             |endClass
        endIf

        if (not node_types.contains("CmdList"))
          node_types.add( "CmdList" )
          builder.println ...
            @|
             |class CmdList : Cmd
             |  PROPERTIES
             |    list = Cmd[]
             |
             |  METHODS
             |    method add( cmd:Cmd )
             |      list.add( cmd )
             |
             |    method count->Int32
             |      return list.count
             |
             |    method get( index:Int32 )->Cmd
             |      return list[index]
             |endClass
        endIf

        forEach (node_info in generator.program.cmd_node_info)
          if (not node_types.contains(node_info.name))
            node_types.add( node_info.name )

            builder.println
            builder.print( "class " ).print( node_info.name ).print( " : " )
            builder.print "Cmd"
            builder.println
            builder.println "  PROPERTIES"

            local properties = node_info.properties
            local w = 0
            w .= or_larger( (forEach in properties).name.count )

            forEach (p in node_info.properties)
              builder.print( "    " ).print( p.name )
              loop (w - p.name.count) builder.print ' '
              builder.print( " : " ).println( p.type )
            endForEach
            builder.println

            builder.println "  METHODS"
            forEach (constructor in node_info.constructors)
              builder.print( "    method init( t" )
              if (constructor.args)
                local args = constructor.args as Args
                forEach (arg in args)
                  block arg = arg as CreateCmdArg
                    builder.print( ", " ).print( arg.arg_name )
                  endBlock
                endForEach
              endIf
              builder.println " )"
              builder.println
            endForEach

            builder.print "endClass"
          endIf
        endForEach

        content = builder->String
      endUse

      return content
endClass

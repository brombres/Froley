module F2

class Visitor
  GLOBAL PROPERTIES
    type_Cmd = <<Cmd>>

  METHODS
    method dispatch( cmd:Cmd )->Cmd
      if (not cmd) return null
      return cmd.dispatch( this )

    method visit( cmd:Cmd )->Cmd
      if (cmd.type_info is type_Cmd) return cmd
      return cmd.dispatch( this )

    method visit( cmd:CmdList )->Cmd
      forEach (item in rewriter=cmd.list.rewriter)
        if (item)
          item .= dispatch( this )
          if (item) rewriter.write( item )
        endIf
      endForEach
      return cmd

    method visit( cmd:Unary )->Cmd
      if (cmd.operand) cmd.operand = cmd.operand.dispatch( this )
      return cmd

    method visit( cmd:PostUnary )->Cmd
      if (cmd.operand) cmd.operand = cmd.operand.dispatch( this )
      return cmd

    method visit( cmd:Binary )->Cmd
      if (cmd.left)  cmd.left  = cmd.left.dispatch( this )
      if (cmd.right) cmd.right = cmd.right.dispatch( this )
      return cmd

    method visit( cmd:ScannerDef )->Cmd
      if (cmd.code) cmd.code = cmd.code.dispatch( this )
      return cmd

    method visit( cmd:Identifier )->Cmd
      return cmd

    method visit( cmd:ParserDef )->Cmd
      if (cmd.code) cmd.code = cmd.code.dispatch( this )
      return cmd

    method visit( cmd:RoutineDef )->Cmd
      if (cmd.statements) cmd.statements = cmd.statements.dispatch( this )
      return cmd

    method visit( cmd:SubroutineDef )->Cmd
      if (cmd.statements) cmd.statements = cmd.statements.dispatch( this )
      return cmd

    method visit( cmd:Add )->Cmd
      if (cmd.left)  cmd.left  = cmd.left.dispatch( this )
      if (cmd.right) cmd.right = cmd.right.dispatch( this )
      return cmd

    method visit( cmd:Subtract )->Cmd
      if (cmd.left)  cmd.left  = cmd.left.dispatch( this )
      if (cmd.right) cmd.right = cmd.right.dispatch( this )
      return cmd

    method visit( cmd:Multiply )->Cmd
      if (cmd.left)  cmd.left  = cmd.left.dispatch( this )
      if (cmd.right) cmd.right = cmd.right.dispatch( this )
      return cmd

    method visit( cmd:Divide )->Cmd
      if (cmd.left)  cmd.left  = cmd.left.dispatch( this )
      if (cmd.right) cmd.right = cmd.right.dispatch( this )
      return cmd

    method visit( cmd:Power )->Cmd
      if (cmd.left)  cmd.left  = cmd.left.dispatch( this )
      if (cmd.right) cmd.right = cmd.right.dispatch( this )
      return cmd

    method visit( cmd:Negate )->Cmd
      if (cmd.operand)  cmd.operand = cmd.operand.dispatch( this )
      return cmd

    method visit( cmd:Access )->Cmd
      return cmd

    method visit( cmd:LiteralInteger )->Cmd
      return cmd

    method visit( cmd:Assign )->Cmd
      if (cmd.target) cmd.target = cmd.target.dispatch( this )
      if (cmd.new_value) cmd.new_value = cmd.new_value.dispatch( this )
      return cmd

    method visit( cmd:Statements )->Cmd
      forEach (element at index in cmd)
        if (element) cmd[ index ] = element.dispatch( this )
      endForEach
      return cmd

    method visit( cmd:While )->Cmd
      if (cmd.condition) cmd.condition = cmd.condition.dispatch( this )
      if (cmd.statements) cmd.statements.dispatch( this )
      return cmd

    method visit( cmd:If )->Cmd
      if (cmd.condition) cmd.condition = cmd.condition.dispatch( this )
      if (cmd.statements) cmd.statements = cmd.statements.dispatch( this )
      if (cmd.else_ifs) cmd.else_ifs = cmd.else_ifs.dispatch( this ) as CmdList
      if (cmd._else) cmd._else.dispatch( this )

      return cmd

    method visit( cmd:ElseIf )->Cmd
      if (cmd.condition) cmd.condition = cmd.condition.dispatch( this )
      if (cmd.statements) cmd.statements = cmd.statements.dispatch( this ) as Statements
      return cmd

    method visit( cmd:LogicalOr )->Cmd
      if (cmd.left)  cmd.left  = cmd.left.dispatch( this )
      if (cmd.right) cmd.right = cmd.right.dispatch( this )
      return cmd

    method visit( cmd:LogicalAnd )->Cmd
      if (cmd.left)  cmd.left  = cmd.left.dispatch( this )
      if (cmd.right) cmd.right = cmd.right.dispatch( this )
      return cmd

    method visit( cmd:CompareEQ )->Cmd
      if (cmd.left)  cmd.left  = cmd.left.dispatch( this )
      if (cmd.right) cmd.right = cmd.right.dispatch( this )
      return cmd

    method visit( cmd:CompareNE )->Cmd
      if (cmd.left)  cmd.left  = cmd.left.dispatch( this )
      if (cmd.right) cmd.right = cmd.right.dispatch( this )
      return cmd

    method visit( cmd:CompareLT )->Cmd
      if (cmd.left)  cmd.left  = cmd.left.dispatch( this )
      if (cmd.right) cmd.right = cmd.right.dispatch( this )
      return cmd

    method visit( cmd:CompareGT )->Cmd
      if (cmd.left)  cmd.left  = cmd.left.dispatch( this )
      if (cmd.right) cmd.right = cmd.right.dispatch( this )
      return cmd

    method visit( cmd:CompareLE )->Cmd
      if (cmd.left)  cmd.left  = cmd.left.dispatch( this )
      if (cmd.right) cmd.right = cmd.right.dispatch( this )
      return cmd

    method visit( cmd:CompareGE )->Cmd
      if (cmd.left)  cmd.left  = cmd.left.dispatch( this )
      if (cmd.right) cmd.right = cmd.right.dispatch( this )
      return cmd

    method visit( cmd:LiteralCharacter )->Cmd
      return cmd

    method visit( cmd:LiteralString )->Cmd
      return cmd

    method visit( cmd:Increment )->Cmd
      if (cmd.target) cmd.target = cmd.target.dispatch( this )
      return cmd

    method visit( cmd:Decrement )->Cmd
      if (cmd.target) cmd.target = cmd.target.dispatch( this )
      return cmd

    method visit( cmd:Print )->Cmd
      if (cmd.args) cmd.args = cmd.args.dispatch( this )
      return cmd

    method visit( cmd:Println )->Cmd
      if (cmd.args) cmd.args = cmd.args.dispatch( this )
      return cmd

    method visit( cmd:HasAnother )->Cmd
      return cmd

    method visit( cmd:Read )->Cmd
      return cmd

    method visit( cmd:Collect )->Cmd
      if (cmd.args) cmd.args = cmd.args.dispatch( this ) as CmdList

      return cmd

    method visit( cmd:WriteVar )->Cmd
      cmd.new_value = cmd.new_value.dispatch( this )
      return cmd

    method visit( cmd:ReadVar )->Cmd
      return cmd

    method visit( cmd:ScanError )->Cmd
      if (cmd.args) cmd.args = cmd.args.dispatch( this ) as CmdList
      return cmd

    method visit( cmd:CastTo )->Cmd
      cmd.operand = cmd.operand.dispatch( this )
      return cmd

    method visit( cmd:CastToLogical )->Cmd
      cmd.operand = cmd.operand.dispatch( this )
      return cmd

    method visit( cmd:CastToCharacter )->Cmd
      cmd.operand = cmd.operand.dispatch( this )
      return cmd

    method visit( cmd:CastToInteger )->Cmd
      cmd.operand = cmd.operand.dispatch( this )
      return cmd

    method visit( cmd:CastToTokenType )->Cmd
      cmd.operand = cmd.operand.dispatch( this )
      return cmd

    method visit( cmd:CastToString )->Cmd
      cmd.operand = cmd.operand.dispatch( this )
      return cmd

    method visit( cmd:TokenGroup )->Cmd
      if (cmd.definitions) cmd.definitions = cmd.definitions.dispatch( this ) as CmdList
      return cmd

    method visit( cmd:TokenDef )->Cmd
      if (cmd.attributes) cmd.attributes = cmd.attributes.dispatch( this ) as CmdList

      return cmd

    method visit( cmd:Symbol )->Cmd
      return cmd

    method visit( cmd:LogicalNot )->Cmd
      if (cmd.operand)  cmd.operand = cmd.operand.dispatch( this )
      return cmd

    method visit( cmd:Consume )->Cmd
      cmd.alternatives = cmd.alternatives.dispatch( this ) as CmdList
      return cmd

    method visit( cmd:ConsumeValue )->Cmd
      cmd.value .= dispatch( this )
      return cmd

    method visit( cmd:ConsumeAny )->Cmd
      if (cmd.alternatives) cmd.alternatives .= dispatch( this )
      return cmd

    method visit( cmd:Call )->Cmd
      return cmd

    method visit( cmd:Return )->Cmd
      if (cmd.value) cmd.value = cmd.value.dispatch( this )
      return cmd

    method visit( cmd:LiteralStringOrCharacter )->Cmd
      return cmd

    method visit( cmd:ScannerProduce )->Cmd
      if (cmd.token_type) cmd.token_type = cmd.token_type.dispatch( this )
      return cmd

    method visit( cmd:LiteralTokenType )->Cmd
      return cmd

    method visit( cmd:Halt )->Cmd
      return cmd

    method visit( cmd:ReadBuffer )->Cmd
      return cmd

    method visit( cmd:WriteBuffer )->Cmd
      cmd.new_value .= dispatch( this )
      return cmd

    method visit( cmd:Args )->Cmd
      forEach (item in rewriter=cmd.list.rewriter)
        if (item)
          item .= dispatch( this )
          if (item) rewriter.write( item )
        endIf
      endForEach
      return cmd

    method visit( cmd:Scan )->Cmd
      if (cmd.expression) cmd.expression = cmd.expression.dispatch( this )
      if (cmd.cases) cmd.cases = cmd.cases.dispatch( this ) as CmdList
      if (cmd._others) cmd._others = cmd._others.dispatch( this )
      (forEach in cmd.statement_lists).dispatch( this )
      return cmd

    method visit( cmd:ScanOn )->Cmd
      if (cmd.expression) cmd.expression = cmd.expression.dispatch( this )
      if (cmd.statements) cmd.statements = cmd.statements.dispatch( this ) as CmdList

      return cmd

    method visit( cmd:ProduceAny )->Cmd
      return cmd
endClass

module Froley

$include "Rogue/RCmd.rogue"
$include "Rogue/RMain.rogue"
$include "Rogue/RInspectionVisitor.rogue"
$include "Rogue/RParser.rogue"
$include "Rogue/RParserCore.rogue"
$include "Rogue/RScanTable.rogue"
$include "Rogue/RScanner.rogue"
$include "Rogue/RScannerCore.rogue"
$include "Rogue/RCompileError.rogue"
$include "Rogue/RToken.rogue"
$include "Rogue/RTokenType.rogue"
$include "Rogue/RVisitor.rogue"
$include "Rogue/RogueSourceWriter.rogue"
$include "Rogue/ScanTableDeclarationWriter.rogue"

class RogueGenerator : Visitor
  GLOBAL METHODS
    method to_escaped_ascii( st:String, additional_escapes:String )->String
      return st.to_escaped_ascii( additional_escapes )

  PROPERTIES
    folder     : String
    writer     : PrintWriter
    class_name = ""

    indent     = 0
    at_newline = true
    write_replacements = [String:String]

  METHODS
    method init( folder )
      File( folder ).create_folder

      visit( Program.nodes )

      RCompileError(this).create_missing
      RScanTable(this).create_missing
      RTokenType(this).overwrite
      RToken(this).create_missing

      # Main
      if (Program.main_filename)
        RMain( this, Program.main_filename ).create_missing
      endIf

    method on_visit( cmd:BeginList )
      write   "_begin_list"
      visit_children( cmd )

    method on_visit( cmd:Call )
      if (is_scanner)
        write "if (not r_"
        write cmd.routine_def.name
        write ") return false"
      else
        write   "r_"
        write   cmd.routine_def.name
      endIf
      visit_children( cmd )

    method on_visit( cmd:CastToLogical )
      visit_children( cmd )
      write "->Logical"

    method on_visit( cmd:CastToCharacter )
      visit_children( cmd )
      write "->Character"

    method on_visit( cmd:CastToInteger )
      visit_children( cmd )
      write "->Int32"

    method on_visit( cmd:CastToString )
      visit_children( cmd )
      write "->String"

    method on( cmd:Collect )->Cmd
      forEach (arg at i in cmd.args)
        if (i > 0) writeln
        write "buffer.print("
        visit( arg )
        write ")"
      endForEach
      return null

    method on( cmd:CompareEQ )->Cmd
      write "("
      visit( cmd.left )
      write "=="
      visit( cmd.right )
      write ")"
      return cmd

    method on( cmd:CompareGE )->Cmd
      write "("
      visit( cmd.left )
      write ">="
      visit( cmd.right )
      write ")"
      return cmd

    method on( cmd:CompareGT )->Cmd
      write "("
      visit( cmd.left )
      write ">"
      visit( cmd.right )
      write ")"
      return cmd

    method on( cmd:CompareLE )->Cmd
      write "("
      visit( cmd.left )
      write "<="
      visit( cmd.right )
      write ")"
      return cmd

    method on( cmd:CompareLT )->Cmd
      write "("
      visit( cmd.left )
      write "<"
      visit( cmd.right )
      write ")"
      return cmd

    method on( cmd:CompareNE )->Cmd
      write "("
      visit( cmd.left )
      write "!="
      visit( cmd.right )
      write ")"
      return cmd

    method on_visit( cmd:ConsumeCharacters )
      write "_scanner.consume("
      visit_children( cmd )
      write ")"

    method on( cmd:ConsumeContent )->Cmd
      write "_consume_content("
      write ''"$"'' (to_escaped_ascii(cmd.content,"\""))
      write ")"
      return cmd

    method on_visit( cmd:ConsumeEOLs )
      write "_consume_eols"
      visit_children( cmd )

    method on_visit( cmd:ConsumePattern )
      visit_children( cmd )
      write ".scan(_scanner)"

    method on( cmd:ConsumeToken )->Cmd
      write "_consume(TokenType."
      write cmd.token_type.name
      write ")"
      return cmd

    method on( cmd:CreateCmd )->Cmd
      write "if (not disable_output) _push( "
      write cmd.name
      write "(_cur_t"
      visit( cmd.args )
      write "), "
      write cmd.node_arg_count
      write " )"
      return cmd

    method on( cmd:CreateCmdArg )->Cmd
      write ","
      local arg_type = Program.type( cmd.t, cmd.arg_type )
      if (cmd.arg_value)
        if (arg_type is Program.type_native)
          write cmd.arg_value->String
        elseIf (arg_type.is_built_in and arg_type is not Program.type_String)
          write "_string_to_$(" (arg_type.name)
          visit( cmd.arg_value )
          write ")"
        else
          visit( cmd.arg_value )
        endIf
      else
        if (arg_type.is_built_in)
          write "_$_arg($)"(arg_type.name_lc,cmd.stack_offset)
        else
          write "_node_arg($)"(cmd.stack_offset)
          if (arg_type.name != "Cmd") write "->(as "; write arg_type.name; write ")"
        endIf
      endIf
      return cmd

    method on_visit( cmd:CreateList )
      writeln "if (disable_output)     _discard_list"
      write   "else                    _push_list( $(_list_t) )" (cmd.list_type)
      visit_children( cmd )

    method on_visit( cmd:CreateNull )
      write "if (not disable_output) _push( null, 0 )"
      visit_children( cmd )

    method on_visit( cmd:CreateTokenList )
      writeln "if (disable_output) _discard_position"
      write   "else                _create_token_list"

    method on_visit( cmd:CreateTokenListPreservingStack )
      writeln "if (disable_output) _discard_position"
      write   "else                _create_token_list( &preserve_stack )"

    method on_visit( cmd:MustConsumeCharacters )
      write "_must_consume( "
      visit_children( cmd )
      write " )"

    method on_visit( cmd:MustConsumePattern )
      write "_must_consume( "
      visit_children( cmd )
      write " )"

    method on( cmd:MustConsumeToken )->Cmd
      write "if (not _consume(TokenType."
      write cmd.token_type.name
      write ")) _throw_syntax_error( &expected=TokenType."
      write cmd.token_type.name
      write " )"
      return cmd

    method on_visit( cmd:ParserHasAnother )
      write "(_position < _limit)"
      visit_children( cmd )

    method on_visit( cmd:ParserPop )
      writeln "$ = _pop"(cmd.var.name)

    method on_visit( cmd:ParserPush )
      writeln "_push( $ )"(cmd.var.name)

    method on_visit( cmd:Pattern )
      write cmd.reference_name
      visit_children( cmd )

    method on_visit( cmd:Decrement )
      write "--"
      visit_children( cmd )

    method on_visit( cmd:DiscardList )
      write "_discard_list"
      visit_children( cmd )

    method on_visit( cmd:DiscardPosition )
      write "_discard_position"
      visit_children( cmd )

    method on( cmd:If )->Cmd
      write   "if ("
      visit( cmd.condition )
      writeln ")"
      indent += 2
      visit( cmd.statements )
      indent -= 2

      visit( cmd.else_ifs )

      if (cmd._else)
        writeln "else"
        indent += 2
        visit( cmd._else )
        indent -= 2
      endIf

      write   "endIf"
      return cmd

    method on( cmd:ElseIf )->Cmd
      write   "elseIf ("
      visit( cmd.condition )
      writeln ")"
      indent += 2
      visit( cmd.statements )
      indent -= 2
      return cmd

    method on_visit( cmd:Halt )
      writeln "halt = true"
      write   "return false"
      visit_children( cmd )

    method on_visit( cmd:Increment )
      write "++"
      visit_children( cmd )

    method on_visit( cmd:ScannerHasAnother )
      write "_scanner.has_another"
      visit_children( cmd )

    method on_visit( cmd:LiteralCharacter )
      which (cmd.value)
        case '\\': write @|'\\'
        case '\n': write @|'\n'
        case '\r': write @|'\r'
        case '\t': write @|'\t'
        others
          write( "'$'"(to_escaped_ascii(cmd.value,"'")) )
      endWhich
      visit_children( cmd )

    method on_visit( cmd:LiteralContent )
      writer.print '"'
      writer.print cmd.value.to_escaped_ascii("\"")
      writer.print '"'

    method on_visit( cmd:LiteralInteger )
      writer.print( cmd.value )
      visit_children( cmd )

    method on_visit( cmd:LiteralLogical )
      writer.print( cmd.value )
      visit_children( cmd )

    method on_visit( cmd:LiteralString )
      writer.print( ''"$"''(to_escaped_ascii(cmd.value,''"'')) )
      visit_children( cmd )

    method on_visit( cmd:LiteralTokenType )
      write "TokenType."
      write cmd.token_type.name
      visit_children( cmd )

    method on( cmd:LogicalAnd )->Cmd
      write "("
      visit( cmd.left )
      write " and "
      visit( cmd.right )
      write ")"
      return cmd

    method on_visit( cmd:LogicalNot )
      write "(not "
      visit_children( cmd )
      write ")"

    method on( cmd:LogicalOr )->Cmd
      write "("
      visit( cmd.left )
      write " or "
      visit( cmd.right )
      write ")"
      return cmd

    method on_visit( cmd:MarkPosition )
      writeln "line   = _scanner.line"
      write   "column = _scanner.column"
      visit_children( cmd )

    method on_visit( cmd:Mode )
      write "start_ip = ip_"
      write cmd.routine_name
      visit_children( cmd )

    method on( cmd:On )->Cmd
      if (cmd.token_type instanceOf LiteralContent)
        write   "if (_next_t.content and _next_t.content == "
      else
        write   "if (_next_t.type == "
      endIf
      visit( cmd.token_type )
      writeln ")"
      indent += 2

      if (cmd.is_peek) writeln "temporarily _cur_t = _next_t"
      else             writeln "temporarily _cur_t = _on_t"
      indent += 2
      visit( cmd.statements )
      indent -= 2
      writeln "endTemporarily"

      indent -= 2

      visit( cmd.else_ons )

      if (cmd._else_on_others)
        writeln "else"
        indent += 2
        visit( cmd._else_on_others )
        indent -= 2
      endIf

      write   "endIf"
      return cmd

    method on_visit( cmd:NativeLiteral )
      writer.print( cmd.value )

    method on( cmd:ElseOn )->Cmd
      write   "elseIf (_next_t.type == "
      visit( cmd.token_type )
      writeln ")"
      indent += 2

      if (cmd.is_peek) writeln "temporarily _cur_t = _next_t"
      else             writeln "temporarily _cur_t = _on_t"
      indent += 2
      visit( cmd.statements )
      indent -= 2
      writeln "endTemporarily"

      indent -= 2
      return cmd

    method on_visit( cmd:ScannerCallUserMethod )
      writeln cmd.fn_name
      visit_children( cmd )

    method on_visit( cmd:MustConsumeContent )
      write "_must_consume_content("
      write ''"$"'' (to_escaped_ascii(cmd.content, "\""))
      write ")"
      visit_children( cmd )

    method on_visit( cmd:NextHasAttribute )
      write "(_next_t.type.attributes & TokenType.ATTRIBUTE_$)?"(cmd.name.to_uppercase)
      visit_children( cmd )

    method on( cmd:NextIsCharacters )->Cmd
      if (cmd.value.type == FType.CHARACTER)
        write "_scanner.next_is("
        visit( cmd.value )
        write ")"
      else
        write "_next_is("
        visit( cmd.value )
        write ")"
      endIf
      return cmd

    method on_visit( cmd:NextIsContent )
      write ''(_next_t.content and _next_t.content == "''
      write to_escaped_ascii( cmd.content, "\"" )
      write ''")''
      visit_children( cmd )

    method on_visit( cmd:NextIsPattern )
      visit_children( cmd )
      write ".is_next(_scanner)"

    method on_visit( cmd:ParserCallUserMethod )
      writeln cmd.fn_name
      visit_children( cmd )

    method on( cmd:NextIsTokenType )->Cmd
      write "(_next_t.type == TokenType."
      write cmd.token_type.name
      write ")"
      return cmd

    method on( cmd:Print )->Cmd
      write "output.[ "
      forEach (arg at i in cmd.args)
        if (i > 0) write ", "
        write "print("
        visit( arg.require_value )
        write ")"
      endForEach
      write " ]"
      return cmd

    method on( cmd:Println )->Cmd
      write "output.[ "
      forEach (arg at i in cmd.args)
        if (i > 0) write ", "
        write "print("
        visit( arg.require_value )
        write ")"
      endForEach
      if (cmd.args.count) write ", "
      writeln "println ]"
      write "_on_output_line"
      return cmd

    method on_visit( cmd:ProduceList )
      writeln "if (disable_output)     _discard_list"
      writeln "else                    _push_list( $(_list_t) )" (cmd.list_type)
      writeln "_cur_t = _previous_cur_t"
      write   "return"
      visit_children( cmd )

    method on_visit( cmd:ProduceTokenList )
      writeln "if (disable_output) _discard_position"
      writeln "else                _create_token_list"
      writeln "_cur_t = _previous_cur_t"
      write   "return"

    method on_visit( cmd:ProduceTokenListPreservingStack )
      writeln "if (disable_output) _discard_position"
      writeln "else                _create_token_list( &preserve_stack )"
      writeln "_cur_t = _previous_cur_t"
      write   "return"

    method on_visit( cmd:ScanCharacters )
      write "_scan("
      visit_children( cmd )
      write ")"

    method on_visit( cmd:ScanPatternCmd )
      visit_children( cmd )
      write ".scan(_scanner,buffer)"

    method on_visit( cmd:ParserProduce )
      visit_children( cmd )
      writeln
      writeln "_cur_t = _previous_cur_t"
      write   "return"

    method on_visit( cmd:ParserRead )
      write "_read"
      visit_children( cmd )

    method on_visit( cmd:ScannerCreate )
      write   "_add( "
      visit_children( cmd )
      write " )"

    method on( cmd:ScannerPeek )->Cmd
      write   "_scanner.peek"
      if (cmd.lookahead)
        write " ("
        visit( cmd.lookahead )
        write ")"
      endIf
      return cmd

    method on_visit( cmd:ScannerRead )
      write "_scanner.read"
      visit_children( cmd )

    method on_visit( cmd:ReadBuffer )
      write "buffer"
      visit_children( cmd )

    method on_visit( cmd:ReadOutput )
      write "output"
      visit_children( cmd )

    method on_visit( cmd:ReadVar )
      write cmd.var.name
      visit_children( cmd )

    method on_visit( cmd:Restart )
      if (cmd.start_ip)
        write "start_ip = ip_"
        writeln cmd.start_ip
      endIf
      write "return false"
      visit_children( cmd )

    method on_visit( cmd:RestorePosition )
      write "_restore_position"
      visit_children( cmd )

    method on_visit( cmd:Return )
      if (is_scanner)
        write   "return true"
      else
        writeln "_cur_t = _previous_cur_t"
        write   "return"
      endIf
      visit_children( cmd )

    method on( cmd:FroleyRoutine )->Cmd
      if (is_scanner)
        writeln "    method r_$->Logical"(cmd.name)

        indent += 6
        prior.on( cmd )

        if (not BranchAnalyzer.all_paths_return(cmd))
          writeln "return true"
        endIf

        indent -= 6
        writeln
      else
        writeln "    method r_$"(cmd.name)

        indent += 6
        writeln "local _previous_cur_t = _cur_t"
        prior.on( cmd )

        if (not BranchAnalyzer.all_paths_return(cmd))
          writeln "_cur_t = _previous_cur_t"
        endIf

        indent -= 6
        writeln
      endIf
      return null


    method on_visit( cmd:SavePosition )
      write "_save_position"
      visit_children( cmd )

    method on( cmd:ScannerDef )->Cmd
      temporarily this_element = cmd
        RScanner(this).create_missing
        RScannerCore(this,cmd).overwrite
      endTemporarily
      return cmd

    method on( cmd:Statements )->Cmd
      forEach (element in cmd)
        if (element)
          visit( element )
          writeln
        endIf
      endForEach
      return cmd

    method on( cmd:Match )->Cmd
      write_replacements["$scan_table"] = cmd.id

      writeln @|$scan_table.reset
               |contingent
      if (cmd.expression)
        # ScannerRead from string; must accept all characters.
        write @|  necessary ($scan_table.accept(forEach in
        write " "
        visit( cmd.expression )
        writeln @|))
      else
        # ScannerRead longest match from input
        indent += 2
        writeln @|block n=1
                 |  while (_scanner.has_another(n))
                 |    if (not $scan_table.accept(_scanner.peek(n-1)))
                 |      escapeWhile
                 |    endIf
                 |    ++n
                 |  endWhile
                 |  necessary ($scan_table.has_product)
                 |  loop ($scan_table.match_count) _scanner.read
                 |endBlock
        indent -= 2
      endIf

      writeln @|  which ($scan_table.product)
      indent += 4
      local i1 = which{ cmd._others:1 || 0 }
      forEach (statements at i in cmd.statement_lists from i1)
        writeln "case "+i
        indent += 2
        visit( statements )
        indent -= 2
      endForEach
      writeln @|others
               |  necessary (false)
      indent -= 4
      writeln @|  endWhich

      if (cmd._others)
        writeln "unsatisfied"
        indent += 2
        visit( cmd.statement_lists[0] )
        indent -= 2
      endIf

      write @|endContingent

      write_replacements.remove( "$scan_table" )
      return cmd

    method on( cmd:ThrowSyntaxError )->Cmd
      write "_throw_syntax_error"
      if (cmd.args and cmd.args.count)
        write "("
        forEach (arg at i in cmd.args)
          if (i > 0) write "+"
          visit( arg )
        endForEach
        write ")"
      endIf
      writeln
      if (is_scanner)
        write "return false"
      else
        writeln "_cur_t = _previous_cur_t"
        write "return"
      endIf
      return cmd

    method on_visit( cmd:TokenContent )
      write "_cur_t.content"
      visit_children( cmd )

    method on_visit( cmd:WriteBuffer )
      write "buffer.clear"
      if (not (cmd instanceOf LiteralString and cmd->String == ""))
        writeln
        write "buffer.print "
        visit_children( cmd )
      endIf

    method on_visit( cmd:WriteOutput )
      write "output.clear"
      if (not (cmd instanceOf LiteralString and cmd->String == ""))
        writeln
        write "output.print "
        visit_children( cmd )
      endIf

    method on_visit( cmd:WriteVar )
      write "$ = " (cmd.var.name)
      visit_children( cmd )

    method on( cmd:While )->Cmd
      write   "while ("
      visit( cmd.condition )
      writeln ")"
      indent += 2
      visit( cmd.statements )
      indent -= 2
      write   "endWhile"
      return cmd

    method write( content:String )
      if (content.contains('\n'))
        forEach (line at i in content.split('\n'))
          if (i > 0) writeln
          write( line )
        endForEach
        return
      endIf

      if (at_newline and indent)
        loop (indent) writer.print(' ')
      endIf

      if (content.contains('$'))
        content .= replacing( "$module", "module $\n" (Program.project_name) )
        forEach (entry in write_replacements.entries)
          content .= replacing( entry.key, entry.value )
        endForEach
      endIf
      writer.print( content )

      at_newline = false

    method writeln( content="":String )
      if (String.exists(content)) write( content )
      writer.println
      at_newline = true

    method on( cmd:ParserDef )->Cmd
      temporarily this_element = cmd
        RCmd(this).update
        RVisitor(this).update
        RInspectionVisitor(this).update
        RParser(this).create_missing
        RParserCore(this,cmd).overwrite
      endTemporarily
      return cmd

    method on( cmd:Add )->Cmd
      write "("
      visit( cmd.left )
      write " + "
      visit( cmd.right )
      write ")"
      return cmd

    method on( cmd:Subtract )->Cmd
      write "("
      visit( cmd.left )
      write " - "
      visit( cmd.right )
      write ")"
      return cmd

    method on( cmd:Multiply )->Cmd
      write "("
      visit( cmd.left )
      write " * "
      visit( cmd.right )
      write ")"
      return cmd

    method on( cmd:Divide )->Cmd
      write "("
      visit( cmd.left )
      write " / "
      visit( cmd.right )
      write ")"
      return cmd

    method on( cmd:Power )->Cmd
      write "("
      visit( cmd.left )
      write " ^ "
      visit( cmd.right )
      write ")"
      return cmd

    method on_visit( cmd:Negate )
      write "-"
      visit_children( cmd )

endClass


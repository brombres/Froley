module Froley

class ScanTableBuilder
  PROPERTIES
    root = ScanTableNode()

  METHODS
    method set_default( product:Int )
      root.product = product

    method add( symbol:String, product:Int, &ignore_case )
      root.link( symbol, product, &=ignore_case )

    method to_encoded_scan_table->String
      local table = Int[]
      root.mark_indices( table )
      root.insert_links( table )

      local writer = DataWriter()
      writer.write_int32x( table.count )
      writer.write_int32x( forEach in table )
      return writer.output_bytes.to_base64

    method to->String
      return root->Value.to_json #(&formatted)
endClass

class ScanTableNode
  PROPERTIES
    links   = [Character:ScanTableNode]
    index   : Int
    product = -1L

  METHODS
    method insert_links( table:Int[] )
      local i = index + 2
      forEach (entry in links.entries)
        table[i] = entry.key
        table[i+1] = entry.value.index
        entry.value.insert_links( table )
        i += 2
      endForEach

    method link( ch:Character )->ScanTableNode
      local entry = links.find( ch )
      if (entry)
        return entry.value
      else
        local next_state = ScanTableNode()
        links[ ch ] = next_state
        return next_state
      endIf

    method link( symbol:String, product:Int, &ignore_case )
      if (symbol == "")
        this.product = product

      elseIf (ignore_case)
        local lc = symbol[0].to_lowercase
        local uc = lc.to_uppercase
        local remaining = symbol.rightmost(-1)
        link(lc).link( remaining, product, &ignore_case )
        if (uc != lc)
          link(uc).link( remaining, product, &ignore_case )
        endIf

      else
        local ch = symbol[0]
        local remaining = symbol.rightmost(-1)
        link(ch).link( remaining, product )

      endIf

    method mark_indices( table:Int[] )
      index = table.count
      table.add( product )
      table.add( links.count )
      loop (links.count) table.[add(0),add(0)]
      (forEach in links).mark_indices( table )

    method to->Value
      local result = @{}
      if (product != -1) result//product = product
      if (links.count)
        if (not result//links) result//links = @{}
        local link_table = result//links
        forEach (entry in links.entries)
          link_table[""+entry.key] = entry.value->Value
        endForEach
      endIf
      return result
endClass


# Generated and updated by Froley. Custom changes will not be overwritten; customize as desired.
module Simple

class InspectonVisitor : InspectionVisitor<<Logical>>
endClass

class InspectionVisitor<<$ReturnType>>
  METHODS
    method on( cmd:Cmd )->$ReturnType
      # Default per-node InspectionVisitor call sequence.
      #
      #   CALL                        OVERLOADABLE METHOD
      #   --------------------        ------------------------
      #   visit(cmd)->$ReturnType  -> on(cmd:CmdType)->$ReturnType
      #     enter(cmd) ->               on_enter(cmd:CmdType)
      enter( cmd )
      return $ReturnType.meta.default_value

    method on( cmd:CmdList )->Logical
      forEach (statement in cmd.list)
        local result = visit(statement)
        if (result?) return result
      endForEach
      return $ReturnType.meta.default_value

    method on_enter( cmd:Cmd )
      # This method is called from the default on(CmdType) before
      # children are visited.

    method visit( cmd:Cmd )->$ReturnType [propagated]
      if (cmd is null) return $ReturnType.meta.default_value
      return cmd.dispatch<<ThisType,$ReturnType>>( this )

    method enter( cmd:Cmd ) [propagated]
      cmd.dispatch_on_enter<<ThisType>>( this )

    method on( cmd:AST )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.statements)
      return result

    method on( cmd:Binary )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.left)
      if (result?) return result
      result = visit(cmd.right)
      return result

    method on( cmd:Print )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.args)
      return result

    method on( cmd:Unary )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.operand)
      return result

    method on( cmd:WriteVar )->$ReturnType
      local result : $ReturnType
      result = visit(cmd.new_value)
      return result

endClass

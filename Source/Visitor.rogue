# Generated and updated by Froley. Custom changes will not be overwritten; customize as desired.
module Froley

class Visitor<<$ReturnType>>
  PROPERTIES
    this_element : Element
    this_routine : Routine
    this_match   : Match

  METHODS
    method is_parser->Logical
      return this_element instanceOf ParserDef

    method is_scanner->Logical
      return this_element instanceOf ScannerDef

    method on_visit( cmd:Cmd )
      visit_children( cmd )

    method on_visit_children( cmd:Cmd )
      noAction

    method visit( cmd:Cmd )->$ReturnType [propagated]
      if ($ReturnType instanceOf Cmd)
        if (cmd is null) return null
      else
        if (cmd is null) return $ReturnType.meta.default_value
      endIf
      return cmd.dispatch<<ThisType,$ReturnType>>( this )

    method visit_children( cmd:Cmd ) [propagated]
      cmd.dispatch_on_visit_children<<ThisType>>( this )

    method handle_visit( cmd:Cmd ) [propagated]
      cmd.dispatch_on_visit<<ThisType>>( this )

    method on_visit_children( cmd:CmdList )
      if ($ReturnType instanceOf Cmd)
        forEach (element in writer=cmd.list.rewriter)
          local visited_element = visit( element )
          if (visited_element) writer.write( visited_element )
        endForEach
      else
        visit( forEach in cmd.list )
      endIf

    method on( cmd:Cmd )->$ReturnType
      handle_visit( cmd )
      if ($ReturnType instanceOf Cmd) return cmd
      else                            return $ReturnType.meta.default_value

    method on_visit_children( cmd:Assign )
      if ($ReturnType instanceOf Cmd)
        cmd.target = visit(cmd.target)
        cmd.new_value = visit(cmd.new_value)
      else
        visit( cmd.target )
        visit( cmd.new_value )
      endIf

    method on_visit_children( cmd:Binary )
      if ($ReturnType instanceOf Cmd)
        cmd.left = visit(cmd.left)
        cmd.right = visit(cmd.right)
      else
        visit( cmd.left )
        visit( cmd.right )
      endIf

    method on_visit_children( cmd:Collect )
      if ($ReturnType instanceOf Cmd)
        cmd.args = visit(cmd.args)->(as Args)
      else
        visit( cmd.args )
      endIf

    method on_visit_children( cmd:CreateCmd )
      if ($ReturnType instanceOf Cmd)
        cmd.args = visit(cmd.args)->(as Args)
      else
        visit( cmd.args )
      endIf

    method on_visit_children( cmd:CreateCmdArg )
      if ($ReturnType instanceOf Cmd)
        cmd.arg_value = visit(cmd.arg_value)
      else
        visit( cmd.arg_value )
      endIf

    method on_visit_children( cmd:Decrement )
      if ($ReturnType instanceOf Cmd)
        cmd.target = visit(cmd.target)
      else
        visit( cmd.target )
      endIf

    method on_visit_children( cmd:ElseIf )
      if ($ReturnType instanceOf Cmd)
        cmd.condition = visit(cmd.condition)
        cmd.statements = visit(cmd.statements)->(as Statements)
      else
        visit( cmd.condition )
        visit( cmd.statements )
      endIf

    method on_visit_children( cmd:ElseOn )
      if ($ReturnType instanceOf Cmd)
        cmd.token_type = visit(cmd.token_type)
        cmd.token_types = visit(cmd.token_types)->(as Args)
        cmd.statements = visit(cmd.statements)->(as Statements)
      else
        visit( cmd.token_type )
        visit( cmd.token_types )
        visit( cmd.statements )
      endIf

    method on_visit_children( cmd:If )
      if ($ReturnType instanceOf Cmd)
        cmd.condition = visit(cmd.condition)
        cmd.statements = visit(cmd.statements)->(as Statements)
        cmd.else_ifs = visit(cmd.else_ifs)
        cmd._else = visit(cmd._else)->(as Statements)
      else
        visit( cmd.condition )
        visit( cmd.statements )
        visit( cmd.else_ifs )
        visit( cmd._else )
      endIf

    method on_visit_children( cmd:Increment )
      if ($ReturnType instanceOf Cmd)
        cmd.target = visit(cmd.target)
      else
        visit( cmd.target )
      endIf

    method on( cmd:Match )->$ReturnType
      temporarily this_match = cmd
        handle_visit( cmd )
      endTemporarily
      if ($ReturnType instanceOf Cmd) return cmd
      else                            return $ReturnType.meta.default_value

    method on_visit_children( cmd:Match )
      if ($ReturnType instanceOf Cmd)
        cmd.expression = visit(cmd.expression)
        cmd.cases = visit(cmd.cases)
        cmd._others = visit(cmd._others)
      else
        visit( cmd.expression )
        visit( cmd.cases )
        visit( cmd._others )
      endIf

    method on_visit_children( cmd:MatchCase )
      if ($ReturnType instanceOf Cmd)
        cmd.expression = visit(cmd.expression)
        cmd.statements = visit(cmd.statements)
      else
        visit( cmd.expression )
        visit( cmd.statements )
      endIf

    method on_visit_children( cmd:On )
      if ($ReturnType instanceOf Cmd)
        cmd.token_type = visit(cmd.token_type)
        cmd.token_types = visit(cmd.token_types)->(as Args)
        cmd.statements = visit(cmd.statements)->(as Statements)
        cmd.else_ons = visit(cmd.else_ons)
        cmd._else_on_others = visit(cmd._else_on_others)->(as Statements)
      else
        visit( cmd.token_type )
        visit( cmd.token_types )
        visit( cmd.statements )
        visit( cmd.else_ons )
        visit( cmd._else_on_others )
      endIf

    method on_visit_children( cmd:OneOrMore )
      if ($ReturnType instanceOf Cmd)
        cmd.pattern = visit(cmd.pattern)
      else
        visit( cmd.pattern )
      endIf

    method on_visit_children( cmd:OptionalPattern )
      if ($ReturnType instanceOf Cmd)
        cmd.pattern = visit(cmd.pattern)
      else
        visit( cmd.pattern )
      endIf

    method on_visit_children( cmd:ParserConsume )
      if ($ReturnType instanceOf Cmd)
        cmd.token_type = visit(cmd.token_type)
      else
        visit( cmd.token_type )
      endIf

    method on_visit_children( cmd:ParserCreate )
      if ($ReturnType instanceOf Cmd)
        cmd.arg = visit(cmd.arg)->(as CreateCmd)
      else
        visit( cmd.arg )
      endIf

    method on( cmd:ParserDef )->$ReturnType
      temporarily this_element = cmd
        handle_visit( cmd )
      endTemporarily
      if ($ReturnType instanceOf Cmd) return cmd
      else                            return $ReturnType.meta.default_value

    method on_visit_children( cmd:ParserMustConsume )
      if ($ReturnType instanceOf Cmd)
        cmd.token_type = visit(cmd.token_type)
      else
        visit( cmd.token_type )
      endIf

    method on_visit_children( cmd:ParserNextIs )
      if ($ReturnType instanceOf Cmd)
        cmd.token_type = visit(cmd.token_type)
      else
        visit( cmd.token_type )
      endIf

    method on_visit_children( cmd:Print )
      if ($ReturnType instanceOf Cmd)
        cmd.args = visit(cmd.args)->(as Args)
      else
        visit( cmd.args )
      endIf

    method on_visit_children( cmd:Println )
      if ($ReturnType instanceOf Cmd)
        cmd.args = visit(cmd.args)->(as Args)
      else
        visit( cmd.args )
      endIf

    method on_visit_children( cmd:ProgramDef )
      if ($ReturnType instanceOf Cmd)
        cmd.sections = visit(cmd.sections)
      else
        visit( cmd.sections )
      endIf

    method on_visit_children( cmd:Return )
      if ($ReturnType instanceOf Cmd)
        cmd.value = visit(cmd.value)
      else
        visit( cmd.value )
      endIf

    method on( cmd:Routine )->$ReturnType
      temporarily this_routine = cmd
        handle_visit( cmd )
      endTemporarily
      if ($ReturnType instanceOf Cmd) return cmd
      else                            return $ReturnType.meta.default_value

    method on_visit_children( cmd:Routine )
      if ($ReturnType instanceOf Cmd)
        cmd.statements = visit(cmd.statements)->(as Statements)
      else
        visit( cmd.statements )
      endIf

    method on_visit_children( cmd:Scan )
      if ($ReturnType instanceOf Cmd)
        cmd.args = visit(cmd.args)->(as SequenceArgs)
      else
        visit( cmd.args )
      endIf

    method on_visit_children( cmd:ScannerConsume )
      if ($ReturnType instanceOf Cmd)
        cmd.args = visit(cmd.args)->(as SequenceArgs)
      else
        visit( cmd.args )
      endIf

    method on_visit_children( cmd:ScannerCreate )
      if ($ReturnType instanceOf Cmd)
        cmd.arg = visit(cmd.arg)
      else
        visit( cmd.arg )
      endIf

    method on( cmd:ScannerDef )->$ReturnType
      temporarily this_element = cmd
        handle_visit( cmd )
      endTemporarily
      if ($ReturnType instanceOf Cmd) return cmd
      else                            return $ReturnType.meta.default_value

    method on_visit_children( cmd:ScannerMustConsume )
      if ($ReturnType instanceOf Cmd)
        cmd.args = visit(cmd.args)->(as SequenceArgs)
      else
        visit( cmd.args )
      endIf

    method on_visit_children( cmd:ScannerNextIs )
      if ($ReturnType instanceOf Cmd)
        cmd.args = visit(cmd.args)->(as SequenceArgs)
      else
        visit( cmd.args )
      endIf

    method on_visit_children( cmd:ScannerPeek )
      if ($ReturnType instanceOf Cmd)
        cmd.lookahead = visit(cmd.lookahead)
      else
        visit( cmd.lookahead )
      endIf

    method on_visit_children( cmd:ThrowSyntaxError )
      if ($ReturnType instanceOf Cmd)
        cmd.args = visit(cmd.args)->(as Args)
      else
        visit( cmd.args )
      endIf

    method on_visit_children( cmd:TokenGroup )
      if ($ReturnType instanceOf Cmd)
        cmd.definitions = visit(cmd.definitions)
      else
        visit( cmd.definitions )
      endIf

    method on_visit_children( cmd:Unary )
      if ($ReturnType instanceOf Cmd)
        cmd.operand = visit(cmd.operand)
      else
        visit( cmd.operand )
      endIf

    method on_visit_children( cmd:While )
      if ($ReturnType instanceOf Cmd)
        cmd.condition = visit(cmd.condition)
        cmd.statements = visit(cmd.statements)->(as Statements)
      else
        visit( cmd.condition )
        visit( cmd.statements )
      endIf

    method on_visit_children( cmd:ZeroOrMore )
      if ($ReturnType instanceOf Cmd)
        cmd.pattern = visit(cmd.pattern)
      else
        visit( cmd.pattern )
      endIf

    method on_visit_children( cmd:Element )
      if ($ReturnType instanceOf Cmd)
        cmd.routine_defs = visit(cmd.routine_defs)
      else
        visit( cmd.routine_defs )
      endIf

    method on_visit_children( cmd:WriteVar )
      if ($ReturnType instanceOf Cmd)
        cmd.new_value = visit(cmd.new_value)
      else
        visit( cmd.new_value )
      endIf

    method on_visit_children( cmd:WriteBuffer )
      if ($ReturnType instanceOf Cmd)
        cmd.new_value = visit(cmd.new_value)
      else
        visit( cmd.new_value )
      endIf

    method on_visit_children( cmd:LiteralTokenType )
      if ($ReturnType instanceOf Cmd)
        cmd.token_type = visit(cmd.token_type)->(as TokenDef)
      else
        visit( cmd.token_type )
      endIf

    method on_visit_children( cmd:ConsumeToken )
      if ($ReturnType instanceOf Cmd)
        cmd.token_type = visit(cmd.token_type)->(as TokenDef)
      else
        visit( cmd.token_type )
      endIf

    method on_visit_children( cmd:MustConsumeToken )
      if ($ReturnType instanceOf Cmd)
        cmd.token_type = visit(cmd.token_type)->(as TokenDef)
      else
        visit( cmd.token_type )
      endIf

    method on_visit_children( cmd:NextIsTokenType )
      if ($ReturnType instanceOf Cmd)
        cmd.token_type = visit(cmd.token_type)->(as TokenDef)
      else
        visit( cmd.token_type )
      endIf

    method on_visit_children( cmd:ScanCharacters )
      if ($ReturnType instanceOf Cmd)
        cmd.value = visit(cmd.value)
      else
        visit( cmd.value )
      endIf

    method on_visit_children( cmd:ScanPatternCmd )
      if ($ReturnType instanceOf Cmd)
        cmd.pattern = visit(cmd.pattern)
      else
        visit( cmd.pattern )
      endIf

    method on_visit_children( cmd:ConsumeCharacters )
      if ($ReturnType instanceOf Cmd)
        cmd.value = visit(cmd.value)
      else
        visit( cmd.value )
      endIf

    method on_visit_children( cmd:ConsumePattern )
      if ($ReturnType instanceOf Cmd)
        cmd.pattern = visit(cmd.pattern)
      else
        visit( cmd.pattern )
      endIf

    method on_visit_children( cmd:MustConsumeCharacters )
      if ($ReturnType instanceOf Cmd)
        cmd.value = visit(cmd.value)
      else
        visit( cmd.value )
      endIf

    method on_visit_children( cmd:MustConsumePattern )
      if ($ReturnType instanceOf Cmd)
        cmd.pattern = visit(cmd.pattern)
      else
        visit( cmd.pattern )
      endIf

    method on_visit_children( cmd:NextIsCharacters )
      if ($ReturnType instanceOf Cmd)
        cmd.value = visit(cmd.value)
      else
        visit( cmd.value )
      endIf

    method on_visit_children( cmd:NextIsPattern )
      if ($ReturnType instanceOf Cmd)
        cmd.pattern = visit(cmd.pattern)
      else
        visit( cmd.pattern )
      endIf

    method on_visit_children( cmd:ParserProduce )
      if ($ReturnType instanceOf Cmd)
        cmd.arg = visit(cmd.arg)->(as CreateCmd)
      else
        visit( cmd.arg )
      endIf

    method on_visit_children( cmd:ParserDef )
      if ($ReturnType instanceOf Cmd)
        cmd.routine_defs = visit(cmd.routine_defs)
      else
        visit( cmd.routine_defs )
      endIf

    method on_visit_children( cmd:ScannerDef )
      if ($ReturnType instanceOf Cmd)
        cmd.routine_defs = visit(cmd.routine_defs)
      else
        visit( cmd.routine_defs )
      endIf

    method on_visit_children( cmd:TokenDef )
      noAction

    method on_visit_children( cmd:WriteOutput )
      if ($ReturnType instanceOf Cmd)
        cmd.new_value = visit(cmd.new_value)
      else
        visit( cmd.new_value )
      endIf

endClass

class Visitor : Visitor<<Cmd>>
  # Standard tree-rebuilding visitor.
endClass


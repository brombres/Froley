module Simple

class Interpreter : Visitor<<Value>>
  PROPERTIES
    variables = StringTable<<Value>>()

  METHODS
    method on( cmd:Number )->Value
      return cmd.value

    method on( cmd:LiteralString )->Value
      return cmd.value

    method on( cmd:Add )->Value
      return visit(cmd.left) + visit(cmd.right)

    method on( cmd:Subtract )->Value
      return visit(cmd.left) - visit(cmd.right)

    method on( cmd:Multiply )->Value
      return visit(cmd.left) * visit(cmd.right)

    method on( cmd:Divide )->Value
      return visit(cmd.left) / visit(cmd.right)

    method on( cmd:Power )->Value
      return visit(cmd.left) ^ visit(cmd.right)

    method on( cmd:Factorial )->Value
      local result = 1
      result *= (forEach in 2..(visit(cmd.operand)->Int32))
      return result

    method on( cmd:Negate )->Value
      return -visit(cmd.operand)

    method on( cmd:ReadVar )->Value
      local entry = variables.find( cmd.name )
      if (entry) return entry.value
      throw cmd.t.error( "'$' is undefined."(cmd.name) )

    method on_visit( cmd:WriteVar )
      variables[cmd.name] = visit(cmd.new_value)

    method on_visit( cmd:Println )
      print (visit(forEach in cmd.args))
      println

endClass

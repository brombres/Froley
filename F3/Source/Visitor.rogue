# Generated and updated by Froley. Custom changes will not be overwritten; customize as desired.
module F3

class Visitor : Visitor<<Cmd>>
  # Standard tree-rebuilding visitor.
endClass

class Visitor<<$ReturnType>>
  PROPERTIES
    this_element : Element
    this_routine : Routine
    this_match   : Match

  METHODS
    method is_parser->Logical
      return this_element instanceOf ParserDef

    method is_scanner->Logical
      return this_element instanceOf ScannerDef

    method on_enter( cmd:Cmd )
      noAction

    method on_visit( cmd:Cmd )
      noAction

    method on_visit_children( cmd:Cmd )
      noAction

    method on_leave( cmd:Cmd )
      noAction

    method dispatch( cmd:Cmd )->$ReturnType [propagated]
      if ($ReturnType instanceOf Cmd)
        if (cmd is null) return null
      else
        if (cmd is null) return $ReturnType.meta.default_value
      endIf
      return cmd.dispatch<<ThisType,$ReturnType>>( this )

    method enter( cmd:Cmd ) [propagated]
      cmd.dispatch_on_enter<<ThisType>>( this )

    method leave( cmd:Cmd ) [propagated]
      cmd.dispatch_on_leave<<ThisType>>( this )

    method visit_children( cmd:Cmd ) [propagated]
      cmd.dispatch_on_visit_children<<ThisType>>( this )

    method on_visit_children( cmd:CmdList )
      if ($ReturnType instanceOf Cmd)
        forEach (element in writer=cmd.list.rewriter)
          local visited_element = dispatch( element )
          if (visited_element) writer.write( visited_element )
        endForEach
      else
        dispatch( forEach in cmd.list )
      endIf

    method visit( cmd:Cmd )->$ReturnType
      enter( cmd )
      visit_children( cmd )
      leave( cmd )
      if ($ReturnType instanceOf Cmd) return cmd
      else                            return $ReturnType.meta.default_value

    method on_visit_children( cmd:Assign )
      if ($ReturnType instanceOf Cmd)
        if (cmd.target) cmd.target = dispatch(cmd.target)
        if (cmd.new_value) cmd.new_value = dispatch(cmd.new_value)
      else
        if (cmd.target) cmd.target.dispatch(this)
        if (cmd.new_value) cmd.new_value.dispatch(this)
      endIf

    method on_visit_children( cmd:Binary )
      if ($ReturnType instanceOf Cmd)
        if (cmd.left) cmd.left = dispatch(cmd.left)
        if (cmd.right) cmd.right = dispatch(cmd.right)
      else
        if (cmd.left) cmd.left.dispatch(this)
        if (cmd.right) cmd.right.dispatch(this)
      endIf

    method on_visit_children( cmd:Collect )
      if ($ReturnType instanceOf Cmd)
        if (cmd.args) cmd.args = dispatch(cmd.args) as Args
      else
        if (cmd.args) cmd.args.dispatch(this)
      endIf

    method on_visit_children( cmd:CreateCmd )
      if ($ReturnType instanceOf Cmd)
        if (cmd.args) cmd.args = dispatch(cmd.args) as Args
      else
        if (cmd.args) cmd.args.dispatch(this)
      endIf

    method on_visit_children( cmd:CreateCmdArg )
      if ($ReturnType instanceOf Cmd)
        if (cmd.arg_value) cmd.arg_value = dispatch(cmd.arg_value)
      else
        if (cmd.arg_value) cmd.arg_value.dispatch(this)
      endIf

    method on_visit_children( cmd:Decrement )
      if ($ReturnType instanceOf Cmd)
        if (cmd.target) cmd.target = dispatch(cmd.target)
      else
        if (cmd.target) cmd.target.dispatch(this)
      endIf

    method on_visit_children( cmd:ElseIf )
      if ($ReturnType instanceOf Cmd)
        if (cmd.condition) cmd.condition = dispatch(cmd.condition)
        if (cmd.statements) cmd.statements = dispatch(cmd.statements) as Statements
      else
        if (cmd.condition) cmd.condition.dispatch(this)
        if (cmd.statements) cmd.statements.dispatch(this)
      endIf

    method on_visit_children( cmd:ElseOn )
      if ($ReturnType instanceOf Cmd)
        if (cmd.token_type) cmd.token_type = dispatch(cmd.token_type)
        if (cmd.token_types) cmd.token_types = dispatch(cmd.token_types) as Args
        if (cmd.statements) cmd.statements = dispatch(cmd.statements) as Statements
      else
        if (cmd.token_type) cmd.token_type.dispatch(this)
        if (cmd.token_types) cmd.token_types.dispatch(this)
        if (cmd.statements) cmd.statements.dispatch(this)
      endIf

    method on_visit_children( cmd:If )
      if ($ReturnType instanceOf Cmd)
        if (cmd.condition) cmd.condition = dispatch(cmd.condition)
        if (cmd.statements) cmd.statements = dispatch(cmd.statements) as Statements
        if (cmd.else_ifs) cmd.else_ifs = dispatch(cmd.else_ifs)
        if (cmd._else) cmd._else = dispatch(cmd._else) as Statements
      else
        if (cmd.condition) cmd.condition.dispatch(this)
        if (cmd.statements) cmd.statements.dispatch(this)
        if (cmd.else_ifs) cmd.else_ifs.dispatch(this)
        if (cmd._else) cmd._else.dispatch(this)
      endIf

    method on_visit_children( cmd:Increment )
      if ($ReturnType instanceOf Cmd)
        if (cmd.target) cmd.target = dispatch(cmd.target)
      else
        if (cmd.target) cmd.target.dispatch(this)
      endIf

    method visit( cmd:Match )->$ReturnType
      temporarily this_match = cmd
        enter( cmd )
        visit_children( cmd )
        leave( cmd )
      endTemporarily
      if ($ReturnType instanceOf Cmd) return cmd
      else                            return $ReturnType.meta.default_value

    method on_visit_children( cmd:Match )
      if ($ReturnType instanceOf Cmd)
        if (cmd.expression) cmd.expression = dispatch(cmd.expression)
        if (cmd.cases) cmd.cases = dispatch(cmd.cases)
        if (cmd._others) cmd._others = dispatch(cmd._others)
      else
        if (cmd.expression) cmd.expression.dispatch(this)
        if (cmd.cases) cmd.cases.dispatch(this)
        if (cmd._others) cmd._others.dispatch(this)
      endIf

    method on_visit_children( cmd:MatchCase )
      if ($ReturnType instanceOf Cmd)
        if (cmd.expression) cmd.expression = dispatch(cmd.expression)
        if (cmd.statements) cmd.statements = dispatch(cmd.statements)
      else
        if (cmd.expression) cmd.expression.dispatch(this)
        if (cmd.statements) cmd.statements.dispatch(this)
      endIf

    method on_visit_children( cmd:On )
      if ($ReturnType instanceOf Cmd)
        if (cmd.token_type) cmd.token_type = dispatch(cmd.token_type)
        if (cmd.token_types) cmd.token_types = dispatch(cmd.token_types) as Args
        if (cmd.statements) cmd.statements = dispatch(cmd.statements) as Statements
        if (cmd.else_ons) cmd.else_ons = dispatch(cmd.else_ons)
        if (cmd._else_on_others) cmd._else_on_others = dispatch(cmd._else_on_others) as Statements
      else
        if (cmd.token_type) cmd.token_type.dispatch(this)
        if (cmd.token_types) cmd.token_types.dispatch(this)
        if (cmd.statements) cmd.statements.dispatch(this)
        if (cmd.else_ons) cmd.else_ons.dispatch(this)
        if (cmd._else_on_others) cmd._else_on_others.dispatch(this)
      endIf

    method on_visit_children( cmd:OneOrMore )
      if ($ReturnType instanceOf Cmd)
        if (cmd.pattern) cmd.pattern = dispatch(cmd.pattern)
      else
        if (cmd.pattern) cmd.pattern.dispatch(this)
      endIf

    method on_visit_children( cmd:OptionalPattern )
      if ($ReturnType instanceOf Cmd)
        if (cmd.pattern) cmd.pattern = dispatch(cmd.pattern)
      else
        if (cmd.pattern) cmd.pattern.dispatch(this)
      endIf

    method on_visit_children( cmd:ParserConsume )
      if ($ReturnType instanceOf Cmd)
        if (cmd.token_type) cmd.token_type = dispatch(cmd.token_type)
      else
        if (cmd.token_type) cmd.token_type.dispatch(this)
      endIf

    method on_visit_children( cmd:ParserCreate )
      if ($ReturnType instanceOf Cmd)
        if (cmd.arg) cmd.arg = dispatch(cmd.arg) as CreateCmd
      else
        if (cmd.arg) cmd.arg.dispatch(this)
      endIf

    method visit( cmd:ParserDef )->$ReturnType
      temporarily this_element = cmd
        enter( cmd )
        visit_children( cmd )
        leave( cmd )
      endTemporarily
      if ($ReturnType instanceOf Cmd) return cmd
      else                            return $ReturnType.meta.default_value

    method on_visit_children( cmd:ParserMustConsume )
      if ($ReturnType instanceOf Cmd)
        if (cmd.token_type) cmd.token_type = dispatch(cmd.token_type)
      else
        if (cmd.token_type) cmd.token_type.dispatch(this)
      endIf

    method on_visit_children( cmd:ParserNextIs )
      if ($ReturnType instanceOf Cmd)
        if (cmd.token_type) cmd.token_type = dispatch(cmd.token_type)
      else
        if (cmd.token_type) cmd.token_type.dispatch(this)
      endIf

    method on_visit_children( cmd:Print )
      if ($ReturnType instanceOf Cmd)
        if (cmd.args) cmd.args = dispatch(cmd.args) as Args
      else
        if (cmd.args) cmd.args.dispatch(this)
      endIf

    method on_visit_children( cmd:Println )
      if ($ReturnType instanceOf Cmd)
        if (cmd.args) cmd.args = dispatch(cmd.args) as Args
      else
        if (cmd.args) cmd.args.dispatch(this)
      endIf

    method on_visit_children( cmd:ProgramDef )
      if ($ReturnType instanceOf Cmd)
        if (cmd.sections) cmd.sections = dispatch(cmd.sections)
      else
        if (cmd.sections) cmd.sections.dispatch(this)
      endIf

    method on_visit_children( cmd:Return )
      if ($ReturnType instanceOf Cmd)
        if (cmd.value) cmd.value = dispatch(cmd.value)
      else
        if (cmd.value) cmd.value.dispatch(this)
      endIf

    method visit( cmd:Routine )->$ReturnType
      temporarily this_routine = cmd
        enter( cmd )
        visit_children( cmd )
        leave( cmd )
      endTemporarily
      if ($ReturnType instanceOf Cmd) return cmd
      else                            return $ReturnType.meta.default_value

    method on_visit_children( cmd:Routine )
      if ($ReturnType instanceOf Cmd)
        if (cmd.statements) cmd.statements = dispatch(cmd.statements) as Statements
      else
        if (cmd.statements) cmd.statements.dispatch(this)
      endIf

    method on_visit_children( cmd:Scan )
      if ($ReturnType instanceOf Cmd)
        if (cmd.args) cmd.args = dispatch(cmd.args) as SequenceArgs
      else
        if (cmd.args) cmd.args.dispatch(this)
      endIf

    method on_visit_children( cmd:ScannerConsume )
      if ($ReturnType instanceOf Cmd)
        if (cmd.args) cmd.args = dispatch(cmd.args) as SequenceArgs
      else
        if (cmd.args) cmd.args.dispatch(this)
      endIf

    method on_visit_children( cmd:ScannerCreate )
      if ($ReturnType instanceOf Cmd)
        if (cmd.arg) cmd.arg = dispatch(cmd.arg)
      else
        if (cmd.arg) cmd.arg.dispatch(this)
      endIf

    method visit( cmd:ScannerDef )->$ReturnType
      temporarily this_element = cmd
        enter( cmd )
        visit_children( cmd )
        leave( cmd )
      endTemporarily
      if ($ReturnType instanceOf Cmd) return cmd
      else                            return $ReturnType.meta.default_value

    method on_visit_children( cmd:ScannerMustConsume )
      if ($ReturnType instanceOf Cmd)
        if (cmd.args) cmd.args = dispatch(cmd.args) as SequenceArgs
      else
        if (cmd.args) cmd.args.dispatch(this)
      endIf

    method on_visit_children( cmd:ScannerNextIs )
      if ($ReturnType instanceOf Cmd)
        if (cmd.args) cmd.args = dispatch(cmd.args) as SequenceArgs
      else
        if (cmd.args) cmd.args.dispatch(this)
      endIf

    method on_visit_children( cmd:ScannerPeek )
      if ($ReturnType instanceOf Cmd)
        if (cmd.lookahead) cmd.lookahead = dispatch(cmd.lookahead)
      else
        if (cmd.lookahead) cmd.lookahead.dispatch(this)
      endIf

    method on_visit_children( cmd:ThrowSyntaxError )
      if ($ReturnType instanceOf Cmd)
        if (cmd.args) cmd.args = dispatch(cmd.args) as Args
      else
        if (cmd.args) cmd.args.dispatch(this)
      endIf

    method on_visit_children( cmd:TokenGroup )
      if ($ReturnType instanceOf Cmd)
        if (cmd.definitions) cmd.definitions = dispatch(cmd.definitions)
      else
        if (cmd.definitions) cmd.definitions.dispatch(this)
      endIf

    method on_visit_children( cmd:Unary )
      if ($ReturnType instanceOf Cmd)
        if (cmd.operand) cmd.operand = dispatch(cmd.operand)
      else
        if (cmd.operand) cmd.operand.dispatch(this)
      endIf

    method on_visit_children( cmd:While )
      if ($ReturnType instanceOf Cmd)
        if (cmd.condition) cmd.condition = dispatch(cmd.condition)
        if (cmd.statements) cmd.statements = dispatch(cmd.statements) as Statements
      else
        if (cmd.condition) cmd.condition.dispatch(this)
        if (cmd.statements) cmd.statements.dispatch(this)
      endIf

    method on_visit_children( cmd:ZeroOrMore )
      if ($ReturnType instanceOf Cmd)
        if (cmd.pattern) cmd.pattern = dispatch(cmd.pattern)
      else
        if (cmd.pattern) cmd.pattern.dispatch(this)
      endIf

    method on_visit_children( cmd:Element )
      if ($ReturnType instanceOf Cmd)
        if (cmd.routine_defs) cmd.routine_defs = dispatch(cmd.routine_defs)
      else
        if (cmd.routine_defs) cmd.routine_defs.dispatch(this)
      endIf

    method on_visit_children( cmd:WriteVar )
      if ($ReturnType instanceOf Cmd)
        if (cmd.new_value) cmd.new_value = dispatch(cmd.new_value)
      else
        if (cmd.new_value) cmd.new_value.dispatch(this)
      endIf

    method on_visit_children( cmd:WriteBuffer )
      if ($ReturnType instanceOf Cmd)
        if (cmd.new_value) cmd.new_value = dispatch(cmd.new_value)
      else
        if (cmd.new_value) cmd.new_value.dispatch(this)
      endIf

    method on_visit_children( cmd:LiteralTokenType )
      if ($ReturnType instanceOf Cmd)
        if (cmd.token_type) cmd.token_type = dispatch(cmd.token_type) as TokenDef
      else
        if (cmd.token_type) cmd.token_type.dispatch(this)
      endIf

    method on_visit_children( cmd:ConsumeToken )
      if ($ReturnType instanceOf Cmd)
        if (cmd.token_type) cmd.token_type = dispatch(cmd.token_type) as TokenDef
      else
        if (cmd.token_type) cmd.token_type.dispatch(this)
      endIf

    method on_visit_children( cmd:MustConsumeToken )
      if ($ReturnType instanceOf Cmd)
        if (cmd.token_type) cmd.token_type = dispatch(cmd.token_type) as TokenDef
      else
        if (cmd.token_type) cmd.token_type.dispatch(this)
      endIf

    method on_visit_children( cmd:NextIsTokenType )
      if ($ReturnType instanceOf Cmd)
        if (cmd.token_type) cmd.token_type = dispatch(cmd.token_type) as TokenDef
      else
        if (cmd.token_type) cmd.token_type.dispatch(this)
      endIf

    method on_visit_children( cmd:ScanCharacters )
      if ($ReturnType instanceOf Cmd)
        if (cmd.value) cmd.value = dispatch(cmd.value)
      else
        if (cmd.value) cmd.value.dispatch(this)
      endIf

    method on_visit_children( cmd:ScanPatternCmd )
      if ($ReturnType instanceOf Cmd)
        if (cmd.pattern) cmd.pattern = dispatch(cmd.pattern)
      else
        if (cmd.pattern) cmd.pattern.dispatch(this)
      endIf

    method on_visit_children( cmd:ConsumeCharacters )
      if ($ReturnType instanceOf Cmd)
        if (cmd.value) cmd.value = dispatch(cmd.value)
      else
        if (cmd.value) cmd.value.dispatch(this)
      endIf

    method on_visit_children( cmd:ConsumePattern )
      if ($ReturnType instanceOf Cmd)
        if (cmd.pattern) cmd.pattern = dispatch(cmd.pattern)
      else
        if (cmd.pattern) cmd.pattern.dispatch(this)
      endIf

    method on_visit_children( cmd:MustConsumeCharacters )
      if ($ReturnType instanceOf Cmd)
        if (cmd.value) cmd.value = dispatch(cmd.value)
      else
        if (cmd.value) cmd.value.dispatch(this)
      endIf

    method on_visit_children( cmd:MustConsumePattern )
      if ($ReturnType instanceOf Cmd)
        if (cmd.pattern) cmd.pattern = dispatch(cmd.pattern)
      else
        if (cmd.pattern) cmd.pattern.dispatch(this)
      endIf

    method on_visit_children( cmd:NextIsCharacters )
      if ($ReturnType instanceOf Cmd)
        if (cmd.value) cmd.value = dispatch(cmd.value)
      else
        if (cmd.value) cmd.value.dispatch(this)
      endIf

    method on_visit_children( cmd:NextIsPattern )
      if ($ReturnType instanceOf Cmd)
        if (cmd.pattern) cmd.pattern = dispatch(cmd.pattern)
      else
        if (cmd.pattern) cmd.pattern.dispatch(this)
      endIf

    method on_visit_children( cmd:ParserProduce )
      if ($ReturnType instanceOf Cmd)
        if (cmd.arg) cmd.arg = dispatch(cmd.arg) as CreateCmd
      else
        if (cmd.arg) cmd.arg.dispatch(this)
      endIf

endClass

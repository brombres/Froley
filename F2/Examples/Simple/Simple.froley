#-------------------------------------------------------------------------------
tokens
#-------------------------------------------------------------------------------
IDENTIFIER identifier [content]
NUMBER     number     [content]

#-------------------------------------------------------------------------------
tokens Symbols
#-------------------------------------------------------------------------------
SYMBOL_CARET       ^
SYMBOL_CLOSE_PAREN )
SYMBOL_EQUALS      =
SYMBOL_MINUS       -
SYMBOL_OPEN_PAREN  (
SYMBOL_PLUS        +
SYMBOL_SLASH       /
SYMBOL_STAR        *


#-------------------------------------------------------------------------------
scanner
#-------------------------------------------------------------------------------
- main
  consume [ \n\r\t]*  # whitespace

  # single-line comment
  if consume("#" [^\n]*) restart

  if (not hasAnother) halt
  markPosition

  match
    produceAny Symbols
  endMatch

  if (scan([_a-zA-Z][_a-zA-Z0-9]*)) produce IDENTIFIER
  scan_number

  syntaxError

- scan_number
  if (not hasAnother) return

  if (scan [0-9])
    scan_integer
    if (scan '.') scan_integer
    produce NUMBER
  elseIf (scan '.')
    scan_integer
    produce NUMBER
  else
    return
  endIf

- scan_integer
  while hasAnother
    if (not scan([0-9]) and not consume('_'*)) return
  endWhile
  return

#-------------------------------------------------------------------------------
parser
#-------------------------------------------------------------------------------
- expression
  assign

- assign [rightBinary]
  on "=" -> Assign

#- assign
#  term
#  on "=" assign: produce Assign(left,right)

#{
- add_subtract : Binary
  on "+" -> Add
  on "-" -> Subtract

- multiply_divide : Binary
  on "*" -> Multiply
  on "/" -> Divide

- power : Binary
  on "^" -> Power

- pre_unary : PreUnary
  on "-" -> Negate
}#

- term
  on '(' expression ')': return
  on IDENTIFIER -> Access(name=content)
  on NUMBER     -> Number(value=content)
  syntaxError


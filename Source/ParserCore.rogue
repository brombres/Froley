module Froley

# Generated by Froley. WARNING: WILL BE OVERWRITTEN.
$define PARSER_EXISTS true

$include "Cmd.rogue"
$include "FrameStack.rogue"
$include "Scanner.rogue"
$include "Visitor.rogue"

class ParserCore [abstract]
  DEFINITIONS
    ip_program = 0
    ip_section = 1
    ip_type_name = 2
    ip_identifier = 3
    ip_scanner_routines = 4
    ip_routine_name_and_attributes = 5
    ip_token_definitions = 6
    ip_attributes = 7
    ip_symbol = 8
    ip_consume_eols = 9
    ip_consume_eols_and_semicolons = 10
    ip_must_consume_eols = 11
    ip_scanner_multi_line_statements = 12
    ip_scanner_single_line_statements = 13
    ip_scanner_control_structure = 14
    ip_cases = 15
    ip__others = 16
    ip_scanner_multi_line_else_ifs = 17
    ip_scanner_multi_line_else = 18
    ip_scanner_single_line_else_ifs = 19
    ip_scanner_single_line_else = 20
    ip_scanner_statement = 21
    ip_scanner_product = 22
    ip_cmd_args = 23
    ip_cmd_arg = 24
    ip_scanner_args = 25
    ip_scanner_arg_list = 26
    ip_sequence_args = 27
    ip_sequence_arg_list = 28
    ip_pattern_sequence = 29
    ip_sequence_item = 30
    ip_empty_statements = 31
    ip_scanner_expression = 32
    ip_scanner_logical_or = 33
    ip_scanner_logical_or__inner = 34
    ip_scanner_logical_and = 35
    ip_scanner_logical_and__inner = 36
    ip_scanner_comparison = 37
    ip_scanner_comparison__inner = 38
    ip_scanner_add_subtract = 39
    ip_scanner_add_subtract__inner = 40
    ip_scanner_multiply_divide = 41
    ip_scanner_multiply_divide__inner = 42
    ip_scanner_power = 43
    ip_scanner_power__inner = 44
    ip_scanner_pre_unary = 45
    ip_scanner_term = 46
    ip_repeat_count = 47
    ip_parser_routines = 48
    ip_parser_multi_line_statements = 49
    ip_parser_single_line_statements = 50
    ip_parser_control_structure = 51
    ip_on_block = 52
    ip_parser_multi_line_else_ifs = 53
    ip_parser_multi_line_else = 54
    ip_parser_single_line_else_ifs = 55
    ip_parser_single_line_else = 56
    ip_parser_multi_line_else_ons = 57
    ip_parser_multi_line_else_on_others = 58
    ip_parser_single_line_else_ons = 59
    ip_parser_single_line_else_on_others = 60
    ip_parser_statement = 61
    ip_list_type = 62
    ip_parser_args = 63
    ip_parser_arg_list = 64
    ip_ttype_or_literal = 65
    ip_ttype_or_literal_inner = 66
    ip_attr_name_arg = 67
    ip_attribute_name = 68
    ip_token_id = 69
    ip_collect_parse_list = 70
    ip_string_id_or_routine = 71
    ip_parser_product = 72
    ip_parser_expression = 73
    ip_parser_logical_or = 74
    ip_parser_logical_or__inner = 75
    ip_parser_logical_and = 76
    ip_parser_logical_and__inner = 77
    ip_parser_comparison = 78
    ip_parser_comparison__inner = 79
    ip_parser_add_subtract = 80
    ip_parser_add_subtract__inner = 81
    ip_parser_multiply_divide = 82
    ip_parser_multiply_divide__inner = 83
    ip_parser_power = 84
    ip_parser_power__inner = 85
    ip_parser_pre_unary = 86
    ip_parser_term = 87
    ip_additional_node_types = 88

  PROPERTIES
    _tokens          : Token[]
    _position        : Int32
    _limit           : Int32
    _cmd_stack       = Cmd[]
    _token_stack     = FrameStack<<Token>>()
    _list_starts     = Int32[]
    _list_tokens     = Token[]
    _next_t          : Token
    _cur_t           : Token
    _saved_positions = ParserPosition[]
    start_ip         = 0
    ip               = 0
    buffer           = StringBuilder()
    output           = StringBuilder()

    disable_output : Int32

  METHODS
    method init( file:File )
      init( Scanner(file) )

    method init( filepath:String, content:String )
      init( Scanner(filepath,content) )

    method init( scanner:Scanner )
      local tokens = scanner.tokenize
      if (scanner.output.count) print scanner.output; flush
      init( tokens )

    method init( _tokens )
      _position = 0
      _limit = _tokens.count
      _cmd_stack.clear
      _token_stack.clear
      output.clear

    method has_another->Logical
      return _position < _limit

    method parse( ip=null:Int32? )->Cmd
      if (_position == _limit) return null
      if (ip) start_ip = ip.value
      _token_stack.clear
      _list_starts.clear
      _list_tokens.clear
      _next_t = _peek
      _cur_t = _next_t
      _execute( start_ip )
      _on_output_line # flush any buffered output
      if (disable_output) return null
      if (_cmd_stack.count != 1)
        @trace _cmd_stack
        throw _peek.error( "[INTERNAL] Expected exactly one command node remaining on stack." )
      endIf
      return _cmd_stack.remove_last

    method _begin_list
      _list_starts.add( _cmd_stack.count )
      _list_tokens.add( _next_t )

    method _consume( type:TokenType )->Logical
      if (_next_t.type != type) return false
      if (_position < _limit) ++_position; _next_t = _peek
      return true

    method _consume_content( content:String )->Logical
      if (not _next_t.content or _next_t.content != content) return false
      if (_position < _limit) ++_position; _next_t = _peek
      return true

    method _consume_eols
      while (_next_t.type == TokenType.EOL)
        ++_position
        _next_t = _peek
      endWhile

    method _create_token_list
      if (_saved_positions.is_empty)
        throw _peek.error( "[INTERNAL] createTokenList/produceTokenlist without prior savePosition." )
      endIf
      local i1 = _saved_positions.remove_last.position
      local limit = _position
      local list = Token[]( limit - i1 )
      forEach (i in i1..<limit) list.add( _tokens[i] )
      _push( TokenList(_tokens[i1],list), 0 )

    method _describe( type:TokenType )->String
      if (type.symbol[0].is_letter) return type.symbol
      return "'$'" (type.symbol)

    method _discard_list
      if (_list_tokens.is_empty)
        throw _peek.error( "[INTERNAL] discardList without corresponding beginList." )
      endIf
      _list_starts.remove_last
      _list_tokens.remove_last

    method _discard_position
      if (_saved_positions.is_empty)
        throw _peek.error( "[INTERNAL] No savePosition to discard." )
      endIf
      _saved_positions.remove_last

    method _list_t->Token
      if (_list_tokens.is_empty)
        throw _peek.error( "[INTERNAL] createList/produceList without corresponding beginList." )
      endIf
      return _list_tokens.remove_last

    method _must_consume_content( content:String )
      if (_consume_content(content)) return
      local expected = which{ content.contains('\''):content || "'$'"(content.to_escaped_ascii) }
      local next = _describe( _peek.type )
      _throw_syntax_error( "Expected $, found $." (expected,next) )

    method _next_is( content:String )->Logical
      if (not _next_t.content or _next_t.content != content) return false
      if (_position < _limit) ++_position; _next_t = _peek
      return true

    method _on_output_line
      # Default behavior: print out 'output' and clear it. Can override this method.
      print( output ).flush
      output.clear

    method _on_t->Token
     local result = _next_t
     ++_position
     _next_t = _peek
     return result

    method _peek->Token
      if (_position < _limit) return _tokens[ _position ]
      if (_tokens.count) return _tokens.last.cloned( TokenType.EOI )
      return Token( TokenType.EOI, null, null, 0, 0 )

    method _pop_frame
      _token_stack.pop_frame
      _cur_t = _token_stack.pop

    method _push_frame
      _token_stack.push( _cur_t )
      _token_stack.push_frame

    method _push( cmd:Cmd, node_arg_count:Int32 )
      if (node_arg_count) _cmd_stack.discard_from( _cmd_stack.count - node_arg_count )
      _cmd_stack.add( cmd )

    method _push_list( list:Cmd )
      local i1 = _list_starts.remove_last
      list.add( forEach in _cmd_stack from i1 )
      _cmd_stack.discard_from( i1 )
      _cmd_stack.add( list )

    method _read->Token
      local result = _next_t
      if (_position < _limit) ++_position; _next_t = _peek
      return result

    method _restore_position
      if (_saved_positions.is_empty)
        throw _peek.error( "[INTERNAL] No savePosition to restore." )
      endIf
      local pos = _saved_positions.remove_last
      _position = pos.position
      _cmd_stack.discard_from( pos.cmd_stack_count )
      _cur_t = pos.cur_t
      _next_t = _peek

    method _save_position
      _saved_positions.add( ParserPosition(_position,_cmd_stack.count,_cur_t) )

    method _node_arg( relative:Int32 )->Cmd
      local i = _cmd_stack.count + relative
      if (i < 0) throw _peek.error( "[INTERNAL] Not enough nodes on stack to create new Cmd." )
      return _cmd_stack[i]

    method _logical_arg( relative:Int32 )->Logical
      local node = _node_arg( relative )
      if (node is null) return false
      return node->Logical

    method _character_arg( relative:Int32 )->Character
      local node = _node_arg( relative )
      if (node is null) return 0
      return node->Character

    method _integer_arg( relative:Int32 )->Int32
      local node = _node_arg( relative )
      if (node is null) return 0
      return node->Int32

    method _real_arg( relative:Int32 )->Real64
      local node = _node_arg( relative )
      if (node is null) return 0
      return node->Real64

    method _string_arg( relative:Int32 )->String
      local node = _node_arg( relative )
      if (node is null) return null
      return node->String

    method _string_to_Logical( st:String )->Logical
      if (st.equals("false",&ignore_case)) return false
      return st->Logical

    method _string_to_Character( st:String )->Character
      if (st.count == 0) return Character(0)
      return st[0]

    method _string_to_Integer( st:String )->Int32
      return st->Int32

    method _string_to_Real( st:String )->Real64
      return st->Real64

    method _throw_syntax_error( message=null:String, expected=null:TokenType? )
      if (message is null)
        use builder = StringBuilder.pool
          local next = _describe( _peek.type )
          if (expected)
            builder.print "Expected $, found $." (_describe(expected.value),next)
          else
            builder.print "Unexpected $." (next)
          endIf
          message = builder->String
        endUse
      endIf

      throw _peek.error( message )

    method _execute( ip:Int32 )
      _push_frame
      loop
        ++ip
        which (ip-1)
          case ip_program
            _begin_list
            _execute(ip_consume_eols)
            _pop_frame
            while ((_position < _limit))
              _execute(ip_section)
              _pop_frame
              _execute(ip_consume_eols)
              _pop_frame
            endWhile
            if (disable_output)     _discard_list
            else                    _push_list( CmdList(_list_t) )
            if (not disable_output) _push( ProgramDef(_cur_t,_node_arg(-1)), 1 )
            return
          case ip_section
            if (_next_t.type == TokenType.KEYWORD_SCANNER)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( null, 0 )
                _execute(ip_must_consume_eols)
                _pop_frame
                _execute(ip_scanner_routines)
                _pop_frame
                if (not disable_output) _push( ScannerDef(_cur_t,_string_arg(-2),_node_arg(-1)), 2 )
                return
              endTemporarily
            elseIf (_next_t.type == TokenType.KEYWORD_NATIVE_TYPES)
              temporarily _cur_t = _on_t
                _begin_list
                _execute(ip_consume_eols)
                _pop_frame
                while (((_position < _limit) and (not (_next_t.type.attributes & TokenType.ATTRIBUTE_STRUCTURAL)?)))
                  _execute(ip_identifier)
                  _pop_frame
                  _consume(TokenType.SYMBOL_COMMA)
                  _execute(ip_consume_eols)
                  _pop_frame
                endWhile
                if (disable_output)     _discard_list
                else                    _push_list( NativeTypes(_list_t) )
                return
              endTemporarily
            elseIf (_next_t.type == TokenType.KEYWORD_PARSER)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( null, 0 )
                _execute(ip_must_consume_eols)
                _pop_frame
                _execute(ip_parser_routines)
                _pop_frame
                if (not disable_output) _push( ParserDef(_cur_t,_string_arg(-2),_node_arg(-1)), 2 )
                return
              endTemporarily
            elseIf (_next_t.type == TokenType.KEYWORD_TOKENS)
              temporarily _cur_t = _on_t
                if (_consume(TokenType.EOL))
                  if (not disable_output) _push( null, 0 )
                else
                  _execute(ip_identifier)
                  _pop_frame
                endIf
                _execute(ip_token_definitions)
                _pop_frame
                if (not disable_output) _push( TokenGroup(_cur_t,_string_arg(-2),_node_arg(-1)), 2 )
                return
              endTemporarily
            endIf
            _throw_syntax_error
            return
          case ip_type_name
            if (_next_t.type == TokenType.KEYWORD_CHARACTER)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( Identifier(_cur_t,"Character"), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_INTEGER)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( Identifier(_cur_t,"Integer"), 0 )
                return
              endTemporarily
            endIf
            _execute(ip_identifier)
            _pop_frame
            return
          case ip_identifier
            if (_next_t.type == TokenType.IDENTIFIER)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( Identifier(_cur_t,_cur_t.content), 0 )
                return
              endTemporarily
            endIf
            _throw_syntax_error("Identifier expected.")
            return
          case ip_scanner_routines
            _begin_list
            _execute(ip_consume_eols)
            _pop_frame
            while ((_next_t.type == TokenType.SYMBOL_MINUS))
              if (_next_t.type == TokenType.SYMBOL_MINUS)
                temporarily _cur_t = _on_t
                  _execute(ip_routine_name_and_attributes)
                  _pop_frame
                  _execute(ip_scanner_multi_line_statements)
                  _pop_frame
                  if (not disable_output) _push( Routine(_cur_t,_string_arg(-3),_string_arg(-2),_node_arg(-1)->(as Statements)), 3 )
                endTemporarily
              endIf
              _execute(ip_consume_eols)
              _pop_frame
            endWhile
            if (disable_output)     _discard_list
            else                    _push_list( CmdList(_list_t) )
            return
          case ip_routine_name_and_attributes
            _execute(ip_identifier)
            _pop_frame
            if (_next_t.type == TokenType.CHARSET)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( LiteralString(_cur_t,_cur_t.content), 0 )
              endTemporarily
            else
              if (not disable_output) _push( null, 0 )
            endIf
            _execute(ip_must_consume_eols)
            _pop_frame
            return
          case ip_token_definitions
            _begin_list
            _execute(ip_consume_eols)
            _pop_frame
            while (((_position < _limit) and (not (_next_t.type.attributes & TokenType.ATTRIBUTE_STRUCTURAL)?)))
              _execute(ip_identifier)
              _pop_frame
              if ((_next_t.type == TokenType.SYMBOL))
                _execute(ip_symbol)
                _pop_frame
              else
                if (not disable_output) _push( null, 0 )
              endIf
              _execute(ip_attributes)
              _pop_frame
              if (not disable_output) _push( TokenDef(_cur_t,_string_arg(-3),_string_arg(-2),_node_arg(-1)), 3 )
              _execute(ip_consume_eols)
              _pop_frame
            endWhile
            if (disable_output)     _discard_list
            else                    _push_list( CmdList(_list_t) )
            return
          case ip_attributes
            if ((not _consume(TokenType.SYMBOL_OPEN_SQUARE)))
              if (not disable_output) _push( null, 0 )
              return
            endIf
            if (_consume(TokenType.SYMBOL_CLOSE_SQUARE))
              if (not disable_output) _push( null, 0 )
              return
            endIf
            _begin_list
            _execute(ip_identifier)
            _pop_frame
            while ((_consume(TokenType.SYMBOL_COMMA) or (not (_next_t.type == TokenType.SYMBOL_CLOSE_SQUARE))))
              if (((not (_position < _limit)) or (_next_t.type == TokenType.EOL)))
                _throw_syntax_error("Closing ']' expected.")
              endIf
              _execute(ip_identifier)
              _pop_frame
            endWhile
            if (not _consume(TokenType.SYMBOL_CLOSE_SQUARE)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_SQUARE )
            if (disable_output)     _discard_list
            else                    _push_list( CmdList(_list_t) )
            return
          case ip_symbol
            if (_next_t.type == TokenType.SYMBOL)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( Symbol(_cur_t,_cur_t.content), 0 )
                return
              endTemporarily
            endIf
            _throw_syntax_error("Symbol expected.")
            return
          case ip_consume_eols
            while (_consume(TokenType.EOL))
            endWhile
            return
          case ip_consume_eols_and_semicolons
            while ((_consume(TokenType.EOL) or _consume(TokenType.SYMBOL_SEMICOLON)))
            endWhile
            return
          case ip_must_consume_eols
            if (not _consume(TokenType.EOL)) _throw_syntax_error( &expected=TokenType.EOL )
            while (_consume(TokenType.EOL))
            endWhile
            return
          case ip_scanner_multi_line_statements
            _execute(ip_consume_eols_and_semicolons)
            _pop_frame
            if ((not (_position < _limit)))
              _throw_syntax_error
            endIf
            _begin_list
            while (((_position < _limit) and (not ((_next_t.type == TokenType.SYMBOL_MINUS) or (_next_t.type.attributes & TokenType.ATTRIBUTE_STRUCTURAL)?))))
              _execute(ip_scanner_control_structure)
              _pop_frame
              _execute(ip_consume_eols_and_semicolons)
              _pop_frame
            endWhile
            if (disable_output)     _discard_list
            else                    _push_list( Statements(_list_t) )
            return
          case ip_scanner_single_line_statements
            _begin_list
            if (_consume(TokenType.EOL))
              if (disable_output)     _discard_list
              else                    _push_list( Statements(_list_t) )
              return
            endIf
            _execute(ip_scanner_statement)
            _pop_frame
            while (_consume(TokenType.SYMBOL_SEMICOLON))
              _execute(ip_scanner_statement)
              _pop_frame
            endWhile
            _execute(ip_must_consume_eols)
            _pop_frame
            if (disable_output)     _discard_list
            else                    _push_list( Statements(_list_t) )
            return
          case ip_scanner_control_structure
            if (_next_t.type == TokenType.KEYWORD_IF)
              temporarily _cur_t = _on_t
                if (_consume(TokenType.SYMBOL_OPEN_PAREN))
                  _execute(ip_scanner_expression)
                  _pop_frame
                  if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
                else
                  _execute(ip_scanner_expression)
                  _pop_frame
                endIf
                if (_consume(TokenType.EOL))
                  _execute(ip_scanner_multi_line_statements)
                  _pop_frame
                  _execute(ip_scanner_multi_line_else_ifs)
                  _pop_frame
                  _execute(ip_scanner_multi_line_else)
                  _pop_frame
                  if (not _consume(TokenType.KEYWORD_END_IF)) _throw_syntax_error( &expected=TokenType.KEYWORD_END_IF )
                else
                  _execute(ip_scanner_single_line_statements)
                  _pop_frame
                  _execute(ip_scanner_single_line_else_ifs)
                  _pop_frame
                  _execute(ip_scanner_single_line_else)
                  _pop_frame
                endIf
                if (not disable_output) _push( If(_cur_t,_node_arg(-4),_node_arg(-3)->(as Statements),_node_arg(-2),_node_arg(-1)->(as Statements)), 4 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_MATCH)
              temporarily _cur_t = _on_t
                if ((_consume(TokenType.EOL) or _consume(TokenType.KEYWORD_INPUT)))
                  if (not disable_output) _push( null, 0 )
                elseIf (_consume(TokenType.SYMBOL_OPEN_PAREN))
                  if (_consume(TokenType.KEYWORD_INPUT))
                    if (not disable_output) _push( null, 0 )
                  else
                    _execute(ip_scanner_expression)
                    _pop_frame
                  endIf
                  if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
                else
                  _execute(ip_scanner_expression)
                  _pop_frame
                endIf
                _execute(ip_cases)
                _pop_frame
                _execute(ip__others)
                _pop_frame
                if (not _consume(TokenType.KEYWORD_END_MATCH)) _throw_syntax_error( &expected=TokenType.KEYWORD_END_MATCH )
                if (not disable_output) _push( Match(_cur_t,_node_arg(-3),_node_arg(-2),_node_arg(-1)), 3 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_WHILE)
              temporarily _cur_t = _on_t
                if (_consume(TokenType.SYMBOL_OPEN_PAREN))
                  _execute(ip_scanner_expression)
                  _pop_frame
                  if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
                else
                  _execute(ip_scanner_expression)
                  _pop_frame
                endIf
                if (_consume(TokenType.EOL))
                  _execute(ip_scanner_multi_line_statements)
                  _pop_frame
                  if (not _consume(TokenType.KEYWORD_END_WHILE)) _throw_syntax_error( &expected=TokenType.KEYWORD_END_WHILE )
                else
                  _execute(ip_scanner_single_line_statements)
                  _pop_frame
                endIf
                if (not disable_output) _push( While(_cur_t,_node_arg(-2),_node_arg(-1)->(as Statements)), 2 )
                return
              endTemporarily
            endIf
            _execute(ip_scanner_statement)
            _pop_frame
            return
          case ip_cases
            _begin_list
            _execute(ip_consume_eols)
            _pop_frame
            while ((_position < _limit))
              _execute(ip_consume_eols)
              _pop_frame
              if (_next_t.type == TokenType.KEYWORD_CASE)
                temporarily _cur_t = _on_t
                  _execute(ip_scanner_expression)
                  _pop_frame
                  if (_consume(TokenType.SYMBOL_ARROW))
                    _execute(ip_consume_eols)
                    _pop_frame
                    _begin_list
                    _execute(ip_scanner_product)
                    _pop_frame
                    if (not disable_output) _push( ScannerCreate(_cur_t,_node_arg(-1)), 1 )
                    if (not disable_output) _push( null, 0 )
                    if (not disable_output) _push( Restart(_cur_t,_string_arg(-1)), 1 )
                    if (disable_output)     _discard_list
                    else                    _push_list( Statements(_list_t) )
                  else
                    _consume(TokenType.SYMBOL_COLON)
                    _execute(ip_consume_eols)
                    _pop_frame
                    _execute(ip_scanner_multi_line_statements)
                    _pop_frame
                  endIf
                  if (not disable_output) _push( MatchCase(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
                endTemporarily
              elseIf (_next_t.type == TokenType.KEYWORD_PRODUCE_ANY)
                temporarily _cur_t = _on_t
                  _execute(ip_identifier)
                  _pop_frame
                  if (not disable_output) _push( ProduceAny(_cur_t,_string_arg(-1)), 1 )
                endTemporarily
              else
                if (disable_output)     _discard_list
                else                    _push_list( CmdList(_list_t) )
                return
              endIf
            endWhile
            if (disable_output)     _discard_list
            else                    _push_list( CmdList(_list_t) )
            return
          case ip__others
            if (_next_t.type == TokenType.KEYWORD_OTHERS)
              temporarily _cur_t = _on_t
                _consume(TokenType.SYMBOL_COLON)
                _execute(ip_consume_eols)
                _pop_frame
                _execute(ip_scanner_multi_line_statements)
                _pop_frame
              endTemporarily
            else
              if (not disable_output) _push( null, 0 )
            endIf
            return
          case ip_scanner_multi_line_else_ifs
            _begin_list
            while ((_next_t.type == TokenType.KEYWORD_ELSE_IF))
              _save_position
              if (_next_t.type == TokenType.KEYWORD_ELSE_IF)
                temporarily _cur_t = _on_t
                  if (_consume(TokenType.SYMBOL_OPEN_PAREN))
                    _execute(ip_scanner_expression)
                    _pop_frame
                    if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
                  else
                    _execute(ip_scanner_expression)
                    _pop_frame
                  endIf
                  if ((_next_t.type == TokenType.EOL))
                    _discard_position
                  else
                    _restore_position
                    if (disable_output)     _discard_list
                    else                    _push_list( CmdList(_list_t) )
                    return
                  endIf
                  _execute(ip_scanner_multi_line_statements)
                  _pop_frame
                  if (not disable_output) _push( ElseIf(_cur_t,_node_arg(-2),_node_arg(-1)->(as Statements)), 2 )
                endTemporarily
              endIf
            endWhile
            if (disable_output)     _discard_list
            else                    _push_list( CmdList(_list_t) )
            return
          case ip_scanner_multi_line_else
            if ((not (_next_t.type == TokenType.KEYWORD_ELSE)))
              if (not disable_output) _push( null, 0 )
              return
            endIf
            _save_position
            if (_next_t.type == TokenType.KEYWORD_ELSE)
              temporarily _cur_t = _on_t
                if ((not _consume(TokenType.EOL)))
                  _restore_position
                  if (not disable_output) _push( null, 0 )
                  return
                endIf
                _execute(ip_scanner_multi_line_statements)
                _pop_frame
                _discard_position
                return
              endTemporarily
            endIf
            return
          case ip_scanner_single_line_else_ifs
            _begin_list
            while ((_next_t.type == TokenType.KEYWORD_ELSE_IF))
              _save_position
              if (_next_t.type == TokenType.KEYWORD_ELSE_IF)
                temporarily _cur_t = _on_t
                  if (_consume(TokenType.SYMBOL_OPEN_PAREN))
                    _execute(ip_scanner_expression)
                    _pop_frame
                    if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
                  else
                    _execute(ip_scanner_expression)
                    _pop_frame
                  endIf
                  if ((_next_t.type == TokenType.EOL))
                    _restore_position
                    if (disable_output)     _discard_list
                    else                    _push_list( CmdList(_list_t) )
                    return
                  else
                    _discard_position
                  endIf
                  _execute(ip_scanner_single_line_statements)
                  _pop_frame
                  if (not disable_output) _push( ElseIf(_cur_t,_node_arg(-2),_node_arg(-1)->(as Statements)), 2 )
                endTemporarily
              endIf
            endWhile
            if (disable_output)     _discard_list
            else                    _push_list( CmdList(_list_t) )
            return
          case ip_scanner_single_line_else
            if ((not (_next_t.type == TokenType.KEYWORD_ELSE)))
              if (not disable_output) _push( null, 0 )
              return
            endIf
            _save_position
            if (_next_t.type == TokenType.KEYWORD_ELSE)
              temporarily _cur_t = _on_t
                if (_consume(TokenType.EOL))
                  _restore_position
                  if (not disable_output) _push( null, 0 )
                  return
                endIf
                _execute(ip_scanner_single_line_statements)
                _pop_frame
                _discard_position
                return
              endTemporarily
            endIf
            return
          case ip_scanner_statement
            if (_next_t.type == TokenType.KEYWORD_CALL)
              temporarily _cur_t = _on_t
                _execute(ip_identifier)
                _pop_frame
                if (not disable_output) _push( ScannerCallUserMethod(_cur_t,_string_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_COLLECT)
              temporarily _cur_t = _on_t
                _execute(ip_scanner_args)
                _pop_frame
                if (not disable_output) _push( Collect(_cur_t,_node_arg(-1)->(as Args)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_CREATE)
              temporarily _cur_t = _on_t
                _execute(ip_scanner_product)
                _pop_frame
                if (not disable_output) _push( ScannerCreate(_cur_t,_node_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_DISCARD_POSITION)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( DiscardPosition(_cur_t), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_HALT)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( Halt(_cur_t), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_MARK_POSITION)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( MarkPosition(_cur_t), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_MODE)
              temporarily _cur_t = _on_t
                _execute(ip_identifier)
                _pop_frame
                if (not disable_output) _push( Mode(_cur_t,_string_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_MUST_CONSUME)
              temporarily _cur_t = _on_t
                _execute(ip_sequence_args)
                _pop_frame
                if (not disable_output) _push( ScannerMustConsume(_cur_t,_node_arg(-1)->(as SequenceArgs)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_NO_ACTION)
              temporarily _cur_t = _on_t
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_PRINT)
              temporarily _cur_t = _on_t
                _execute(ip_scanner_args)
                _pop_frame
                if (not disable_output) _push( Print(_cur_t,_node_arg(-1)->(as Args)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_PRINTLN)
              temporarily _cur_t = _on_t
                if (((not (_position < _limit)) or (_next_t.type.attributes & TokenType.ATTRIBUTE_STRUCTURAL)?))
                  _begin_list
                  if (disable_output)     _discard_list
                  else                    _push_list( Args(_list_t) )
                else
                  _execute(ip_scanner_args)
                  _pop_frame
                endIf
                if (not disable_output) _push( Println(_cur_t,_node_arg(-1)->(as Args)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_PRODUCE)
              temporarily _cur_t = _on_t
                _execute(ip_scanner_product)
                _pop_frame
                if (not disable_output) _push( ScannerCreate(_cur_t,_node_arg(-1)), 1 )
                if (not disable_output) _push( null, 0 )
                if (not disable_output) _push( Restart(_cur_t,_string_arg(-1)), 1 )
                return
              endTemporarily
            elseIf (_next_t.type == TokenType.SYMBOL_ARROW)
              temporarily _cur_t = _on_t
                _execute(ip_consume_eols)
                _pop_frame
                if (not disable_output) _push( ScannerCreate(_cur_t,_node_arg(-1)), 1 )
                if (not disable_output) _push( null, 0 )
                if (not disable_output) _push( Restart(_cur_t,_string_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_RESTART)
              temporarily _cur_t = _on_t
                if ((_next_t.type == TokenType.EOL))
                  if (not disable_output) _push( null, 0 )
                else
                  _execute(ip_identifier)
                  _pop_frame
                endIf
                if (not disable_output) _push( Restart(_cur_t,_string_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_RESTORE_POSITION)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( RestorePosition(_cur_t), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_RETURN)
              temporarily _cur_t = _on_t
                if ((_next_t.type == TokenType.EOL))
                  if (not disable_output) _push( null, 0 )
                else
                  _throw_syntax_error
                endIf
                if (not disable_output) _push( Return(_cur_t,_node_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_SAVE_POSITION)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( SavePosition(_cur_t), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_SYNTAX_ERROR)
              temporarily _cur_t = _on_t
                if ((_next_t.type == TokenType.EOL))
                  if (not disable_output) _push( null, 0 )
                else
                  _execute(ip_scanner_args)
                  _pop_frame
                endIf
                if (not disable_output) _push( ThrowSyntaxError(_cur_t,_node_arg(-1)->(as Args)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.SYMBOL_PLUS_PLUS)
              temporarily _cur_t = _on_t
                _execute(ip_scanner_expression)
                _pop_frame
                if (not disable_output) _push( Increment(_cur_t,_node_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.SYMBOL_MINUS_MINUS)
              temporarily _cur_t = _on_t
                _execute(ip_scanner_expression)
                _pop_frame
                if (not disable_output) _push( Decrement(_cur_t,_node_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            _execute(ip_scanner_expression)
            _pop_frame
            if (_next_t.type == TokenType.SYMBOL_ASSIGN)
              temporarily _cur_t = _on_t
                _execute(ip_scanner_expression)
                _pop_frame
                if (not disable_output) _push( Assign(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.SYMBOL_PLUS_PLUS)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( Increment(_cur_t,_node_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.SYMBOL_MINUS_MINUS)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( Decrement(_cur_t,_node_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            return
          case ip_scanner_product
            _execute(ip_identifier)
            _pop_frame
            if (not disable_output) _push( Access(_cur_t,_string_arg(-1)), 1 )
            return
          case ip_cmd_args
            _begin_list
            _execute(ip_consume_eols)
            _pop_frame
            if (_consume(TokenType.SYMBOL_CLOSE_PAREN))
              if (disable_output)     _discard_list
              else                    _push_list( Args(_list_t) )
              return
            endIf
            _execute(ip_cmd_arg)
            _pop_frame
            while (_consume(TokenType.SYMBOL_COMMA))
              _execute(ip_consume_eols)
              _pop_frame
              _execute(ip_cmd_arg)
              _pop_frame
              _execute(ip_consume_eols)
              _pop_frame
            endWhile
            if (disable_output)     _discard_list
            else                    _push_list( Args(_list_t) )
            return
          case ip_cmd_arg
            _execute(ip_identifier)
            _pop_frame
            if (_consume(TokenType.SYMBOL_ASSIGN))
              if (_next_t.type == TokenType.IDENTIFIER)
                temporarily _cur_t = _on_t
                  if (not disable_output) _push( Identifier(_cur_t,_cur_t.content), 0 )
                endTemporarily
              elseIf (_next_t.type == TokenType.STRING)
                temporarily _cur_t = _on_t
                  if (not disable_output) _push( LiteralString(_cur_t,_cur_t.content), 0 )
                endTemporarily
              else
                _throw_syntax_error("Content or \"quoted expression\" expected.")
              endIf
            else
              if (not disable_output) _push( null, 0 )
            endIf
            if (_consume(TokenType.SYMBOL_COLON))
              _execute(ip_type_name)
              _pop_frame
            else
              if (not disable_output) _push( null, 0 )
            endIf
            if (not disable_output) _push( CreateCmdArg(_cur_t,_string_arg(-3),_node_arg(-2),_string_arg(-1)), 3 )
            return
          case ip_scanner_args
            if (_consume(TokenType.SYMBOL_OPEN_PAREN))
              _execute(ip_consume_eols)
              _pop_frame
              _execute(ip_scanner_arg_list)
              _pop_frame
              _execute(ip_consume_eols)
              _pop_frame
              if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
            else
              _execute(ip_scanner_arg_list)
              _pop_frame
            endIf
            return
          case ip_scanner_arg_list
            _begin_list
            if ((_next_t.type.attributes & TokenType.ATTRIBUTE_STRUCTURAL)?)
              if (disable_output)     _discard_list
              else                    _push_list( Args(_list_t) )
              return
            endIf
            _execute(ip_scanner_expression)
            _pop_frame
            while ((_position < _limit))
              if (_consume(TokenType.SYMBOL_COMMA))
                _execute(ip_consume_eols)
                _pop_frame
                _execute(ip_scanner_expression)
                _pop_frame
              elseIf (((_next_t.type == TokenType.EOL) or (_next_t.type.attributes & TokenType.ATTRIBUTE_STRUCTURAL)?))
                if (disable_output)     _discard_list
                else                    _push_list( Args(_list_t) )
                return
              else
                _execute(ip_scanner_expression)
                _pop_frame
              endIf
            endWhile
            if (disable_output)     _discard_list
            else                    _push_list( Args(_list_t) )
            return
          case ip_sequence_args
            if (_consume(TokenType.SYMBOL_OPEN_PAREN))
              _execute(ip_consume_eols)
              _pop_frame
              _execute(ip_sequence_arg_list)
              _pop_frame
              _execute(ip_consume_eols)
              _pop_frame
              if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
            else
              _execute(ip_sequence_arg_list)
              _pop_frame
            endIf
            return
          case ip_sequence_arg_list
            _begin_list
            if ((_next_t.type.attributes & TokenType.ATTRIBUTE_STRUCTURAL)?)
              if (disable_output)     _discard_list
              else                    _push_list( SequenceArgs(_list_t) )
              return
            endIf
            _execute(ip_scanner_expression)
            _pop_frame
            while ((_position < _limit))
              if (_consume(TokenType.SYMBOL_COMMA))
                _execute(ip_consume_eols)
                _pop_frame
                _execute(ip_scanner_expression)
                _pop_frame
              elseIf (((_next_t.type == TokenType.EOL) or (_next_t.type.attributes & TokenType.ATTRIBUTE_STRUCTURAL)?))
                if (disable_output)     _discard_list
                else                    _push_list( SequenceArgs(_list_t) )
                return
              else
                _execute(ip_scanner_expression)
                _pop_frame
              endIf
            endWhile
            if (disable_output)     _discard_list
            else                    _push_list( SequenceArgs(_list_t) )
            return
          case ip_pattern_sequence
            _begin_list
            if ((_next_t.type.attributes & TokenType.ATTRIBUTE_STRUCTURAL)?)
              if (disable_output)     _discard_list
              else                    _push_list( PatternSequence(_list_t) )
              return
            endIf
            _execute(ip_sequence_item)
            _pop_frame
            while ((_position < _limit))
              if (_consume(TokenType.SYMBOL_STAR))
                if (not disable_output) _push( ZeroOrMore(_cur_t,_node_arg(-1)), 1 )
              elseIf (_consume(TokenType.SYMBOL_PLUS))
                if (not disable_output) _push( OneOrMore(_cur_t,_node_arg(-1)), 1 )
              elseIf (_consume(TokenType.SYMBOL_QUESTION))
                if (not disable_output) _push( OptionalPattern(_cur_t,_node_arg(-1)), 1 )
              elseIf (_consume(TokenType.SYMBOL_COMMA))
                _execute(ip_consume_eols)
                _pop_frame
                _execute(ip_sequence_item)
                _pop_frame
              elseIf (((_next_t.type == TokenType.EOL) or (_next_t.type.attributes & TokenType.ATTRIBUTE_STRUCTURAL)?))
                if (disable_output)     _discard_list
                else                    _push_list( PatternSequence(_list_t) )
                return
              else
                _execute(ip_sequence_item)
                _pop_frame
              endIf
            endWhile
            if (disable_output)     _discard_list
            else                    _push_list( PatternSequence(_list_t) )
            return
          case ip_sequence_item
            if (_next_t.type == TokenType.SYMBOL_OPEN_CURLY)
              temporarily _cur_t = _on_t
                _execute(ip_pattern_sequence)
                _pop_frame
                if (not _consume(TokenType.SYMBOL_CLOSE_CURLY)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_CURLY )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.CHARSET)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( CharSet(_cur_t,_cur_t.content), 0 )
                _execute(ip_repeat_count)
                _pop_frame
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.STRING)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( LiteralString(_cur_t,_cur_t.content), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.STRING_OR_CHARACTER)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( LiteralStringOrCharacter(_cur_t,_cur_t.content), 0 )
                return
              endTemporarily
            endIf
            _throw_syntax_error
            return
          case ip_empty_statements
            _begin_list
            if (disable_output)     _discard_list
            else                    _push_list( Statements(_list_t) )
            return
          case ip_scanner_expression
            _execute(ip_scanner_logical_or)
            _pop_frame
            return
          case ip_scanner_logical_or
            _execute(ip_scanner_logical_and)
            _pop_frame
            _execute(ip_scanner_logical_or__inner)
            _pop_frame
            return
          case ip_scanner_logical_or__inner
            if (_next_t.type == TokenType.KEYWORD_OR)
              temporarily _cur_t = _on_t
                _consume_eols
                _execute(ip_scanner_logical_and)
                _pop_frame
                if (not disable_output) _push( LogicalOr(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
                _execute(ip_scanner_logical_or__inner)
                _pop_frame
                return
              endTemporarily
            endIf
            return
          case ip_scanner_logical_and
            _execute(ip_scanner_comparison)
            _pop_frame
            _execute(ip_scanner_logical_and__inner)
            _pop_frame
            return
          case ip_scanner_logical_and__inner
            if (_next_t.type == TokenType.KEYWORD_AND)
              temporarily _cur_t = _on_t
                _consume_eols
                _execute(ip_scanner_comparison)
                _pop_frame
                if (not disable_output) _push( LogicalAnd(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
                _execute(ip_scanner_logical_and__inner)
                _pop_frame
                return
              endTemporarily
            endIf
            return
          case ip_scanner_comparison
            _execute(ip_scanner_add_subtract)
            _pop_frame
            _execute(ip_scanner_comparison__inner)
            _pop_frame
            return
          case ip_scanner_comparison__inner
            if (_next_t.type == TokenType.SYMBOL_EQ)
              temporarily _cur_t = _on_t
                _consume_eols
                _execute(ip_scanner_add_subtract)
                _pop_frame
                if (not disable_output) _push( CompareEQ(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
                _execute(ip_scanner_comparison__inner)
                _pop_frame
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.SYMBOL_NE)
              temporarily _cur_t = _on_t
                _consume_eols
                _execute(ip_scanner_add_subtract)
                _pop_frame
                if (not disable_output) _push( CompareNE(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
                _execute(ip_scanner_comparison__inner)
                _pop_frame
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.SYMBOL_LT)
              temporarily _cur_t = _on_t
                _consume_eols
                _execute(ip_scanner_add_subtract)
                _pop_frame
                if (not disable_output) _push( CompareLT(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
                _execute(ip_scanner_comparison__inner)
                _pop_frame
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.SYMBOL_GT)
              temporarily _cur_t = _on_t
                _consume_eols
                _execute(ip_scanner_add_subtract)
                _pop_frame
                if (not disable_output) _push( CompareGT(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
                _execute(ip_scanner_comparison__inner)
                _pop_frame
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.SYMBOL_LE)
              temporarily _cur_t = _on_t
                _consume_eols
                _execute(ip_scanner_add_subtract)
                _pop_frame
                if (not disable_output) _push( CompareLE(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
                _execute(ip_scanner_comparison__inner)
                _pop_frame
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.SYMBOL_GE)
              temporarily _cur_t = _on_t
                _consume_eols
                _execute(ip_scanner_add_subtract)
                _pop_frame
                if (not disable_output) _push( CompareGE(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
                _execute(ip_scanner_comparison__inner)
                _pop_frame
                return
              endTemporarily
            endIf
            return
          case ip_scanner_add_subtract
            _execute(ip_scanner_multiply_divide)
            _pop_frame
            _execute(ip_scanner_add_subtract__inner)
            _pop_frame
            return
          case ip_scanner_add_subtract__inner
            if (_next_t.type == TokenType.SYMBOL_PLUS)
              temporarily _cur_t = _on_t
                _consume_eols
                _execute(ip_scanner_multiply_divide)
                _pop_frame
                if (not disable_output) _push( Add(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
                _execute(ip_scanner_add_subtract__inner)
                _pop_frame
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.SYMBOL_MINUS)
              temporarily _cur_t = _on_t
                _consume_eols
                _execute(ip_scanner_multiply_divide)
                _pop_frame
                if (not disable_output) _push( Subtract(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
                _execute(ip_scanner_add_subtract__inner)
                _pop_frame
                return
              endTemporarily
            endIf
            return
          case ip_scanner_multiply_divide
            _execute(ip_scanner_power)
            _pop_frame
            _execute(ip_scanner_multiply_divide__inner)
            _pop_frame
            return
          case ip_scanner_multiply_divide__inner
            if (_next_t.type == TokenType.SYMBOL_STAR)
              temporarily _cur_t = _on_t
                _consume_eols
                _execute(ip_scanner_power)
                _pop_frame
                if (not disable_output) _push( Multiply(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
                _execute(ip_scanner_multiply_divide__inner)
                _pop_frame
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.SYMBOL_SLASH)
              temporarily _cur_t = _on_t
                _consume_eols
                _execute(ip_scanner_power)
                _pop_frame
                if (not disable_output) _push( Divide(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
                _execute(ip_scanner_multiply_divide__inner)
                _pop_frame
                return
              endTemporarily
            endIf
            return
          case ip_scanner_power
            _execute(ip_scanner_pre_unary)
            _pop_frame
            _execute(ip_scanner_power__inner)
            _pop_frame
            return
          case ip_scanner_power__inner
            if (_next_t.type == TokenType.SYMBOL_CARET)
              temporarily _cur_t = _on_t
                _consume_eols
                _execute(ip_scanner_pre_unary)
                _pop_frame
                if (not disable_output) _push( Power(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
                _execute(ip_scanner_power__inner)
                _pop_frame
                return
              endTemporarily
            endIf
            return
          case ip_scanner_pre_unary
            if (_next_t.type == TokenType.SYMBOL_MINUS)
              temporarily _cur_t = _on_t
                _consume_eols
                _execute(ip_scanner_pre_unary)
                _pop_frame
                if (not disable_output) _push( Negate(_cur_t,_node_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_NOT)
              temporarily _cur_t = _on_t
                _consume_eols
                _execute(ip_scanner_pre_unary)
                _pop_frame
                if (not disable_output) _push( LogicalNot(_cur_t,_node_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            _execute(ip_scanner_term)
            _pop_frame
            return
          case ip_scanner_term
            if (_next_t.type == TokenType.SYMBOL_OPEN_PAREN)
              temporarily _cur_t = _on_t
                _execute(ip_scanner_expression)
                _pop_frame
                if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.SYMBOL_OPEN_CURLY)
              temporarily _cur_t = _on_t
                _execute(ip_pattern_sequence)
                _pop_frame
                if (not _consume(TokenType.SYMBOL_CLOSE_CURLY)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_CURLY )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_BUFFER)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( ReadBuffer(_cur_t), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_CHARACTER)
              temporarily _cur_t = _on_t
                if (not _consume(TokenType.SYMBOL_OPEN_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_OPEN_PAREN )
                _execute(ip_scanner_expression)
                _pop_frame
                if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
                if (not disable_output) _push( CastToCharacter(_cur_t,_node_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_INTEGER)
              temporarily _cur_t = _on_t
                if (not _consume(TokenType.SYMBOL_OPEN_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_OPEN_PAREN )
                _execute(ip_scanner_expression)
                _pop_frame
                if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
                if (not disable_output) _push( CastToInteger(_cur_t,_node_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_CONSUME)
              temporarily _cur_t = _on_t
                _execute(ip_sequence_args)
                _pop_frame
                if (not disable_output) _push( ScannerConsume(_cur_t,_node_arg(-1)->(as SequenceArgs)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_FALSE)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( LiteralLogical(_cur_t,_string_to_Logical("false")), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_HAS_NEXT)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( ScannerHasAnother(_cur_t), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_NEXT_IS)
              temporarily _cur_t = _on_t
                _execute(ip_sequence_args)
                _pop_frame
                if (not disable_output) _push( ScannerNextIs(_cur_t,_node_arg(-1)->(as SequenceArgs)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_OUTPUT)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( ReadOutput(_cur_t), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_PEEK)
              temporarily _cur_t = _on_t
                if (_consume(TokenType.SYMBOL_OPEN_PAREN))
                  _execute(ip_scanner_expression)
                  _pop_frame
                  if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
                else
                  if (not disable_output) _push( null, 0 )
                endIf
                if (not disable_output) _push( ScannerPeek(_cur_t,_node_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_READ)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( ScannerRead(_cur_t), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_SCAN)
              temporarily _cur_t = _on_t
                _execute(ip_sequence_args)
                _pop_frame
                if (not disable_output) _push( Scan(_cur_t,_node_arg(-1)->(as SequenceArgs)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_TRUE)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( LiteralLogical(_cur_t,_string_to_Logical("true")), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.CHARSET)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( CharSet(_cur_t,_cur_t.content), 0 )
                _execute(ip_repeat_count)
                _pop_frame
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.IDENTIFIER)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( Access(_cur_t,_cur_t.content), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.INTEGER)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( LiteralInteger(_cur_t,_string_to_Integer(_cur_t.content)), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.STRING)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( LiteralString(_cur_t,_cur_t.content), 0 )
                _execute(ip_repeat_count)
                _pop_frame
                return
              endTemporarily
            elseIf (_next_t.type == TokenType.STRING_OR_CHARACTER)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( LiteralStringOrCharacter(_cur_t,_cur_t.content), 0 )
                _execute(ip_repeat_count)
                _pop_frame
                return
              endTemporarily
            endIf
            _throw_syntax_error
            return
          case ip_repeat_count
            if (_next_t.type == TokenType.SYMBOL_STAR)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( ZeroOrMore(_cur_t,_node_arg(-1)), 1 )
                return
              endTemporarily
            elseIf (_next_t.type == TokenType.SYMBOL_PLUS)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( OneOrMore(_cur_t,_node_arg(-1)), 1 )
                return
              endTemporarily
            elseIf (_next_t.type == TokenType.SYMBOL_QUESTION)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( OptionalPattern(_cur_t,_node_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            return
          case ip_parser_routines
            _begin_list
            _execute(ip_consume_eols)
            _pop_frame
            while ((_next_t.type == TokenType.SYMBOL_MINUS))
              if (_next_t.type == TokenType.SYMBOL_MINUS)
                temporarily _cur_t = _on_t
                  _execute(ip_routine_name_and_attributes)
                  _pop_frame
                  _execute(ip_parser_multi_line_statements)
                  _pop_frame
                  if (not disable_output) _push( Routine(_cur_t,_string_arg(-3),_string_arg(-2),_node_arg(-1)->(as Statements)), 3 )
                endTemporarily
              endIf
              _execute(ip_consume_eols)
              _pop_frame
            endWhile
            if (disable_output)     _discard_list
            else                    _push_list( CmdList(_list_t) )
            return
          case ip_parser_multi_line_statements
            _execute(ip_consume_eols_and_semicolons)
            _pop_frame
            if ((not (_position < _limit)))
              _throw_syntax_error
            endIf
            _begin_list
            while (((_position < _limit) and (not ((_next_t.type == TokenType.SYMBOL_MINUS) or (_next_t.type.attributes & TokenType.ATTRIBUTE_STRUCTURAL)?))))
              _execute(ip_parser_control_structure)
              _pop_frame
              _execute(ip_consume_eols_and_semicolons)
              _pop_frame
            endWhile
            if (disable_output)     _discard_list
            else                    _push_list( Statements(_list_t) )
            return
          case ip_parser_single_line_statements
            _begin_list
            if (_consume(TokenType.EOL))
              if (disable_output)     _discard_list
              else                    _push_list( Statements(_list_t) )
              return
            endIf
            _execute(ip_parser_statement)
            _pop_frame
            while (_consume(TokenType.SYMBOL_SEMICOLON))
              _execute(ip_parser_statement)
              _pop_frame
            endWhile
            _execute(ip_must_consume_eols)
            _pop_frame
            if (disable_output)     _discard_list
            else                    _push_list( Statements(_list_t) )
            return
          case ip_parser_control_structure
            if (_next_t.type == TokenType.KEYWORD_IF)
              temporarily _cur_t = _on_t
                if (_consume(TokenType.SYMBOL_OPEN_PAREN))
                  _execute(ip_parser_expression)
                  _pop_frame
                  if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
                else
                  _execute(ip_parser_expression)
                  _pop_frame
                endIf
                if (_consume(TokenType.EOL))
                  _execute(ip_parser_multi_line_statements)
                  _pop_frame
                  _execute(ip_parser_multi_line_else_ifs)
                  _pop_frame
                  _execute(ip_parser_multi_line_else)
                  _pop_frame
                  if (not _consume(TokenType.KEYWORD_END_IF)) _throw_syntax_error( &expected=TokenType.KEYWORD_END_IF )
                else
                  _execute(ip_parser_single_line_statements)
                  _pop_frame
                  _execute(ip_parser_single_line_else_ifs)
                  _pop_frame
                  _execute(ip_parser_single_line_else)
                  _pop_frame
                endIf
                if (not disable_output) _push( If(_cur_t,_node_arg(-4),_node_arg(-3)->(as Statements),_node_arg(-2),_node_arg(-1)->(as Statements)), 4 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_ON)
              temporarily _cur_t = _on_t
                _execute(ip_on_block)
                _pop_frame
                if (not disable_output) _push( On(_cur_t,_node_arg(-5),_node_arg(-4)->(as Args),_node_arg(-3)->(as Statements),_node_arg(-2),_node_arg(-1)->(as Statements)), 5 )
                return
              endTemporarily
            elseIf (_next_t.type == TokenType.KEYWORD_ON_PEEK)
              temporarily _cur_t = _on_t
                _execute(ip_on_block)
                _pop_frame
                if (not disable_output) _push( On(_cur_t,_node_arg(-5),_node_arg(-4)->(as Args),_node_arg(-3)->(as Statements),_node_arg(-2),_node_arg(-1)->(as Statements),_string_to_Logical("true")), 5 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_WHILE)
              temporarily _cur_t = _on_t
                if (_consume(TokenType.SYMBOL_OPEN_PAREN))
                  _execute(ip_parser_expression)
                  _pop_frame
                  if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
                else
                  _execute(ip_parser_expression)
                  _pop_frame
                endIf
                if (_consume(TokenType.EOL))
                  _execute(ip_parser_multi_line_statements)
                  _pop_frame
                  if (not _consume(TokenType.KEYWORD_END_WHILE)) _throw_syntax_error( &expected=TokenType.KEYWORD_END_WHILE )
                else
                  _execute(ip_parser_single_line_statements)
                  _pop_frame
                endIf
                if (not disable_output) _push( While(_cur_t,_node_arg(-2),_node_arg(-1)->(as Statements)), 2 )
                return
              endTemporarily
            endIf
            _execute(ip_parser_statement)
            _pop_frame
            return
          case ip_on_block
            _execute(ip_ttype_or_literal)
            _pop_frame
            _execute(ip_collect_parse_list)
            _pop_frame
            if (_consume(TokenType.EOL))
              _execute(ip_parser_multi_line_statements)
              _pop_frame
              _execute(ip_parser_multi_line_else_ons)
              _pop_frame
              _execute(ip_parser_multi_line_else_on_others)
              _pop_frame
              if (not _consume(TokenType.KEYWORD_END_ON)) _throw_syntax_error( &expected=TokenType.KEYWORD_END_ON )
            else
              _consume(TokenType.SYMBOL_COLON)
              _execute(ip_parser_single_line_statements)
              _pop_frame
              _execute(ip_parser_single_line_else_ons)
              _pop_frame
              _execute(ip_parser_single_line_else_on_others)
              _pop_frame
            endIf
            return
          case ip_parser_multi_line_else_ifs
            _begin_list
            while ((_next_t.type == TokenType.KEYWORD_ELSE_IF))
              _save_position
              if (_next_t.type == TokenType.KEYWORD_ELSE_IF)
                temporarily _cur_t = _on_t
                  if (_consume(TokenType.SYMBOL_OPEN_PAREN))
                    _execute(ip_parser_expression)
                    _pop_frame
                    if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
                  else
                    _execute(ip_parser_expression)
                    _pop_frame
                  endIf
                  if ((_next_t.type == TokenType.EOL))
                    _discard_position
                  else
                    _restore_position
                    if (disable_output)     _discard_list
                    else                    _push_list( CmdList(_list_t) )
                    return
                  endIf
                  _execute(ip_parser_multi_line_statements)
                  _pop_frame
                  if (not disable_output) _push( ElseIf(_cur_t,_node_arg(-2),_node_arg(-1)->(as Statements)), 2 )
                endTemporarily
              endIf
            endWhile
            if (disable_output)     _discard_list
            else                    _push_list( CmdList(_list_t) )
            return
          case ip_parser_multi_line_else
            if ((not (_next_t.type == TokenType.KEYWORD_ELSE)))
              if (not disable_output) _push( null, 0 )
              return
            endIf
            _save_position
            if (_next_t.type == TokenType.KEYWORD_ELSE)
              temporarily _cur_t = _on_t
                if ((not _consume(TokenType.EOL)))
                  _restore_position
                  if (not disable_output) _push( null, 0 )
                  return
                endIf
                _execute(ip_parser_multi_line_statements)
                _pop_frame
                _discard_position
                return
              endTemporarily
            endIf
            return
          case ip_parser_single_line_else_ifs
            _begin_list
            while ((_next_t.type == TokenType.KEYWORD_ELSE_IF))
              _save_position
              if (_next_t.type == TokenType.KEYWORD_ELSE_IF)
                temporarily _cur_t = _on_t
                  if (_consume(TokenType.SYMBOL_OPEN_PAREN))
                    _execute(ip_parser_expression)
                    _pop_frame
                    if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
                  else
                    _execute(ip_parser_expression)
                    _pop_frame
                  endIf
                  if ((_next_t.type == TokenType.EOL))
                    _restore_position
                    if (disable_output)     _discard_list
                    else                    _push_list( CmdList(_list_t) )
                    return
                  else
                    _discard_position
                  endIf
                  _execute(ip_parser_single_line_statements)
                  _pop_frame
                  if (not disable_output) _push( ElseIf(_cur_t,_node_arg(-2),_node_arg(-1)->(as Statements)), 2 )
                endTemporarily
              endIf
            endWhile
            if (disable_output)     _discard_list
            else                    _push_list( CmdList(_list_t) )
            return
          case ip_parser_single_line_else
            if ((not (_next_t.type == TokenType.KEYWORD_ELSE)))
              if (not disable_output) _push( null, 0 )
              return
            endIf
            _save_position
            if (_next_t.type == TokenType.KEYWORD_ELSE)
              temporarily _cur_t = _on_t
                if (_consume(TokenType.EOL))
                  _restore_position
                  if (not disable_output) _push( null, 0 )
                  return
                endIf
                _execute(ip_parser_single_line_statements)
                _pop_frame
                _discard_position
                return
              endTemporarily
            endIf
            return
          case ip_parser_multi_line_else_ons
            _begin_list
            while (((_next_t.type == TokenType.KEYWORD_ELSE_ON) or (_next_t.type == TokenType.KEYWORD_ELSE_ON_PEEK)))
              _save_position
              if (_next_t.type == TokenType.KEYWORD_ELSE_ON)
                temporarily _cur_t = _on_t
                  _execute(ip_token_id)
                  _pop_frame
                  _execute(ip_collect_parse_list)
                  _pop_frame
                  if ((_next_t.type == TokenType.EOL))
                    _discard_position
                  else
                    _restore_position
                    if (disable_output)     _discard_list
                    else                    _push_list( CmdList(_list_t) )
                    return
                  endIf
                  _execute(ip_parser_multi_line_statements)
                  _pop_frame
                  if (not disable_output) _push( ElseOn(_cur_t,_node_arg(-3),_node_arg(-2)->(as Args),_node_arg(-1)->(as Statements)), 3 )
                endTemporarily
              elseIf (_next_t.type == TokenType.KEYWORD_ELSE_ON_PEEK)
                temporarily _cur_t = _on_t
                  _execute(ip_token_id)
                  _pop_frame
                  _execute(ip_collect_parse_list)
                  _pop_frame
                  if ((_next_t.type == TokenType.EOL))
                    _discard_position
                  else
                    _restore_position
                    if (disable_output)     _discard_list
                    else                    _push_list( CmdList(_list_t) )
                    return
                  endIf
                  _execute(ip_parser_multi_line_statements)
                  _pop_frame
                  if (not disable_output) _push( ElseOn(_cur_t,_node_arg(-3),_node_arg(-2)->(as Args),_node_arg(-1)->(as Statements),_string_to_Logical("true")), 3 )
                endTemporarily
              endIf
            endWhile
            if (disable_output)     _discard_list
            else                    _push_list( CmdList(_list_t) )
            return
          case ip_parser_multi_line_else_on_others
            if ((not (_next_t.type == TokenType.KEYWORD_ELSE_OTHERS)))
              if (not disable_output) _push( null, 0 )
              return
            endIf
            _save_position
            if (_next_t.type == TokenType.KEYWORD_ELSE_OTHERS)
              temporarily _cur_t = _on_t
                if ((not _consume(TokenType.EOL)))
                  _restore_position
                  if (not disable_output) _push( null, 0 )
                  return
                endIf
                _execute(ip_parser_multi_line_statements)
                _pop_frame
                _discard_position
                return
              endTemporarily
            endIf
            return
          case ip_parser_single_line_else_ons
            _begin_list
            while ((_next_t.type == TokenType.KEYWORD_ELSE_ON))
              _save_position
              if (_next_t.type == TokenType.KEYWORD_ELSE_ON)
                temporarily _cur_t = _on_t
                  _execute(ip_token_id)
                  _pop_frame
                  _execute(ip_collect_parse_list)
                  _pop_frame
                  if ((_next_t.type == TokenType.EOL))
                    _restore_position
                    if (disable_output)     _discard_list
                    else                    _push_list( CmdList(_list_t) )
                    return
                  else
                    _discard_position
                  endIf
                  _consume(TokenType.SYMBOL_COLON)
                  _execute(ip_parser_single_line_statements)
                  _pop_frame
                  if (not disable_output) _push( ElseOn(_cur_t,_node_arg(-3),_node_arg(-2)->(as Args),_node_arg(-1)->(as Statements)), 3 )
                endTemporarily
              endIf
            endWhile
            if (disable_output)     _discard_list
            else                    _push_list( CmdList(_list_t) )
            return
          case ip_parser_single_line_else_on_others
            if ((not (_next_t.type == TokenType.KEYWORD_ELSE_OTHERS)))
              if (not disable_output) _push( null, 0 )
              return
            endIf
            _save_position
            if (_next_t.type == TokenType.KEYWORD_ELSE_OTHERS)
              temporarily _cur_t = _on_t
                if (_consume(TokenType.EOL))
                  _restore_position
                  if (not disable_output) _push( null, 0 )
                  return
                endIf
                _consume(TokenType.SYMBOL_COLON)
                _execute(ip_parser_single_line_statements)
                _pop_frame
                _discard_position
                return
              endTemporarily
            endIf
            return
          case ip_parser_statement
            if (_next_t.type == TokenType.KEYWORD_BEGIN_LIST)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( BeginList(_cur_t), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_CALL)
              temporarily _cur_t = _on_t
                _execute(ip_identifier)
                _pop_frame
                if (not disable_output) _push( ParserCallUserMethod(_cur_t,_string_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_CREATE)
              temporarily _cur_t = _on_t
                _execute(ip_parser_product)
                _pop_frame
                if (not disable_output) _push( ParserCreate(_cur_t,_node_arg(-1)->(as CreateCmd)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_CREATE_LIST)
              temporarily _cur_t = _on_t
                _execute(ip_list_type)
                _pop_frame
                if (not disable_output) _push( CreateList(_cur_t,_string_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_CREATE_NULL)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( CreateNull(_cur_t), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_CREATE_TOKEN_LIST)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( CreateTokenList(_cur_t), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_DISCARD_LIST)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( DiscardList(_cur_t), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_DISCARD_POSITION)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( DiscardPosition(_cur_t), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_MUST_CONSUME)
              temporarily _cur_t = _on_t
                _execute(ip_ttype_or_literal)
                _pop_frame
                if (not disable_output) _push( ParserMustConsume(_cur_t,_node_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_NO_ACTION)
              temporarily _cur_t = _on_t
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_PRINT)
              temporarily _cur_t = _on_t
                _execute(ip_parser_args)
                _pop_frame
                if (not disable_output) _push( Print(_cur_t,_node_arg(-1)->(as Args)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_PRINTLN)
              temporarily _cur_t = _on_t
                if (((not (_position < _limit)) or (_next_t.type.attributes & TokenType.ATTRIBUTE_STRUCTURAL)?))
                  _begin_list
                  if (disable_output)     _discard_list
                  else                    _push_list( Args(_list_t) )
                else
                  _execute(ip_parser_args)
                  _pop_frame
                endIf
                if (not disable_output) _push( Println(_cur_t,_node_arg(-1)->(as Args)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_PRODUCE)
              temporarily _cur_t = _on_t
                _execute(ip_parser_product)
                _pop_frame
                if (not disable_output) _push( ParserProduce(_cur_t,_node_arg(-1)->(as CreateCmd)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.SYMBOL_ARROW)
              temporarily _cur_t = _on_t
                _execute(ip_parser_product)
                _pop_frame
                if (not disable_output) _push( ParserProduce(_cur_t,_node_arg(-1)->(as CreateCmd)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_PRODUCE_NULL)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( CreateNull(_cur_t), 0 )
                if (not disable_output) _push( null, 0 )
                if (not disable_output) _push( Return(_cur_t,_node_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_PRODUCE_LIST)
              temporarily _cur_t = _on_t
                _execute(ip_list_type)
                _pop_frame
                if (not disable_output) _push( ProduceList(_cur_t,_string_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_PRODUCE_TOKEN_LIST)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( ProduceTokenList(_cur_t), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_RESTORE_POSITION)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( RestorePosition(_cur_t), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_RETURN)
              temporarily _cur_t = _on_t
                if ((_next_t.type == TokenType.EOL))
                  if (not disable_output) _push( null, 0 )
                else
                  _throw_syntax_error
                endIf
                if (not disable_output) _push( Return(_cur_t,_node_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_SAVE_POSITION)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( SavePosition(_cur_t), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_SYNTAX_ERROR)
              temporarily _cur_t = _on_t
                if ((_next_t.type == TokenType.EOL))
                  if (not disable_output) _push( null, 0 )
                else
                  _execute(ip_parser_args)
                  _pop_frame
                endIf
                if (not disable_output) _push( ThrowSyntaxError(_cur_t,_node_arg(-1)->(as Args)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.SYMBOL_PLUS_PLUS)
              temporarily _cur_t = _on_t
                _execute(ip_parser_expression)
                _pop_frame
                if (not disable_output) _push( Increment(_cur_t,_node_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.SYMBOL_MINUS_MINUS)
              temporarily _cur_t = _on_t
                _execute(ip_parser_expression)
                _pop_frame
                if (not disable_output) _push( Decrement(_cur_t,_node_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            _execute(ip_parser_expression)
            _pop_frame
            if (_next_t.type == TokenType.SYMBOL_ASSIGN)
              temporarily _cur_t = _on_t
                _execute(ip_parser_expression)
                _pop_frame
                if (not disable_output) _push( Assign(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.SYMBOL_PLUS_PLUS)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( Increment(_cur_t,_node_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.SYMBOL_MINUS_MINUS)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( Decrement(_cur_t,_node_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            return
          case ip_list_type
            if ((_next_t.type == TokenType.IDENTIFIER))
              _execute(ip_identifier)
              _pop_frame
            else
              if (not disable_output) _push( null, 0 )
              return
            endIf
            return
          case ip_parser_args
            if (_consume(TokenType.SYMBOL_OPEN_PAREN))
              _execute(ip_consume_eols)
              _pop_frame
              _execute(ip_parser_arg_list)
              _pop_frame
              _execute(ip_consume_eols)
              _pop_frame
              if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
            else
              _execute(ip_parser_arg_list)
              _pop_frame
            endIf
            return
          case ip_parser_arg_list
            _begin_list
            if ((_next_t.type.attributes & TokenType.ATTRIBUTE_STRUCTURAL)?)
              if (disable_output)     _discard_list
              else                    _push_list( Args(_list_t) )
              return
            endIf
            _execute(ip_parser_expression)
            _pop_frame
            while ((_position < _limit))
              if (_consume(TokenType.SYMBOL_COMMA))
                _execute(ip_consume_eols)
                _pop_frame
                _execute(ip_parser_expression)
                _pop_frame
              elseIf (((_next_t.type == TokenType.EOL) or (_next_t.type.attributes & TokenType.ATTRIBUTE_STRUCTURAL)?))
                if (disable_output)     _discard_list
                else                    _push_list( Args(_list_t) )
                return
              else
                _execute(ip_parser_expression)
                _pop_frame
              endIf
            endWhile
            if (disable_output)     _discard_list
            else                    _push_list( Args(_list_t) )
            return
          case ip_ttype_or_literal
            if (_consume(TokenType.SYMBOL_OPEN_PAREN))
              _execute(ip_ttype_or_literal_inner)
              _pop_frame
              if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
            else
              _execute(ip_ttype_or_literal_inner)
              _pop_frame
            endIf
            return
          case ip_ttype_or_literal_inner
            if (_consume(TokenType.SYMBOL_AT))
              _execute(ip_token_id)
              _pop_frame
              if (not disable_output) _push( LiteralContent(_cur_t,_string_arg(-1)), 1 )
            else
              _execute(ip_token_id)
              _pop_frame
            endIf
            return
          case ip_attr_name_arg
            if (_consume(TokenType.SYMBOL_OPEN_PAREN))
              _execute(ip_attribute_name)
              _pop_frame
              if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
            else
              _execute(ip_attribute_name)
              _pop_frame
            endIf
            return
          case ip_attribute_name
            if (_next_t.type == TokenType.IDENTIFIER)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( Identifier(_cur_t,_cur_t.content), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.STRING)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( LiteralString(_cur_t,_cur_t.content), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.STRING_OR_CHARACTER)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( LiteralString(_cur_t,_cur_t.content), 0 )
                return
              endTemporarily
            endIf
            _throw_syntax_error("Attribute name expected.")
            return
          case ip_token_id
            if (_next_t.type == TokenType.IDENTIFIER)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( Identifier(_cur_t,_cur_t.content), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.STRING)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( LiteralString(_cur_t,_cur_t.content), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.STRING_OR_CHARACTER)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( LiteralString(_cur_t,_cur_t.content), 0 )
                return
              endTemporarily
            endIf
            _throw_syntax_error("TOKEN_ID or \"token_name\" expected.")
            return
          case ip_collect_parse_list
            _begin_list
            while ((((_position < _limit) and (not (_next_t.type == TokenType.EOL))) and (not (_next_t.type.attributes & TokenType.ATTRIBUTE_STRUCTURAL)?)))
              _consume(TokenType.SYMBOL_COMMA)
              _execute(ip_string_id_or_routine)
              _pop_frame
            endWhile
            if (disable_output)     _discard_list
            else                    _push_list( Args(_list_t) )
            return
          case ip_string_id_or_routine
            if (_next_t.type == TokenType.IDENTIFIER)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( Identifier(_cur_t,_cur_t.content), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.STRING)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( LiteralString(_cur_t,_cur_t.content), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.STRING_OR_CHARACTER)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( LiteralString(_cur_t,_cur_t.content), 0 )
                return
              endTemporarily
            endIf
            _throw_syntax_error("TOKEN_ID, \"token_name\", or routine_name expected.")
            return
          case ip_parser_product
            _execute(ip_consume_eols)
            _pop_frame
            _execute(ip_identifier)
            _pop_frame
            if (_consume(TokenType.SYMBOL_OPEN_PAREN))
              _execute(ip_cmd_args)
              _pop_frame
              if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
            else
              _begin_list
              if (disable_output)     _discard_list
              else                    _push_list( Args(_list_t) )
            endIf
            if (_consume(TokenType.SYMBOL_COLON))
              _execute(ip_type_name)
              _pop_frame
            else
              if (not disable_output) _push( null, 0 )
            endIf
            if (not disable_output) _push( CreateCmd(_cur_t,_string_arg(-3),_node_arg(-2)->(as Args),_string_arg(-1)), 3 )
            return
          case ip_parser_expression
            _execute(ip_parser_logical_or)
            _pop_frame
            return
          case ip_parser_logical_or
            _execute(ip_parser_logical_and)
            _pop_frame
            _execute(ip_parser_logical_or__inner)
            _pop_frame
            return
          case ip_parser_logical_or__inner
            if (_next_t.type == TokenType.KEYWORD_OR)
              temporarily _cur_t = _on_t
                _consume_eols
                _execute(ip_parser_logical_and)
                _pop_frame
                if (not disable_output) _push( LogicalOr(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
                _execute(ip_parser_logical_or__inner)
                _pop_frame
                return
              endTemporarily
            endIf
            return
          case ip_parser_logical_and
            _execute(ip_parser_comparison)
            _pop_frame
            _execute(ip_parser_logical_and__inner)
            _pop_frame
            return
          case ip_parser_logical_and__inner
            if (_next_t.type == TokenType.KEYWORD_AND)
              temporarily _cur_t = _on_t
                _consume_eols
                _execute(ip_parser_comparison)
                _pop_frame
                if (not disable_output) _push( LogicalAnd(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
                _execute(ip_parser_logical_and__inner)
                _pop_frame
                return
              endTemporarily
            endIf
            return
          case ip_parser_comparison
            _execute(ip_parser_add_subtract)
            _pop_frame
            _execute(ip_parser_comparison__inner)
            _pop_frame
            return
          case ip_parser_comparison__inner
            if (_next_t.type == TokenType.SYMBOL_EQ)
              temporarily _cur_t = _on_t
                _consume_eols
                _execute(ip_parser_add_subtract)
                _pop_frame
                if (not disable_output) _push( CompareEQ(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
                _execute(ip_parser_comparison__inner)
                _pop_frame
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.SYMBOL_NE)
              temporarily _cur_t = _on_t
                _consume_eols
                _execute(ip_parser_add_subtract)
                _pop_frame
                if (not disable_output) _push( CompareNE(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
                _execute(ip_parser_comparison__inner)
                _pop_frame
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.SYMBOL_LT)
              temporarily _cur_t = _on_t
                _consume_eols
                _execute(ip_parser_add_subtract)
                _pop_frame
                if (not disable_output) _push( CompareLT(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
                _execute(ip_parser_comparison__inner)
                _pop_frame
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.SYMBOL_GT)
              temporarily _cur_t = _on_t
                _consume_eols
                _execute(ip_parser_add_subtract)
                _pop_frame
                if (not disable_output) _push( CompareGT(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
                _execute(ip_parser_comparison__inner)
                _pop_frame
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.SYMBOL_LE)
              temporarily _cur_t = _on_t
                _consume_eols
                _execute(ip_parser_add_subtract)
                _pop_frame
                if (not disable_output) _push( CompareLE(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
                _execute(ip_parser_comparison__inner)
                _pop_frame
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.SYMBOL_GE)
              temporarily _cur_t = _on_t
                _consume_eols
                _execute(ip_parser_add_subtract)
                _pop_frame
                if (not disable_output) _push( CompareGE(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
                _execute(ip_parser_comparison__inner)
                _pop_frame
                return
              endTemporarily
            endIf
            return
          case ip_parser_add_subtract
            _execute(ip_parser_multiply_divide)
            _pop_frame
            _execute(ip_parser_add_subtract__inner)
            _pop_frame
            return
          case ip_parser_add_subtract__inner
            if (_next_t.type == TokenType.SYMBOL_PLUS)
              temporarily _cur_t = _on_t
                _consume_eols
                _execute(ip_parser_multiply_divide)
                _pop_frame
                if (not disable_output) _push( Add(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
                _execute(ip_parser_add_subtract__inner)
                _pop_frame
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.SYMBOL_MINUS)
              temporarily _cur_t = _on_t
                _consume_eols
                _execute(ip_parser_multiply_divide)
                _pop_frame
                if (not disable_output) _push( Subtract(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
                _execute(ip_parser_add_subtract__inner)
                _pop_frame
                return
              endTemporarily
            endIf
            return
          case ip_parser_multiply_divide
            _execute(ip_parser_power)
            _pop_frame
            _execute(ip_parser_multiply_divide__inner)
            _pop_frame
            return
          case ip_parser_multiply_divide__inner
            if (_next_t.type == TokenType.SYMBOL_STAR)
              temporarily _cur_t = _on_t
                _consume_eols
                _execute(ip_parser_power)
                _pop_frame
                if (not disable_output) _push( Multiply(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
                _execute(ip_parser_multiply_divide__inner)
                _pop_frame
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.SYMBOL_SLASH)
              temporarily _cur_t = _on_t
                _consume_eols
                _execute(ip_parser_power)
                _pop_frame
                if (not disable_output) _push( Divide(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
                _execute(ip_parser_multiply_divide__inner)
                _pop_frame
                return
              endTemporarily
            endIf
            return
          case ip_parser_power
            _execute(ip_parser_pre_unary)
            _pop_frame
            _execute(ip_parser_power__inner)
            _pop_frame
            return
          case ip_parser_power__inner
            if (_next_t.type == TokenType.SYMBOL_CARET)
              temporarily _cur_t = _on_t
                _consume_eols
                _execute(ip_parser_pre_unary)
                _pop_frame
                if (not disable_output) _push( Power(_cur_t,_node_arg(-2),_node_arg(-1)), 2 )
                _execute(ip_parser_power__inner)
                _pop_frame
                return
              endTemporarily
            endIf
            return
          case ip_parser_pre_unary
            if (_next_t.type == TokenType.SYMBOL_MINUS)
              temporarily _cur_t = _on_t
                _consume_eols
                _execute(ip_parser_pre_unary)
                _pop_frame
                if (not disable_output) _push( Negate(_cur_t,_node_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_NOT)
              temporarily _cur_t = _on_t
                _consume_eols
                _execute(ip_parser_pre_unary)
                _pop_frame
                if (not disable_output) _push( LogicalNot(_cur_t,_node_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            _execute(ip_parser_term)
            _pop_frame
            return
          case ip_parser_term
            if (_next_t.type == TokenType.SYMBOL_OPEN_PAREN)
              temporarily _cur_t = _on_t
                _execute(ip_parser_expression)
                _pop_frame
                if (not _consume(TokenType.SYMBOL_CLOSE_PAREN)) _throw_syntax_error( &expected=TokenType.SYMBOL_CLOSE_PAREN )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_BUFFER)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( ReadBuffer(_cur_t), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_CONSUME)
              temporarily _cur_t = _on_t
                _execute(ip_ttype_or_literal)
                _pop_frame
                if (not disable_output) _push( ParserConsume(_cur_t,_node_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_FALSE)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( LiteralLogical(_cur_t,_string_to_Logical("false")), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_HAS_NEXT)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( ParserHasAnother(_cur_t), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_NEXT_HAS_ATTRIBUTE)
              temporarily _cur_t = _on_t
                _execute(ip_attr_name_arg)
                _pop_frame
                if (not disable_output) _push( NextHasAttribute(_cur_t,_string_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_NEXT_IS)
              temporarily _cur_t = _on_t
                _execute(ip_ttype_or_literal)
                _pop_frame
                if (not disable_output) _push( ParserNextIs(_cur_t,_node_arg(-1)), 1 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_OUTPUT)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( ReadOutput(_cur_t), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_READ)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( ParserRead(_cur_t), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.KEYWORD_TRUE)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( LiteralLogical(_cur_t,_string_to_Logical("true")), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.IDENTIFIER)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( Access(_cur_t,_cur_t.content), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.INTEGER)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( LiteralInteger(_cur_t,_string_to_Integer(_cur_t.content)), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.STRING)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( LiteralString(_cur_t,_cur_t.content), 0 )
                return
              endTemporarily
            endIf
            if (_next_t.type == TokenType.STRING_OR_CHARACTER)
              temporarily _cur_t = _on_t
                if (not disable_output) _push( LiteralStringOrCharacter(_cur_t,_cur_t.content), 0 )
                return
              endTemporarily
            endIf
            _throw_syntax_error
            return
          case ip_additional_node_types
            if (not disable_output) _push( WriteBuffer(_cur_t,_node_arg(-1)), 1 )
            if (not disable_output) _push( WriteOutput(_cur_t,_node_arg(-1)), 1 )
            return
          others
            return
        endWhich
      endLoop
endClass

class ParserPosition( position:Int32, cmd_stack_count:Int32, cur_t:Token ) [compound];

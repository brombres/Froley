module Froley
  uses ParseKit<<Froley>>

enum ValueType
  VARIANT
  INT32
  LOGICAL
endEnum

augment Cmd
  METHODS
    method is_buffer->Logical
      return false

    method is_ch->Logical
      return false

    method is_integer->Logical
      return false

    method is_string->Logical
      return false

    method is_var->Logical
      return false

    method jump_if_true->TokenizerOpcode
      throw t.error( "Value expected." )

    method jump_if_false->TokenizerOpcode
      which (jump_if_true)
        case TokenizerOpcode.JUMP_EQ: return TokenizerOpcode.JUMP_NE
        case TokenizerOpcode.JUMP_NE: return TokenizerOpcode.JUMP_EQ
        case TokenizerOpcode.JUMP_LT: return TokenizerOpcode.JUMP_GE
        case TokenizerOpcode.JUMP_LE: return TokenizerOpcode.JUMP_GT
        case TokenizerOpcode.JUMP_GT: return TokenizerOpcode.JUMP_LE
        case TokenizerOpcode.JUMP_GE: return TokenizerOpcode.JUMP_LT
        others
          throw UnsupportedOperationError()
      endWhich

    method resolved->Cmd
      return this

    method resolve_assignment( new_value:Cmd )->Cmd
      throw t.error( "Illegal assignment." )

    method text->String
      return this->String

    method to->Int32
      throw UnsupportedOperationError()

    method to_is_range( low:Int32, high:Int32 )->Cmd
      throw t.error( "Syntax error; expected \"ch is 'a'..'z'\" etc." )

    method type->ValueType?
      return null

    method write( assembler:TokenizerAssembler )
      throw UnsupportedOperationError()

    method write( assembler:ParserAssembler )
      throw UnsupportedOperationError()

    method write_add( assembler:TokenizerAssembler, expression:Cmd )
      throw t.error( "Illegal operation target - target must be 'ch', 'count', or @varname." )

    method write_divide( assembler:TokenizerAssembler, expression:Cmd )
      throw t.error( "Illegal operation target - target must be @varname." )

    method write_logical_ands( assembler:TokenizerAssembler, target_if_false:Label )
      write( assembler )
      assembler.write( jump_if_false, target_if_false )

    method write_logical_ors( assembler:TokenizerAssembler, target_if_true:Label )
      write( assembler )
      assembler.write( jump_if_true, target_if_true )

    method write_multiply( assembler:TokenizerAssembler, expression:Cmd )
      throw t.error( "Illegal operation target - target must be @varname." )

    method write_subtract( assembler:TokenizerAssembler, expression:Cmd )
      throw t.error( "Illegal operation target - target must be 'ch' or @varname." )

    method error( message:String )->Error
      return t.error( message )

    method write_assignment( assembler:ParserAssembler, new_value:Cmd )
      throw t.error( "Invalid assignment target: " + this )
endAugment

augment CmdStatements
  METHODS
    method resolve
      forEach (statement at index in this)
        this[ index ] = statement.resolved
      endForEach

    method write( assembler:ParserAssembler )
      forEach (statement in this)
        statement.write( assembler )
        if (statement.type.exists)
          # Statement leaves a value on the stack that we need to remove
          assembler.write( ParserOpcode.POP_DISCARD )
        endIf
      endForEach

    method write( assembler:TokenizerAssembler )
      (forEach in this).write( assembler )
endAugment


augment CmdArgs
  METHODS
    method resolve
      forEach (statement at index in this)
        this[ index ] = statement.resolved
      endForEach

    method write( assembler:ParserAssembler )
      (forEach in this).write( assembler )

    method write( assembler:TokenizerAssembler )
      (forEach in this).write( assembler )
endAugment

class TokenizerCmdOp( t, name:String, opcode:TokenizerOpcode ) : Cmd
  # Generic statement with opcode and no operands
  METHODS
    method to->String
      return name

    method write( assembler:TokenizerAssembler )
      assembler.write( opcode )
endClass

class TokenizerCmdVarOp( t, name:String, opcode:TokenizerOpcode, varname:String ) : Cmd
  METHODS
    method to->String
      return name

    method write( assembler:TokenizerAssembler )
      assembler.write( opcode )
      assembler.write_var( varname )
endClass

class TokenizerCmdGoto( t, label_name:String ) : Cmd
  METHODS
    method write( assembler:TokenizerAssembler )
      assembler.[ write(TokenizerOpcode.JUMP), write_address(label_name) ]

    method to->String
      return "goto " + label_name
endClass

class TokenizerCmdGotoLabel( t, label:Label ) : Cmd
  METHODS
    method write( assembler:TokenizerAssembler )
      assembler.[ write(TokenizerOpcode.JUMP), write_address(label) ]

    method to->String
      return "goto " + label.name
endClass

class TokenizerCmdJump( t, address:Int32 ) : Cmd
  METHODS
    method write( assembler:TokenizerAssembler )
      assembler.write( TokenizerOpcode.JUMP, address )

    method to->String
      return "jump " + address
endClass

class TokenizerCmdMode( t, label_name:String) : Cmd
  METHODS
    method write( assembler:TokenizerAssembler )
      assembler.[ write(TokenizerOpcode.MODE_INT32), write_address(label_name) ]

    method to->String
      return "mode " + label_name
endClass

class TokenizerCmdLabel( t, name:String ) : Cmd
  METHODS
    method write( assembler:TokenizerAssembler )
      if (assembler.label(name).exists)
        throw error( "Label <$> has already been defined." (name) )
      endIf
      assembler.define( name )

    method to->String
      return "<$>" (name)
endClass

class TokenizerCmdAccess( t, name:String ) : Cmd
  METHODS
    method init( t )
      name = t.text

    method jump_if_true->TokenizerOpcode
      return TokenizerOpcode.JUMP_NE

    method to->Int32
      throw t.error( "to->Int32 unsupported" )

    method to->String
      return name

    method resolve_assignment( new_value:Cmd )->Cmd
      throw t.error( "Illegal assignment target. Valid targets are 'ch' and 'count'." )

    method write( assembler:TokenizerAssembler )
      TokenizerCmdCall( t, name ).write( assembler )
endClass

class TokenizerCmdAssign : CmdBinary
  METHODS
    method resolved->Cmd
      return left.resolve_assignment( right )

    method write( assembler:TokenizerAssembler )
      throw t.error( "Illegal assignment: $ = $" (left,right) )
endClass

class TokenizerCmdLiteralInt32( t, value:Int32 ) : Cmd
  METHODS
    method init( t )
      value = t->Int32

    method is_integer->Logical
      return true

    method to->Int32
      return value

    method to->String
      return value->String
endClass

class TokenizerCmdAdd( t, target:Cmd, value:Cmd ) : Cmd
  METHODS
    method write( assembler:TokenizerAssembler )
      target.write_add( assembler, value )
endClass

class TokenizerCmdSubtract( t, target:Cmd, value:Cmd ) : Cmd
  METHODS
    method write( assembler:TokenizerAssembler )
      target.write_subtract( assembler, value )
endClass

class TokenizerCmdMultiply( t, target:Cmd, value:Cmd ) : Cmd
  METHODS
    method write( assembler:TokenizerAssembler )
      target.write_multiply( assembler, value )
endClass

class TokenizerCmdDivide( t, target:Cmd, value:Cmd ) : Cmd
  METHODS
    method write( assembler:TokenizerAssembler )
      target.write_divide( assembler, value )
endClass


class TokenizerCmdCall( t, label_name:String ) : Cmd
  METHODS
    method write( assembler:TokenizerAssembler )
      assembler.write( TokenizerOpcode.CALL )
      assembler.write_address( label_name )
endClass

class TokenizerCmdRead( t ) : Cmd
  METHODS
    method write( assembler:TokenizerAssembler )
      throw t.error( "Syntax error - expected 'ch = read'." )

    method to->String
      return "read"
endClass

class TokenizerCmdWhile( t, condition:Cmd ) : Cmd
  PROPERTIES
    statements = CmdStatements()

  METHODS
    method resolved->Cmd
      condition = condition.resolved
      statements.resolve
      return this

    method write( assembler:TokenizerAssembler )
      local label_test = Label()
      local label_top  = Label()
      local label_end  = Label()
      assembler.write( TokenizerOpcode.JUMP, label_test )
      assembler.define( label_top )
      statements.write( assembler )
      assembler.define( label_test )
      if (condition instanceOf TokenizerCmdLogicalAnd)
        condition.write_logical_ands( assembler, label_end )
        assembler.write( TokenizerOpcode.JUMP, label_top )
      elseIf (condition instanceOf TokenizerCmdLogicalOr)
        condition.write_logical_ors( assembler, label_top )
      else
        condition.write( assembler )
        assembler.write( condition.jump_if_true, label_top )
      endIf
      assembler.define( label_end )
endClass

class TokenizerCmdIf( t, condition:Cmd ) : Cmd
  PROPERTIES
    statements      = CmdStatements()
    else_statements : CmdStatements

  METHODS
    method resolved->Cmd
      condition = condition.resolved
      statements.resolve
      if (else_statements) else_statements.resolve
      return this

    method write( assembler:TokenizerAssembler )
      local label_body   = Label()
      local label_else   = Label()
      local label_end_if = Label()
      if (condition instanceOf TokenizerCmdLogicalAnd)
        condition.write_logical_ands( assembler, label_else )
      elseIf (condition instanceOf TokenizerCmdLogicalOr)
        condition.write_logical_ors( assembler, label_body )
        assembler.write( TokenizerOpcode.JUMP, label_else )
      else
        condition.write( assembler )
        assembler.write( condition.jump_if_false, label_else )
      endIf
      assembler.define( label_body )
      statements.write( assembler )
      assembler.write( TokenizerOpcode.JUMP, label_end_if )
      assembler.define( label_else )
      if (else_statements) else_statements.write( assembler )
      assembler.define( label_end_if )
endClass

class TokenizerCmdHasAnother( t ) : Cmd
  METHODS
    method jump_if_true->TokenizerOpcode
      return TokenizerOpcode.JUMP_GT

    method to->String
      return "hasAnother"

    method type->ValueType?
      return ValueType.LOGICAL

    method write( assembler:TokenizerAssembler )
      assembler.write( TokenizerOpcode.HAS_ANOTHER )
endClass

class TokenizerCmdSetChToInt32( t, value:Int32 ) : Cmd
  METHODS
    method jump_if_true->TokenizerOpcode
      return TokenizerOpcode.JUMP_NE

    method write( assembler:TokenizerAssembler )
      assembler.write( TokenizerOpcode.SET_CH_TO_INT32, value )
endClass

class TokenizerCmdSetChToVar( t, name:String ) : Cmd
  METHODS
    method jump_if_true->TokenizerOpcode
      return TokenizerOpcode.JUMP_NE

    method write( assembler:TokenizerAssembler )
      assembler.write( TokenizerOpcode.SET_CH_TO_VAR )
      assembler.write_var( name )
endClass

class TokenizerCmdReadCh( t ) : Cmd
  METHODS
    method jump_if_true->TokenizerOpcode
      return TokenizerOpcode.JUMP_NE

    method write( assembler:TokenizerAssembler )
      assembler.write( TokenizerOpcode.READ_CH )
endClass

class TokenizerCmdChIsRange( t, low:Int32, high:Int32 ) : Cmd
  METHODS
    method jump_if_true->TokenizerOpcode
      return TokenizerOpcode.JUMP_NE

    method write( assembler:TokenizerAssembler )
      assembler.write( TokenizerOpcode.CH_IS_RANGE )
      assembler.write( low )
      assembler.write( high )
endClass

class TokenizerCmdSetBufferToString( t, value:String ) : Cmd
  METHODS
    method write( assembler:TokenizerAssembler )
      assembler.write( TokenizerOpcode.CLEAR_BUFFER )
      assembler.write( TokenizerOpcode.COLLECT_STRING, value )

    method to->String
      return ''buffer = "$"'' (value.to_escaped_ascii)
endClass

class TokenizerCmdRegisterBuffer( t ) : Cmd
  METHODS
    method is_buffer->Logical
      return true

    method resolve_assignment( new_value:Cmd )->Cmd
      if (new_value instanceOf TokenizerCmdLiteralString)
        return TokenizerCmdSetBufferToString( t, (new_value as TokenizerCmdLiteralString).value )
      else
        throw t.error( "Illegal 'buffer' assignment. Expected a literal string." )
      endIf

    method to->String
      return "buffer"

    method write( assembler:TokenizerAssembler )
      throw t.error( ''Syntax error - expected 'buffer = pop' or 'buffer = "<string>"'.'' )
endClass

class TokenizerCmdRegisterCh( t ) : Cmd
  METHODS
    method is_ch->Logical
      return true

    method resolve_assignment( new_value:Cmd )->Cmd
      if (new_value.is_integer)
        return TokenizerCmdSetChToInt32( t, new_value->Int32 )
      elseIf (new_value.is_var)
        return TokenizerCmdSetChToVar( t, new_value->String )
      elseIf (new_value instanceOf TokenizerCmdRead)
        return TokenizerCmdReadCh( t )
      elseIf (new_value instanceOf TokenizerCmdPeek)
        return TokenizerCmdPeekChInt32( t, 0 )
      elseIf (new_value instanceOf TokenizerCmdPeekInt32)
        return TokenizerCmdPeekChInt32( t, (new_value as TokenizerCmdPeekInt32).lookahead )
      elseIf (new_value instanceOf TokenizerCmdPeekVar)
        return TokenizerCmdPeekChVar( t, (new_value as TokenizerCmdPeekVar).name )
      else
        throw t.error( "Illegal 'ch' assignment. Expected 'count', 'read', '@varname', or an integer." )
      endIf

    method to->String
      return "ch"

    method to_is_range( low:Int32, high:Int32 )->Cmd
      return TokenizerCmdChIsRange( t, low, high )

    method write( assembler:TokenizerAssembler )
      assembler.write( TokenizerOpcode.SET_RESULT_TO_CH )

    method write_add( assembler:TokenizerAssembler, expression:Cmd )
      local cmd_int = expression as TokenizerCmdLiteralInt32
      if (cmd_int)
        assembler.write( TokenizerOpcode.ADD_CH_INT32, cmd_int.value )
      else
        throw expression.error( "Illegal operation value; integer expected." )
      endIf

    method write_subtract( assembler:TokenizerAssembler, expression:Cmd )
      local cmd_int = expression as TokenizerCmdLiteralInt32
      if (cmd_int)
        assembler.write( TokenizerOpcode.ADD_CH_INT32, -cmd_int.value )
      else
        throw expression.error( "Illegal operation value; integer expected." )
      endIf
endClass

class TokenizerCmdSetVarToInt32( t, name:String, value:Int32 ) : Cmd
  METHODS
    method jump_if_true->TokenizerOpcode
      return TokenizerOpcode.JUMP_NE

    method write( assembler:TokenizerAssembler )
      assembler.write( TokenizerOpcode.SET_VAR_TO_INT32 )
      assembler.write_var( name )
      assembler.write( value )
endClass

class TokenizerCmdSetVarToCh( t, name:String ) : Cmd
  METHODS
    method jump_if_true->TokenizerOpcode
      return TokenizerOpcode.JUMP_NE

    method write( assembler:TokenizerAssembler )
      assembler.write( TokenizerOpcode.SET_VAR_TO_CH )
      assembler.write_var( name )
endClass


class TokenizerCmdCompare<<$OPCODE>> : CmdBinary
  METHODS
    method jump_if_true->TokenizerOpcode
      return TokenizerOpcode.$OPCODE

    method to->String
      local symbol = "<>"
      which (TokenizerOpcode.$OPCODE)
        case TokenizerOpcode.JUMP_EQ: symbol = "=="
        case TokenizerOpcode.JUMP_NE: symbol = "!="
        case TokenizerOpcode.JUMP_LT: symbol = "<"
        case TokenizerOpcode.JUMP_LE: symbol = "<="
        case TokenizerOpcode.JUMP_GT: symbol = ">"
        case TokenizerOpcode.JUMP_GE: symbol = ">="
      endWhich
      return "$ $ $" (left,symbol,right)

    method write( assembler:TokenizerAssembler )
      if (left.is_ch)
        if (right.is_integer)
          assembler.write( TokenizerOpcode.COMPARE_CH_INT32, right->Int32 )
          return
        endIf
      endIf
      if (left.is_var)
        if (right.is_integer)
          assembler.write( TokenizerOpcode.COMPARE_VAR_INT32 )
          assembler.write_var( left->String )
          assembler.write( right->Int32 )
          return
        endIf
      endIf
      if (left.is_buffer)
        local st = right as TokenizerCmdLiteralString
        if (st)
          assembler.write( TokenizerOpcode.COMPARE_BUFFER_STRING, st.value )
          return
        endIf
      endIf
      throw t.error( "Unsupported comparison between '$' and '$'." (left,right) )
endClass

class TokenizerCmdCompareEQ : TokenizerCmdCompare<<JUMP_EQ>>;
class TokenizerCmdCompareNE : TokenizerCmdCompare<<JUMP_NE>>;
class TokenizerCmdCompareLT : TokenizerCmdCompare<<JUMP_LT>>;
class TokenizerCmdCompareLE : TokenizerCmdCompare<<JUMP_LE>>;
class TokenizerCmdCompareGT : TokenizerCmdCompare<<JUMP_GT>>;
class TokenizerCmdCompareGE : TokenizerCmdCompare<<JUMP_GE>>;

class TokenizerCmdCollectCharacter( t, value:Int32 ) : Cmd
  METHODS
    method to->String
      return "collect '$'" (value->Character.to_escaped_ascii)

    method write( assembler:TokenizerAssembler )
      assembler.write( TokenizerOpcode.COLLECT_CHARACTER, value )
endClass

class TokenizerCmdCollectString( t, value:String ) : Cmd
  METHODS
    method to->String
      return ''collect "$"'' (value.to_escaped_ascii)

    method write( assembler:TokenizerAssembler )
      assembler.write( TokenizerOpcode.COLLECT_STRING, value )
endClass

class TokenizerCmdCreateInt32( t, token_type:Int32 ) : Cmd
  METHODS
    method to->String
      return Froley.token_def( token_type ).name

    method write( assembler:TokenizerAssembler )
      assembler.write( TokenizerOpcode.CREATE_INT32, token_type )
endClass

class TokenizerCmdPeek( t ) : Cmd
  METHODS
    method to->String
      return "peek"

    method write( assembler:TokenizerAssembler )
      throw t.error( "Syntax error - expected 'ch = peek'." )
endClass

class TokenizerCmdPeekVar( t, name:String ) : Cmd
  METHODS
    method to->String
      return "peek(@$)"(name)

    method write( assembler:TokenizerAssembler )
      throw t.error( "Syntax error - expected 'ch = peek(@$)'."(name) )
endClass

class TokenizerCmdPeekInt32( t, lookahead:Int32 ) : Cmd
  METHODS
    method to->String
      return "peek($)" (lookahead)

    method write( assembler:TokenizerAssembler )
      throw t.error( "Syntax error - expected 'ch = peek($)'." (lookahead) )
endClass

class TokenizerCmdPeekChVar( t, name:String ) : Cmd
  METHODS
    method to->String
      return "ch = peek(@varname)"

    method write( assembler:TokenizerAssembler )
      assembler.write( TokenizerOpcode.PEEK_CH_VAR )
      assembler.write_var( name )
endClass

class TokenizerCmdPeekChInt32( t, lookahead:Int32 ) : Cmd
  METHODS
    method to->String
      return "ch = peek($)" (lookahead)

    method write( assembler:TokenizerAssembler )
      assembler.write( TokenizerOpcode.PEEK_CH_INT32, lookahead )
endClass

class TokenizerCmdConsumeCharacter( t, value:Int32 ) : Cmd
  METHODS
    method jump_if_true->TokenizerOpcode
      return TokenizerOpcode.JUMP_NE

    method to->String
      return "consume($)" (value->Character.to_escaped_ascii)

    method write( assembler:TokenizerAssembler )
      assembler.write( TokenizerOpcode.CONSUME_CHARACTER, value )
endClass

class TokenizerCmdConsumeString( t, value:String ) : Cmd
  METHODS
    method jump_if_true->TokenizerOpcode
      return TokenizerOpcode.JUMP_NE

    method to->String
      return "consume($)" (value.to_escaped_ascii)

    method write( assembler:TokenizerAssembler )
      assembler.write( TokenizerOpcode.CONSUME_STRING, value )
endClass

class TokenizerCmdMustConsumeCharacter( t, value:Int32 ) : Cmd
  METHODS
    method jump_if_true->TokenizerOpcode
      return TokenizerOpcode.JUMP_NE

    method to->String
      return "mustConsume($)" (value->Character.to_escaped_ascii)

    method write( assembler:TokenizerAssembler )
      assembler.write( TokenizerOpcode.MUST_CONSUME_CHARACTER, value )
endClass

class TokenizerCmdNextIsCharacter( t, low:Int32, high:Int32 ) : Cmd
  METHODS
    method jump_if_true->TokenizerOpcode
      return TokenizerOpcode.JUMP_NE

    method to->String
      return "nextIs($..$)" (low->Character.to_escaped_ascii,high->Character.to_escaped_ascii)

    method write( assembler:TokenizerAssembler )
      assembler.write( TokenizerOpcode.NEXT_IS_CHARACTER )
      assembler.write( low )
      assembler.write( high )
endClass

class TokenizerCmdLiteralString( t, value:String ) : Cmd
  METHODS
    method init( t )
      value = t.text

    method is_string->Logical
      return true

    method text->String
      return value

    method to->String
      return ''"$"'' (value.to_escaped_ascii)

    method write( assembler:TokenizerAssembler )
      throw t.error( "Syntax error - unexpected literal string." )
endClass

class TokenizerCmdWhichInput : Cmd
  PROPERTIES
    start = ScanState()

  METHODS
    method init( t )
      start.is_acceptable = true

    method resolved->Cmd
      start.resolve
      return this

    method write( assembler:TokenizerAssembler )
      assembler.write( TokenizerOpcode.WHICH_INPUT )
      local label_end = Label()
      local states = ScanState[]
      start.collect( states )
      (forEach in states).is_collected = false
      (forEach in states).write( assembler, label_end )
      assembler.define( label_end )
endClass

class TokenizerCmdWhichBuffer : Cmd
  PROPERTIES
    start = ScanState()

  METHODS
    method init( t )
      start.is_acceptable = true

    method resolved->Cmd
      start.resolve
      return this

    method write( assembler:TokenizerAssembler )
      assembler.write( TokenizerOpcode.WHICH_BUFFER )
      local label_end = Label()
      local states = ScanState[]
      start.collect( states )
      (forEach in states).is_collected = false
      (forEach in states).write( assembler, label_end )
      assembler.define( label_end )
endClass

class TokenizerCmdNot( t, operand ) : CmdUnary
  METHODS
    method jump_if_true->TokenizerOpcode
      return operand.jump_if_false

    method jump_if_false->TokenizerOpcode
      return operand.jump_if_true

    method resolved->Cmd
      operand = operand.resolved
      return this

    method to->String
      return "not " + operand

    method write( assembler:TokenizerAssembler )
      operand.write( assembler )
endClass

class TokenizerCmdLogicalAnd : CmdBinary
  METHODS
    method resolved->Cmd
      left  = left.resolved
      right = right.resolved
      return this

    method to->String
      return "($ and $)" (left,right)

    method type->ValueType?
      return ValueType.LOGICAL

    method write( assembler:TokenizerAssembler )
      throw t.error( "Condition too complex - only simple 'a or b or ...', 'a and b and...' conditions are allowed." )

    method write_logical_ands( assembler:TokenizerAssembler, target_if_false:Label )
      left.write_logical_ands( assembler, target_if_false )
      right.write_logical_ands( assembler, target_if_false )

endClass

class TokenizerCmdLogicalOr : CmdBinary
  METHODS
    method resolved->Cmd
      left  = left.resolved
      right = right.resolved
      return this

    method type->ValueType?
      return ValueType.LOGICAL

    method to->String
      return "($ or $)" (left,right)

    method write( assembler:TokenizerAssembler )
      throw t.error( "Condition too complex - only simple 'a or b or ...', 'a and b and...' conditions are allowed." )

    method write_logical_ors( assembler:TokenizerAssembler, target_if_true:Label )
      left.write_logical_ors( assembler, target_if_true )
      right.write_logical_ors( assembler, target_if_true )

endClass

class TokenizerCmdTrace : Cmd
  METHODS
    method write( assembler:TokenizerAssembler )
      assembler.write( TokenizerOpcode.TRACE, t.line )
endClass

class TokenizerCmdVarAccess( t, name:String ) : Cmd
  METHODS
    method is_var->Logical
      return true

    method jump_if_true->TokenizerOpcode
      return TokenizerOpcode.JUMP_NE

    method to->String
      return name

    method resolve_assignment( new_value:Cmd )->Cmd
      if (new_value.is_integer)
        return TokenizerCmdSetVarToInt32( t, name, new_value->Int32 )
      elseIf (new_value.is_ch)
        return TokenizerCmdSetVarToCh( t, name )
      else
        throw t.error( "Illegal variable assignment. Expected 'ch' or an integer." )
      endIf

    method write( assembler:TokenizerAssembler )
      assembler.write( TokenizerOpcode.SET_RESULT_TO_VAR )
      assembler.write_var( name )

    method write_add( assembler:TokenizerAssembler, expression:Cmd )
      local cmd_int = expression as TokenizerCmdLiteralInt32
      if (cmd_int)
        assembler.write( TokenizerOpcode.ADD_VAR_INT32 )
        assembler.write_var( name )
        assembler.write( cmd_int.value )
      elseIf (expression.is_var)
        assembler.write( TokenizerOpcode.ADD_VAR_VAR )
        assembler.write_var( name )
        assembler.write_var( expression->String )
      else
        throw expression.error( "Illegal operation value; integer or variable expected." )
      endIf

    method write_divide( assembler:TokenizerAssembler, expression:Cmd )
      local cmd_int = expression as TokenizerCmdLiteralInt32
      if (cmd_int)
        assembler.write( TokenizerOpcode.DIV_VAR_INT32 )
        assembler.write_var( name )
        assembler.write( cmd_int.value )
      else
        throw expression.error( "Illegal operation value; integer expected." )
      endIf

    method write_multiply( assembler:TokenizerAssembler, expression:Cmd )
      local cmd_int = expression as TokenizerCmdLiteralInt32
      if (cmd_int)
        assembler.write( TokenizerOpcode.MUL_VAR_INT32 )
        assembler.write_var( name )
        assembler.write( cmd_int.value )
      else
        throw expression.error( "Illegal operation value; integer expected." )
      endIf

    method write_subtract( assembler:TokenizerAssembler, expression:Cmd )
      local cmd_int = expression as TokenizerCmdLiteralInt32
      if (cmd_int)
        assembler.write( TokenizerOpcode.ADD_VAR_INT32 )
        assembler.write_var( name )
        assembler.write( -cmd_int.value )
      elseIf (expression.is_var)
        assembler.write( TokenizerOpcode.SUB_VAR_VAR )
        assembler.write_var( name )
        assembler.write_var( expression->String )
      else
        throw expression.error( "Illegal operation value; integer or variable expected." )
      endIf
endClass

class TokenizerCmdCustom( t, name:String ) : Cmd
  METHODS
    method to->String
      return "custom($)"(name)

    method write( assembler:TokenizerAssembler )
      assembler.write( TokenizerOpcode.CUSTOM, name )
endClass

class ParserCmdOnType( t, token_type_def:TokenDef ) : Cmd
  PROPERTIES
    statements = CmdStatements()
    else_on    : ParserCmdOnType
    peek       = false

  METHODS
    method write( assembler:ParserAssembler )
      if (token_type_def)
        local label_else = Label()
        local label_done = Label()
        if (peek) assembler.write( ParserOpcode.ON_PEEK_TOKEN_TYPE, token_type_def.type )
        else      assembler.write( ParserOpcode.ON_TOKEN_TYPE, token_type_def.type )
        assembler.write_address( label_else )
        statements.write( assembler )
        assembler.write( ParserOpcode.POP_CUR_TOKEN )
        assembler.write( ParserOpcode.JUMP, label_done )
        assembler.define( label_else )
        if (else_on) else_on.write( assembler )
        assembler.define( label_done )
      else
        # just an 'else'
        statements.write( assembler )
      endIf
endClass

class ParserCmdOnTypeProduce( t, token_type_def:TokenDef, constructor:Constructor ) : Cmd
  PROPERTIES
    statements = CmdStatements()
    peek : Logical

  METHODS
    method write( assembler:ParserAssembler )
      assembler.this_method.write( this, assembler )
endClass

class ParserCmdConsumeTokenType( t, token_type_def:TokenDef ) : Cmd
  METHODS
    method type->ValueType?
      return ValueType.LOGICAL

    method write( assembler:ParserAssembler )
      assembler.write( ParserOpcode.CONSUME_TYPE, token_type_def.type )
endClass

class ParserCmdConsumeString( t, content:String ) : Cmd
  METHODS
    method type->ValueType?
      return ValueType.LOGICAL

    method write( assembler:ParserAssembler )
      assembler.write( ParserOpcode.CONSUME_STRING, content )
endClass

class ParserCmdNextIsTokenType( t, token_type_def:TokenDef ) : Cmd
  METHODS
    method type->ValueType?
      return ValueType.LOGICAL

    method write( assembler:ParserAssembler )
      assembler.write( ParserOpcode.NEXT_IS_TYPE, token_type_def.type )
endClass

class ParserCmdNextIsString( t, content:String ) : Cmd
  METHODS
    method type->ValueType?
      return ValueType.LOGICAL

    method write( assembler:ParserAssembler )
      assembler.write( ParserOpcode.NEXT_IS_STRING, content )
endClass

class ParserCmdMustConsumeType( t, token_type_def:TokenDef ) : Cmd
  METHODS
    method write( assembler:ParserAssembler )
      assembler.write( ParserOpcode.MUST_CONSUME_TYPE, token_type_def.type )
endClass

class ParserCmdMustConsumeString( t, content:String ) : Cmd
  METHODS
    method write( assembler:ParserAssembler )
      assembler.write( ParserOpcode.MUST_CONSUME_STRING, content )
endClass

class ParserCmdCreate( t, constructor:Constructor ) : Cmd
  PROPERTIES
    args = ConstructorArg[]

  METHODS
    method write( assembler:ParserAssembler )
      assembler.write( ParserOpcode.CREATE_CMD, constructor.index )
      assembler.write( constructor.subcommand_count )
endClass

class ParserCmdCreateNull( t ) : Cmd
  METHODS
    method write( assembler:ParserAssembler )
      assembler.write( ParserOpcode.CREATE_NULL_CMD )
endClass

class ParserCmdCreateList( t, list_type:Constructor ) : Cmd
  METHODS
    method write( assembler:ParserAssembler )
      assembler.write( ParserOpcode.CREATE_LIST, list_type.index )
endClass

class ParserCmdDiscardList( t ) : Cmd
  METHODS
    method write( assembler:ParserAssembler )
      assembler.write( ParserOpcode.DISCARD_LIST )
endClass

class ParserCmdPrintlnString( t, value:String ) : Cmd
  METHODS
    method write( assembler:ParserAssembler )
      assembler.write( ParserOpcode.PRINTLN_STRING, value )
endClass

class ParserCmdPrintlnCmd( t, value:Cmd ) : Cmd
  METHODS
    method write( assembler:ParserAssembler )
      value.write( assembler )
      assembler.write( ParserOpcode.PRINTLN_NUMBER )
endClass

class ParserCmdReturn( t, expression:Cmd ) : Cmd
  METHODS
    method write( assembler:ParserAssembler )
      if (expression) expression.write( assembler )
      assembler.write( ParserOpcode.RETURN )

endClass

class ParserCmdAccess( t, name:String ) : Cmd
  METHODS
    method init( t )
      name = t->String

    method type->ValueType?
      if (Froley.parser_methods[name]) return null
      else                             return ValueType.VARIANT

    method write( assembler:ParserAssembler )
      local m = Froley.parser_methods[ name ]
      if (m)
        assembler.write( ParserOpcode.CALL, m.start_label )
      else
        assembler.write( ParserOpcode.READ_VAR, name )
      endIf

    method write_assignment( assembler:ParserAssembler, new_value:Cmd )
      ParserCmdWriteVar( t, name, new_value ).write( assembler )
endClass

class ParserCmdSyntaxError( t, message=null:String ) : Cmd
  METHODS
    method write( assembler:ParserAssembler )
      if (message)
        assembler.write( ParserOpcode.SYNTAX_ERROR_STRING, message )
      else
        assembler.write( ParserOpcode.SYNTAX_ERROR )
      endIf
endClass

class ParserCmdWhile( t, condition:Cmd ) : Cmd
  PROPERTIES
    statements = CmdStatements()

  METHODS
    method resolved->Cmd
      condition = condition.resolved
      statements.resolve
      return this

    method write( assembler:ParserAssembler )
      local label_test = Label()
      local label_top  = Label()
      local label_end  = Label()
      assembler.write( ParserOpcode.JUMP, label_test )
      assembler.define( label_top )
      statements.write( assembler )
      assembler.define( label_test )
      condition.write( assembler )
      assembler.write( ParserOpcode.JUMP_IF_TRUE, label_top )
      assembler.define( label_end )
endClass

class ParserCmdBeginList( t ) : Cmd
  METHODS
    method write( assembler:ParserAssembler )
      assembler.write( ParserOpcode.BEGIN_LIST )
endClass

class ParserCmdHasAnother( t ) : Cmd
  METHODS
    method write( assembler:ParserAssembler )
      assembler.write( ParserOpcode.HAS_ANOTHER )
endClass

class ParserCmdNextHasAttribute( t, name:String ) : Cmd
  METHODS
    method type->ValueType?
      return ValueType.LOGICAL

    method write( assembler:ParserAssembler )
      assembler.write( ParserOpcode.NEXT_HAS_ATTRIBUTE, Froley.token_attribute(name) )
endClass

class ParserCmdLogicalAnd : CmdBinary
  METHODS
    method write( assembler:ParserAssembler )
      local label_false = Label()
      local label_done  = Label()
      left.write( assembler )
      assembler.write( ParserOpcode.JUMP_IF_FALSE, label_false )
      right.write( assembler )
      assembler.write( ParserOpcode.JUMP_IF_FALSE, label_false )
      assembler.write( ParserOpcode.PUSH_INT32, 1 )  # true
      assembler.write( ParserOpcode.JUMP, label_done )
      assembler.define( label_false )
      assembler.write( ParserOpcode.PUSH_INT32, 0 )  # false
      assembler.define( label_done )
endClass

class ParserCmdLogicalOr : CmdBinary
  METHODS
    method write( assembler:ParserAssembler )
      local label_true = Label()
      local label_done = Label()
      left.write( assembler )
      assembler.write( ParserOpcode.JUMP_IF_TRUE, label_true )
      right.write( assembler )
      assembler.write( ParserOpcode.JUMP_IF_TRUE, label_true )
      assembler.write( ParserOpcode.PUSH_INT32, 0 )  # false
      assembler.write( ParserOpcode.JUMP, label_done )
      assembler.define( label_true )
      assembler.write( ParserOpcode.PUSH_INT32, 1 )  # true
      assembler.define( label_done )
endClass

class ParserCmdLogicalNot : CmdUnary
  METHODS
    method type->ValueType?
      return ValueType.LOGICAL

    method write( assembler:ParserAssembler )
      operand.write( assembler )
      assembler.write( ParserOpcode.LOGICAL_NOT )
endClass

class ParserCmdIf( t, condition:Cmd ) : Cmd
  PROPERTIES
    statements      = CmdStatements()
    else_statements : CmdStatements

  METHODS
    method resolved->Cmd
      condition = condition.resolved
      statements.resolve
      if (else_statements) else_statements.resolve
      return this

    method write( assembler:ParserAssembler )
      local label_body   = Label()
      local label_else   = Label()
      local label_end_if = Label()
      condition.write( assembler )
      assembler.write( ParserOpcode.JUMP_IF_FALSE, label_else )
      statements.write( assembler )
      assembler.write( ParserOpcode.JUMP, label_end_if )
      assembler.define( label_else )
      if (else_statements) else_statements.write( assembler )
      assembler.define( label_end_if )
endClass

class ParserCmdTrace : Cmd
  METHODS
    method write( assembler:ParserAssembler )
      assembler.write( ParserOpcode.TRACE, t.line )
endClass

class ParserCmdDeclareVar( t, name:String, value:Cmd ) : Cmd
  METHODS
    method write( assembler:ParserAssembler )
      value.write( assembler )
      assembler.write( ParserOpcode.DECLARE_VAR, name )
endClass

class ParserCmdWriteVar( t, name:String, value:Cmd ) : Cmd
  METHODS
    method write( assembler:ParserAssembler )
      value.write( assembler )
      assembler.write( ParserOpcode.WRITE_VAR, name )
endClass

class ParserCmdLiteralInt32( t, value:Int32 ) : Cmd
  METHODS
    method init( t )
      value = t->Int32

    method type->ValueType?
      return ValueType.INT32

    method write( assembler:ParserAssembler )
      assembler.write( ParserOpcode.PUSH_INT32, value )
endClass

class ParserCmdLiteralTrue : Cmd
  METHODS
    method type->ValueType?
      return ValueType.INT32

    method write( assembler:ParserAssembler )
      assembler.write( ParserOpcode.PUSH_INT32, 1 )
endClass

class ParserCmdLiteralFalse : Cmd
  METHODS
    method type->ValueType?
      return ValueType.INT32

    method write( assembler:ParserAssembler )
      assembler.write( ParserOpcode.PUSH_INT32, 0 )
endClass

class ParserCmdAssign( t, target:Cmd, new_value:Cmd ) : Cmd
  METHODS
    method write( assembler:ParserAssembler )
      target.write_assignment( assembler, new_value )
endClass

class ParserCmdSavePosition( t ) : Cmd
  METHODS
    method write( assembler:ParserAssembler )
      assembler.write( ParserOpcode.SAVE_POSITION )
endClass

class ParserCmdRestorePosition( t ) : Cmd
  METHODS
    method write( assembler:ParserAssembler )
      assembler.write( ParserOpcode.RESTORE_POSITION )
endClass

class ParserCmdDiscardPosition( t ) : Cmd
  METHODS
    method write( assembler:ParserAssembler )
      assembler.write( ParserOpcode.DISCARD_POSITION )
endClass

class ParserCmdCompare<<$OPCODE>> : CmdBinary
  METHODS
    method to->String
      local symbol = "<>"
      which (ParserOpcode.$OPCODE)
        case ParserOpcode.COMPARE_EQ: symbol = "=="
        case ParserOpcode.COMPARE_NE: symbol = "!="
        case ParserOpcode.COMPARE_LT: symbol = "<"
        case ParserOpcode.COMPARE_LE: symbol = "<="
        case ParserOpcode.COMPARE_GT: symbol = ">"
        case ParserOpcode.COMPARE_GE: symbol = ">="
      endWhich
      return "$ $ $" (left,symbol,right)

    method write( assembler:ParserAssembler )
      left.write( assembler )
      right.write( assembler )
      assembler.write( ParserOpcode.$OPCODE )
endClass

class ParserCmdCompareEQ : ParserCmdCompare<<COMPARE_EQ>>;
class ParserCmdCompareNE : ParserCmdCompare<<COMPARE_NE>>;
class ParserCmdCompareLT : ParserCmdCompare<<COMPARE_LT>>;
class ParserCmdCompareLE : ParserCmdCompare<<COMPARE_LE>>;
class ParserCmdCompareGT : ParserCmdCompare<<COMPARE_GT>>;
class ParserCmdCompareGE : ParserCmdCompare<<COMPARE_GE>>;

class ParserCmdOp( t, name:String, opcode:ParserOpcode ) : Cmd
  # Generic statement with opcode and no operands
  METHODS
    method to->String
      return name

    method write( assembler:ParserAssembler )
      assembler.write( opcode )
endClass

class ParserCmdCustom( t, name:String ) : Cmd
  METHODS
    method write( assembler:ParserAssembler )
      assembler.write( ParserOpcode.CUSTOM, name )
endClass


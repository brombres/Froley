module Froley

class RInspectionVisitor : RogueSourceWriter
  PROPERTIES
    handled_node_types = Set<<String>>()

  METHODS
    method init_object
      class_name = "InspectionVisitor"

    method scan_node_types( content:String )
      forEach (line in LineReader(content))
        if (line.contains("method on("))
          local node_type = line.after_first('(').before_first(')').after_first(':').trimmed
          handled_node_types.add( node_type )
        endIf
      endForEach

    method update_content( content:String )->String
      if (not String.exists(content) or not content.contains("class InspectionVisitor<<"))
        if (content is null) content = ""
        content +=  "# Generated and updated by Froley. Custom changes will not be overwritten; customize as desired.\n"
        content += "module $\n\n"(Program.project_name)
        content += @|class InspectionVisitor<<$ReturnType>>
                    |  PROPERTIES
                    |    is_halting     : Logical
                    |    default_result = $ReturnType.meta.default_value : $ReturnType
                    |
                    |  METHODS
                    |    method on( cmd:Cmd )->$ReturnType
                    |      # Default per-node InspectionVisitor call sequence.
                    |      #
                    |      #   CALL                        OVERLOADABLE METHOD
                    |      #   --------------------        ------------------------
                    |      #   visit(cmd)->$ReturnType  -> on(cmd:CmdType)->$ReturnType
                    |      #     enter(cmd) ->               on_enter(cmd:CmdType)
                    |      enter( cmd )
                    |      return default_result
                    |
                    |    method on( cmd:CmdList )->Logical
                    |      local result = default_result
                    |      forEach (statement in cmd.list)
                    |        result = visit(statement)
                    |        if (is_halting) return result
                    |      endForEach
                    |      return result
                    |
                    |    method on_enter( cmd:Cmd )
                    |      # By default this method is called from the default on(CmdType) before
                    |      # children are visited.
                    |
                    |    method visit( cmd:Cmd )->$ReturnType [propagated]
                    |      if (cmd is null or is_halting) return default_result
                    |      return cmd.dispatch<<ThisType,$ReturnType>>( this )
                    |
                    |    method enter( cmd:Cmd ) [propagated]
                    |      cmd.dispatch_on_enter<<ThisType>>( this )
                    |
                    |    method halt
                    |      is_halting = true
      endIf

      scan_node_types( content )

      local builder = StringBuilder(content.count*2)

      local end_class_location = content.locate( "endClass", content.locate("class InspectionVisitor").value )
      local bottom = "endClass\n"
      if (end_class_location)
        bottom = content.from( end_class_location.value )
        content = content.leftmost( end_class_location.value ).trimmed
      endIf

      builder.println( content )
      builder.indent = 4

      forEach (node_type in Program.types.values.to_list.sorted((a,b)=>(a.name<b.name)))
        if (node_type.is_built_in or node_type.is_native) nextIteration

        if (not handled_node_types.contains(node_type.name))
          handled_node_types.add( node_type.name )

          local properties = node_type.properties
          properties .= discarding( (p) => p.type.is_built_in or p.type.is_native )
          local extended_properties = node_type.extended_properties
          extended_properties .= discarding( (p) => p.type.is_built_in or p.type.is_native )

          if (extended_properties.count)
            local check_halt = false

            builder.println
            builder.print(  "method on( cmd:" ).print( node_type.name ).println( " )->$ReturnType" )
            if (node_type.is_list and node_type.name != "CmdList")
              builder.println "  local result = on( cmd->(as CmdList) )"
              check_halt = true
            else
              builder.println "  local result = default_result"
            endIf

            if (properties.count)
              forEach (p in properties)
                local type = p.type
                if (not (type.is_built_in or type.is_native))
                  if (check_halt) builder.println   "  if (is_halting) return result"
                  builder.println   "  result = visit(cmd.$)"(p.name)
                endIf
                check_halt = true
              endForEach
            endIf

            builder.println "  return result"
          endIf
        endIf
      endForEach

      builder.println

      content = builder->String + bottom
      return content
endClass
